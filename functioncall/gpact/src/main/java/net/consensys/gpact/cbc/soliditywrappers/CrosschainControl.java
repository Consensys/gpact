package net.consensys.gpact.cbc.soliditywrappers;

import io.reactivex.Flowable;
import io.reactivex.functions.Function;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.Callable;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.FunctionEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Bool;
import org.web3j.abi.datatypes.DynamicArray;
import org.web3j.abi.datatypes.DynamicBytes;
import org.web3j.abi.datatypes.Event;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.Utf8String;
import org.web3j.abi.datatypes.generated.Bytes32;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.RemoteFunctionCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.BaseEventResponse;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tuples.generated.Tuple3;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 4.8.5-SNAPSHOT.
 */
@SuppressWarnings("rawtypes")
public class CrosschainControl extends Contract {
    public static final String BINARY = "60806040523480156200001157600080fd5b506040516200386e3803806200386e83398101604081905262000034916200005d565b600180546001600160a01b0319166001600160a01b03929092169190911790556002556200009c565b600080604083850312156200007157600080fd5b825160208401519092506001600160a01b03811681146200009157600080fd5b809150509250929050565b6137c280620000ac6000396000f3fe608060405234801561001057600080fd5b506004361061010b5760003560e01c80638eaf89d8116100a2578063b4c3b75611610071578063b4c3b75614610245578063df1bba011461024e578063f0f67af214610261578063f830b7b414610274578063fb11639e1461029457600080fd5b80638eaf89d8146101b657806392b2c335146101e35780639efabd34146101f6578063b28320961461020957600080fd5b80635c27d307116100de5780635c27d307146101535780637bf37a0914610168578063877ba01d146101705780638e22d534146101a357600080fd5b80632af6cdf0146101105780633193c08b1461012c57806339ce107e14610135578063439160df1461014a575b600080fd5b61011960055481565b6040519081526020015b60405180910390f35b61011960065481565b610148610143366004612e7c565b6102a7565b005b61011960025481565b61015b610355565b6040516101239190613329565b600654610119565b61019361017e3660046130ed565b60046020526000908152604090205460ff1681565b6040519015158152602001610123565b6101196101b13660046131ad565b6103e3565b600554600d54600e546040805193845260208401929092526001600160a01b031690820152606001610123565b6101486101f13660046131ad565b610422565b610148610204366004612e9e565b6104f2565b610148610217366004613181565b60009182526020829052604090912080546001600160a01b0319166001600160a01b03909216919091179055565b60065415610193565b61014861025c366004613206565b6108b3565b61014861026f366004612e9e565b6109ca565b6101196102823660046130ed565b60036020526000908152604090205481565b6101486102a2366004612f8e565b610fe4565b60005b600b5481101561030257816001600160a01b0316600b82815481106102d1576102d1613760565b6000918252602090912001546001600160a01b031614156102f0575050565b806102fa81613719565b9150506102aa565b50600b80546001810182556000919091527f0175b7a638427703f0dbe7bb9bbf987a2551717b34e79f33b5b1008d1fa01db90180546001600160a01b0319166001600160a01b0392909216919091179055565b60078054610362906136de565b80601f016020809104026020016040519081016040528092919081815260200182805461038e906136de565b80156103db5780601f106103b0576101008083540402835291602001916103db565b820191906000526020600020905b8154815290600101906020018083116103be57829003601f168201915b505050505081565b60008060606103f48787878761138f565b9092509050811561040a5760009250505061041a565b6104158160006117c8565b925050505b949350505050565b600060606104328686868661138f565b9092509050816104ea576104558160405180602001604052806000815250611834565b6104ea577f38e7ccc4b02b2da681f96e62aef89b5c6d4115f501f8d42430bb2f5f2fa981a66040516104d49060208082526033908201527f43726f737320426c6f636b636861696e2043616c6c207769746820756e65787060408201527265637465642072657475726e2076616c75657360681b606082015260800190565b60405180910390a1600c805460ff191660011790555b505050505050565b6105068a8a8a8a8a8a8a8a8a8a600061185f565b600061056a8585600081811061051e5761051e613760565b905060200281019061053091906134fe565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092018290525092506117c8915050565b905060006105d38686600081811061058457610584613760565b905060200281019061059691906134fe565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250602092506117c8915050565b905060006106218d8d60008181106105ed576105ed613760565b9050602002013584604080516020808201949094528082019290925280518083038201815260609092019052805191012090565b905060015b8681101561084857600061064589898481811061051e5761051e613760565b905080851461065357600080fd5b60006106b98a8a8581811061066a5761066a613760565b905060200281019061067c91906134fe565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250606092506117c8915050565b905060006107208b8b868181106106d2576106d2613760565b90506020028101906106e491906134fe565b8080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152508692506117c8915050565b905060005b818110156108315760006107b58d8d8881811061074457610744613760565b905060200281019061075691906134fe565b8080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506107989250869150602090506135b3565b6107a387602061359b565b6107ad919061359b565b016020015190565b60405163267ad75360e21b815289151560048201526024810189905290915081906001600160a01b038216906399eb5d4c90604401600060405180830381600087803b15801561080457600080fd5b505af1158015610818573d6000803e3d6000fd5b505050505050808061082990613719565b915050610725565b50505050808061084090613719565b915050610626565b507f8426029537c24c21c8056ae94a666a5e448f1080699c70b9bf691cfeb9d5feec8d8d600081811061087d5761087d613760565b905060200201358460405161089c929190918252602082015260400190565b60405180910390a150505050505050505050505050565b3233146109075760405162461bcd60e51b815260206004820181905260248201527f5374617274206d7573742062652063616c6c65642066726f6d20616e20454f4160448201526064015b60405180910390fd5b600084815260036020526040902054156109635760405162461bcd60e51b815260206004820152601e60248201527f5472616e73616374696f6e20616c72656164792072656769737465726564000060448201526064016108fe565b600061096f428561359b565b60008681526003602052604090819020829055519091507f77dab611ad9a24b763e2742f57749a0227393e0da76212d74fceb326b0661424906109bb9087903390859088908890613385565b60405180910390a15050505050565b6109de8a8a8a8a8a8a8a8a8a8a600161185f565b60008a8a60008181106109f3576109f3613760565b6020029190910135915050323314610a5e5760405162461bcd60e51b815260206004820152602860248201527f5472616e73616374696f6e206d75737420626520696e737469676174656420626044820152677920616e20454f4160c01b60648201526084016108fe565b8060025414610aaf5760405162461bcd60e51b815260206004820152601f60248201527f54686973206973206e6f742074686520726f6f7420626c6f636b636861696e0060448201526064016108fe565b60058190558888600081610ac557610ac5613760565b9050602002016020810190610ada9190612e7c565b6001600160a01b0316306001600160a01b031614610b505760405162461bcd60e51b815260206004820152602d60248201527f526f6f7420626c6f636b636861696e2043424320636f6e74726163742077617360448201526c206e6f742074686973206f6e6560981b60648201526084016108fe565b6000610b688686600081811061051e5761051e613760565b60008181526003602052604090205490915080610bb95760405162461bcd60e51b815260206004820152600f60248201526e43616c6c206e6f742061637469766560881b60448201526064016108fe565b6001811415610c015760405162461bcd60e51b815260206004820152601460248201527343616c6c20656e6465642028737563636573732960601b60448201526064016108fe565b6002811415610c495760405162461bcd60e51b815260206004820152601460248201527343616c6c20656e64656420286661696c7572652960601b60448201526064016108fe565b80421115610c6a57610c5a82611e74565b610c62611ec3565b505050610fd8565b6000610cd188886000818110610c8257610c82613760565b9050602002810190610c9491906134fe565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250602092506107ad915050565b90506001600160a01b0381163214610d2b5760405162461bcd60e51b815260206004820152601e60248201527f454f4120646f6573206e6f74206d61746368207374617274206576656e74000060448201526064016108fe565b6000610d9289896000818110610d4357610d43613760565b9050602002810190610d5591906134fe565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250608092506117c8915050565b90506000610dfd8a8a6000818110610dac57610dac613760565b9050602002810190610dbe91906134fe565b8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525060a09250869150611f209050565b8051909150610e13906007906020840190612c37565b508051602082012060408051600180825281830190925260009181602001602082028036833750508151919250610e5291600891506020840190612cbb565b50610e68610e608c8e6135e9565b82848a611fde565b15610e7a575050505050505050610fd8565b6040805160208082018b90528183018a90528251808303840181526060909201909252805191012060068190556000610eb38584612286565b50905060005b600b54811015610f5e576000600b8281548110610ed857610ed8613760565b60009182526020909120015460405163267ad75360e21b81528415156004820152602481018690526001600160a01b03909116915081906399eb5d4c90604401600060405180830381600087803b158015610f3257600080fd5b505af1158015610f46573d6000803e3d6000fd5b50505050508080610f5690613719565b915050610eb9565b5080610f6b576002610f6e565b60015b60008a8152600360205260409081902091909155517fe6763dd99bf894d72f3499dd572aa42876eae7ae028c32fff21654e1bbc4c80790610fbd908b9084909182521515602082015260400190565b60405180910390a1610fcd611ec3565b505050505050505050505b50505050505050505050565b610ff88c8c8c8c8c8c8c8c8c8c600161185f565b60008c8c600081811061100d5761100d613760565b60200291909101359150503233146110725760405162461bcd60e51b815260206004820152602260248201527f5365676d656e74206d7573742062652063616c6c65642066726f6d20616e20456044820152614f4160f01b60648201526084016108fe565b600061108a8888600081811061051e5761051e613760565b905060006110a489896000818110610c8257610c82613760565b90506001600160a01b03811632146110fe5760405162461bcd60e51b815260206004820152601e60248201527f454f4120646f6573206e6f74206d61746368207374617274206576656e74000060448201526064016108fe565b50600061111789896000818110610d4357610d43613760565b905060008383878760405160200161113294939291906132eb565b60408051601f1981840301815291815281516020928301206000818152600490935291205490915060ff16156111b65760405162461bcd60e51b8152602060048201526024808201527f5365676d656e74207472616e73616374696f6e20616c726561647920657865636044820152631d5d195960e21b60648201526084016108fe565b600090815260046020526111d38a8a8381610dac57610dac613760565b80516020820120600586905590915060018a11156112655781516111fe906007906020850190612c37565b5061120b60088888612cf5565b506112566112198b8d6135e9565b888880806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250869250899150611fde9050565b15611265575050505050611381565b604080516020808201889052818301879052825180830384018152606090920190925280519101206006819055506112d08288888080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525061243092505050565b60006060611311848a8a8080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525061228692505050565b60405191935091507fb01557f1f634b7c5072ab5e36d07a2355ef819faca5a3d321430d71987155b8f9061135390889086908d908d90600b90899089906133be565b60405180910390a160018c11156113715761136c612472565b611379565b6113796124e1565b505050505050505b505050505050505050505050565b600954600a54600091606091106113dd57600c805460ff19166001179055600a80549060006113bd83613719565b9190505550600160405180602001604052806000815250915091506117bf565b60085461143a5760405162461bcd60e51b815260206004820152602560248201527f4163746976652043616c6c732063616c6c2070617468206c656e677468206973604482015264207a65726f60d81b60648201526084016108fe565b6008546000906001600160401b0381111561145757611457613776565b604051908082528060200260200182016040528015611480578160200160208202803683370190505b50905060005b600854611495906001906135d2565b8110156114e957600881815481106114af576114af613760565b90600052602060002001548282815181106114cc576114cc613760565b6020908102919091010152806114e181613719565b915050611486565b50600a546114f890600161359b565b816001835161150791906135d2565b8151811061151757611517613760565b60200260200101818152505060008060006115be60078054611538906136de565b80601f0160208091040260200160405190810160405280929190818152602001828054611564906136de565b80156115b15780601f10611586576101008083540402835291602001916115b1565b820191906000526020600020905b81548152906001019060200180831161159457829003601f168201915b5050505050856001612527565b925092509250828a1415806115e55750816001600160a01b0316896001600160a01b031614155b8061162e575061162c88888080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250859250611834915050565b155b156116b757600c805460ff19166001179055600a805490600061165083613719565b91905055507f8b5fc485a070cefca43e0a1d8cc72cf38dc31d5bf14f58cedcc59c73cac84e15838b848c858d8d60405161169097969594939291906134a4565b60405180910390a160016040518060200160405280600081525095509550505050506117bf565b600a805460009160099190836116cc83613719565b91905055815481106116e0576116e0613760565b9060005260206000200180546116f5906136de565b80601f0160208091040260200160405190810160405280929190818152602001828054611721906136de565b801561176e5780601f106117435761010080835404028352916020019161176e565b820191906000526020600020905b81548152906001019060200180831161175157829003601f168201915b505050505090507f971a379ee339d51e370a4733845f31c68e234014c8494ecedb867ae2cdc1ef688b8b8b8b856040516117ac95949392919061333c565b60405180910390a1600096509450505050505b94509492505050565b60006117d582602061359b565b835110156118255760405162461bcd60e51b815260206004820152601e60248201527f736c6963696e67206f7574206f662072616e6765202875696e7432353629000060448201526064016108fe565b50818101602001515b92915050565b600081518351146118475750600061182e565b8180519060200120838051906020012014905061182e565b89806118ad5760405162461bcd60e51b815260206004820152601a60248201527f4d757374206265206174206c65617374206f6e65206576656e7400000000000060448201526064016108fe565b8089146119195760405162461bcd60e51b815260206004820152603460248201527f4e756d626572206f6620626c6f636b636861696e2049647320616e6420636263604482015273082c8c8e4cae6e6cae640daeae6e840dac2e8c6d60631b60648201526084016108fe565b8087146119985760405162461bcd60e51b815260206004820152604160248201527f4e756d626572206f6620626c6f636b636861696e2049647320616e642065766560448201527f6e742066756e6374696f6e207369676e617475726573206d757374206d6174636064820152600d60fb1b608482015260a4016108fe565b808514611a025760405162461bcd60e51b815260206004820152603260248201527f4e756d626572206f6620626c6f636b636861696e2049647320616e64206576656044820152710dce840c8c2e8c240daeae6e840dac2e8c6d60731b60648201526084016108fe565b808314611a5f5760405162461bcd60e51b815260206004820152602560248201527f4e756d626572206f66206576656e747320616e64207369676e617475726573206044820152640dac2e8c6d60db1b60648201526084016108fe565b60005b81811015611e655760008d8d83818110611a7e57611a7e613760565b60209081029290920135600081815292839052604090922054919250506001600160a01b031680611aff5760405162461bcd60e51b815260206004820152602560248201527f4e6f207265676973746572656420766572696669657220666f7220626c6f636b60448201526431b430b4b760d91b60648201526084016108fe565b6001546001600160a01b03166360ce2812838f8f87818110611b2357611b23613760565b9050602002016020810190611b389190612e7c565b6040516001600160e01b031960e085901b16815260048101929092526001600160a01b0316602482015260440160206040518083038186803b158015611b7d57600080fd5b505afa158015611b91573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611bb591906130cb565b5082611c8b57600085611be8577fe6763dd99bf894d72f3499dd572aa42876eae7ae028c32fff21654e1bbc4c807611c0a565b7f77dab611ad9a24b763e2742f57749a0227393e0da76212d74fceb326b06614245b90508b8b85818110611c1e57611c1e613760565b905060200201358114611c855760405162461bcd60e51b815260206004820152602960248201527f556e6578706563746564206669727374206576656e742066756e6374696f6e206044820152687369676e617475726560b81b60648201526084016108fe565b50611d25565b8a8a84818110611c9d57611c9d613760565b905060200201357fb01557f1f634b7c5072ab5e36d07a2355ef819faca5a3d321430d71987155b8f14611d255760405162461bcd60e51b815260206004820152602a60248201527f4576656e742066756e6374696f6e207369676e6174757265206e6f7420666f726044820152690818481cd959db595b9d60b21b60648201526084016108fe565b6000828e8e86818110611d3a57611d3a613760565b9050602002016020810190611d4f9190612e7c565b8d8d87818110611d6157611d61613760565b905060200201358c8c88818110611d7a57611d7a613760565b9050602002810190611d8c91906134fe565b604051602001611da09594939291906132b1565b6040516020818303038152906040529050816001600160a01b0316634c1ce902848e8e88818110611dd357611dd3613760565b90506020020135848c8c8a818110611ded57611ded613760565b9050602002810190611dff91906134fe565b6040518663ffffffff1660e01b8152600401611e1f959493929190613472565b60006040518083038186803b158015611e3757600080fd5b505afa158015611e4b573d6000803e3d6000fd5b505050505050508080611e5d90613719565b915050611a62565b50505050505050505050505050565b6000818152600360209081526040808320600290558051848152918201929092527fe6763dd99bf894d72f3499dd572aa42876eae7ae028c32fff21654e1bbc4c807910160405180910390a150565b60056000905560076000611ed79190612d30565b611ee360086000612d6d565b611eef60096000612d8b565b6000600a55600c5460ff1615611f0a57600c805460ff191690555b600660009055600b6000611f1e9190612d6d565b565b60606000826001600160401b03811115611f3c57611f3c613776565b6040519080825280601f01601f191660200182016040528015611f66576020820181803683370190505b50905060005b83811015611fd55785611f7f828761359b565b81518110611f8f57611f8f613760565b602001015160f81c60f81b828281518110611fac57611fac613760565b60200101906001600160f81b031916908160001a90535080611fcd81613719565b915050611f6c565b50949350505050565b600060015b855181101561227a57600086828151811061200057612000613760565b6020026020010151905060006120178260006117c8565b90506000612026836020612768565b905060006120358460406117c8565b905060006120448560806117c8565b905060006120538660a06117c8565b9050600061206187836117c8565b9050600061207a8861207485602061359b565b84611f20565b9050600061208889876117c8565b90508b88146120f35760405162461bcd60e51b815260206004820152603160248201527f5472616e73616374696f6e2069642066726f6d207365676d656e7420616e64206044820152700e4dedee840c8de40dcdee840dac2e8c6d607b1b60648201526084016108fe565b868d146121585760405162461bcd60e51b815260206004820152602d60248201527f43616c6c2067726170682066726f6d207365676d656e7420616e6420726f6f7460448201526c040c8de40dcdee840dac2e8c6d609b1b60648201526084016108fe565b8d60018f5161216791906135d2565b8151811061217757612177613760565b602002602001015160001461218b57600080fd5b8d518114806121a557508d516121a290600161359b565b81145b6121f15760405162461bcd60e51b815260206004820181905260248201527f4261642063616c6c2070617468206c656e67746820666f72207365676d656e7460448201526064016108fe565b8461221a576121ff8c611e74565b612207612472565b60019a505050505050505050505061041a565b60098054600181018255600091909152825161225d917f6e1540171b6c0c960b71a7020d9f60077f6af931a8bbf590da0223dacf75c7af01906020850190612c37565b50505050505050505050808061227290613719565b915050611fe3565b50600095945050505050565b60006060600080600061229b87876001612527565b925092509250600254831461230f5760405162461bcd60e51b815260206004820152603460248201527f54617267657420626c6f636b636861696e20696420646f6573206e6f74206d616044820152731d18da081b5e48189b1bd8dad8da185a5b881a5960621b60648201526084016108fe565b60006060836001600160a01b03168360405161232b9190613295565b6000604051808303816000865af19150503d8060008114612368576040519150601f19603f3d011682016040523d82523d6000602084013e61236d565b606091505b509092509050816123b8577f38e7ccc4b02b2da681f96e62aef89b5c6d4115f501f8d42430bb2f5f2fa981a66123a2826127cd565b6040516123af9190613329565b60405180910390a15b600a546009541461240d57600954600a546040517fce3bac95f99adf24dc6d7d8a7264b6c40b211c40e0f79a78482298c0867fae9b9261240092908252602082015260400190565b60405180910390a1600091505b600c5460ff1661241d5781612420565b60005b96509450505050505b9250929050565b600061243b8261282c565b905061244983826000612527565b50600e80546001600160a01b0319166001600160a01b0392909216919091179055600d55505050565b61247e60076000612d30565b61248a60086000612d6d565b600660009055600b600061249e9190612d6d565b6124aa60096000612d8b565b6000600a55600c5460ff16156124c557600c805460ff191690555b6000600d819055600e80546001600160a01b0319169055600555565b600c5460ff16156124f757600c805460ff191690555b600660009055600b600061250b9190612d6d565b60006005819055600d55600e80546001600160a01b0319169055565b60008060606000805b8651811015612641576000806125468a85612a46565b905060ff81166125cc576001895161255e91906135d2565b83146125c75760405162461bcd60e51b815260206004820152603260248201527f52656163686564206c6561662066756e6374696f6e206275742074686572652060448201527134b99036b7b9329031b0b636103830ba341760711b60648201526084016108fe565b612620565b60008984815181106125e0576125e0613760565b602002602001015190506126168b60016004846125fd91906135b3565b612607908961359b565b612611919061359b565b612aac565b63ffffffff169250505b61262a828561359b565b93505050808061263990613719565b915050612530565b50856001875161265191906135d2565b8151811061266157612661613760565b60200260200101516000146126de57600061267c8883612a46565b905060ff8116156126cf5760405162461bcd60e51b815260206004820152601760248201527f4578706563746564206c6561662066756e6374696f6e2e00000000000000000060448201526064016108fe565b6126da60018361359b565b9150505b6126e887826117c8565b93506126f560208261359b565b90506127048782016014015190565b9250841561274b5761271760148261359b565b905060006127258883612b12565b905061273260028361359b565b915061274388838361ffff16612b78565b92505061275e565b6040518060200160405280600081525091505b5093509350939050565b60008060005b60208110156127c5576127828160086135b3565b8561278d838761359b565b8151811061279d5761279d613760565b01602001516001600160f81b031916901c9190911790806127bd81613719565b91505061276e565b509392505050565b606060448251101561281257505060408051808201909152601d81527f5472616e73616374696f6e2072657665727465642073696c656e746c79000000602082015290565b6004820191508180602001905181019061182e9190613106565b8051606090819060018114801561285d57508360008151811061285157612851613760565b60200260200101516000145b1561286a5761286a613734565b836128766001836135d2565b8151811061288657612886613760565b602002602001015160001461296757806001600160401b038111156128ad576128ad613776565b6040519080825280602002602001820160405280156128d6578160200160208202803683370190505b50915060005b6128e76001836135d2565b8110156129375784818151811061290057612900613760565b602002602001015183828151811061291a5761291a613760565b60209081029190910101528061292f81613719565b9150506128dc565b506000826129466001846135d2565b8151811061295657612956613760565b602002602001018181525050612a3f565b6129726001826135d2565b6001600160401b0381111561298957612989613776565b6040519080825280602002602001820160405280156129b2578160200160208202803683370190505b50915060005b6129c36002836135d2565b811015612a13578481815181106129dc576129dc613760565b60200260200101518382815181106129f6576129f6613760565b602090810291909101015280612a0b81613719565b9150506129b8565b50600082612a226002846135d2565b81518110612a3257612a32613760565b6020026020010181815250505b5092915050565b6000612a5382600161359b565b83511015612aa35760405162461bcd60e51b815260206004820152601c60248201527f736c6963696e67206f7574206f662072616e6765202875696e7438290000000060448201526064016108fe565b50016001015190565b6000612ab982600461359b565b83511015612b095760405162461bcd60e51b815260206004820152601d60248201527f736c6963696e67206f7574206f662072616e6765202875696e7433322900000060448201526064016108fe565b50016004015190565b6000612b1f82600261359b565b83511015612b6f5760405162461bcd60e51b815260206004820152601d60248201527f736c6963696e67206f7574206f662072616e6765202875696e7431362900000060448201526064016108fe565b50016002015190565b6060612b84828461359b565b84511015612bc95760405162461bcd60e51b815260206004820152601260248201527152656164206f7574206f6620626f756e647360701b60448201526064016108fe565b606082158015612be457604051915060208201604052611fd5565b6040519150601f8416801560200281840101858101878315602002848b0101015b81831015612c1d578051835260209283019201612c05565b5050858452601f01601f1916604052505090509392505050565b828054612c43906136de565b90600052602060002090601f016020900481019282612c655760008555612cab565b82601f10612c7e57805160ff1916838001178555612cab565b82800160010185558215612cab579182015b82811115612cab578251825591602001919060010190612c90565b50612cb7929150612da9565b5090565b828054828255906000526020600020908101928215612cab5791602002820182811115612cab578251825591602001919060010190612c90565b828054828255906000526020600020908101928215612cab579160200282015b82811115612cab578235825591602001919060010190612d15565b508054612d3c906136de565b6000825580601f10612d4c575050565b601f016020900490600052602060002090810190612d6a9190612da9565b50565b5080546000825590600052602060002090810190612d6a9190612da9565b5080546000825590600052602060002090810190612d6a9190612dbe565b5b80821115612cb75760008155600101612daa565b80821115612cb7576000612dd28282612d30565b50600101612dbe565b80356001600160a01b0381168114612df257600080fd5b919050565b60008083601f840112612e0957600080fd5b5081356001600160401b03811115612e2057600080fd5b6020830191508360208260051b850101111561242957600080fd5b60008083601f840112612e4d57600080fd5b5081356001600160401b03811115612e6457600080fd5b60208301915083602082850101111561242957600080fd5b600060208284031215612e8e57600080fd5b612e9782612ddb565b9392505050565b60008060008060008060008060008060a08b8d031215612ebd57600080fd5b8a356001600160401b0380821115612ed457600080fd5b612ee08e838f01612df7565b909c509a5060208d0135915080821115612ef957600080fd5b612f058e838f01612df7565b909a50985060408d0135915080821115612f1e57600080fd5b612f2a8e838f01612df7565b909850965060608d0135915080821115612f4357600080fd5b612f4f8e838f01612df7565b909650945060808d0135915080821115612f6857600080fd5b50612f758d828e01612df7565b915080935050809150509295989b9194979a5092959850565b60008060008060008060008060008060008060c08d8f031215612fb057600080fd5b6001600160401b038d351115612fc557600080fd5b612fd28e8e358f01612df7565b909c509a506001600160401b0360208e01351115612fef57600080fd5b612fff8e60208f01358f01612df7565b909a5098506001600160401b0360408e0135111561301c57600080fd5b61302c8e60408f01358f01612df7565b90985096506001600160401b0360608e0135111561304957600080fd5b6130598e60608f01358f01612df7565b90965094506001600160401b0360808e0135111561307657600080fd5b6130868e60808f01358f01612df7565b90945092506001600160401b0360a08e013511156130a357600080fd5b6130b38e60a08f01358f01612df7565b81935080925050509295989b509295989b509295989b565b6000602082840312156130dd57600080fd5b81518015158114612e9757600080fd5b6000602082840312156130ff57600080fd5b5035919050565b60006020828403121561311857600080fd5b81516001600160401b0381111561312e57600080fd5b8201601f8101841361313f57600080fd5b805161315261314d82613574565b613544565b81815285602083850101111561316757600080fd5b6131788260208301602086016136ae565b95945050505050565b6000806040838503121561319457600080fd5b823591506131a460208401612ddb565b90509250929050565b600080600080606085870312156131c357600080fd5b843593506131d360208601612ddb565b925060408501356001600160401b038111156131ee57600080fd5b6131fa87828801612e3b565b95989497509550505050565b6000806000806060858703121561321c57600080fd5b843593506020850135925060408501356001600160401b038111156131ee57600080fd5b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b600081518084526132818160208601602086016136ae565b601f01601f19169290920160200192915050565b600082516132a78184602087016136ae565b9190910192915050565b8581526bffffffffffffffffffffffff198560601b1660208201528360348201528183605483013760009101605401908152949350505050565b8481526020810184905260006001600160fb1b0383111561330b57600080fd5b8260051b808560408501376000920160400191825250949350505050565b602081526000612e976020830184613269565b8581526001600160a01b03851660208201526080604082018190526000906133679083018587613240565b82810360608401526133798185613269565b98975050505050505050565b85815260018060a01b03851660208201528360408201526080606082015260006133b3608083018486613240565b979650505050505050565b87815260006020888184015260c060408401528660c084015260018060fb1b038711156133ea57600080fd5b8660051b808960e086013760e0908401848103820160608601528754918101829052600088815283812092909161010001905b808310156134465783546001600160a01b0316825260019384019392909201919084019061341d565b50871515608087015285810360a08701526134618188613269565b9d9c50505050505050505050505050565b8581528460208201526080604082015260006134916080830186613269565b8281036060840152613379818587613240565b878152602081018790526001600160a01b0386811660408301528516606082015260c0608082018190526000906134dd90830186613269565b82810360a08401526134f0818587613240565b9a9950505050505050505050565b6000808335601e1984360301811261351557600080fd5b8301803591506001600160401b0382111561352f57600080fd5b60200191503681900382131561242957600080fd5b604051601f8201601f191681016001600160401b038111828210171561356c5761356c613776565b604052919050565b60006001600160401b0382111561358d5761358d613776565b50601f01601f191660200190565b600082198211156135ae576135ae61374a565b500190565b60008160001904831182151516156135cd576135cd61374a565b500290565b6000828210156135e4576135e461374a565b500390565b60006001600160401b038084111561360357613603613776565b8360051b6020613614818301613544565b868152818101908636858201111561362b57600080fd5b600094505b888510156136a25780358681111561364757600080fd5b880136601f82011261365857600080fd5b803561366661314d82613574565b818152368783850101111561367a57600080fd5b8187840188830137600091810187019190915284525060019490940193918301918301613630565b50979650505050505050565b60005b838110156136c95781810151838201526020016136b1565b838111156136d8576000848401525b50505050565b600181811c908216806136f257607f821691505b6020821081141561371357634e487b7160e01b600052602260045260246000fd5b50919050565b600060001982141561372d5761372d61374a565b5060010190565b634e487b7160e01b600052600160045260246000fd5b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fdfea26469706673582212200b28d5bb57a0246d54fef37e56d506006a04acb453f443329c1f0067cd4a477364736f6c63430008050033";

    public static final String FUNC_ACTIVECALLCROSSCHAINROOTTXID = "activeCallCrosschainRootTxId";

    public static final String FUNC_ACTIVECALLGRAPH = "activeCallGraph";

    public static final String FUNC_ACTIVECALLROOTBLOCKCHAINID = "activeCallRootBlockchainId";

    public static final String FUNC_ADDTOLISTOFLOCKEDCONTRACTS = "addToListOfLockedContracts";

    public static final String FUNC_ADDVERIFIER = "addVerifier";

    public static final String FUNC_CROSSBLOCKCHAINCALL = "crossBlockchainCall";

    public static final String FUNC_CROSSBLOCKCHAINCALLRETURNSUINT256 = "crossBlockchainCallReturnsUint256";

    public static final String FUNC_GETACTIVECALLCROSSCHAINROOTTXID = "getActiveCallCrosschainRootTxId";

    public static final String FUNC_ISSINGLEBLOCKCHAINCALL = "isSingleBlockchainCall";

    public static final String FUNC_MYBLOCKCHAINID = "myBlockchainId";

    public static final String FUNC_ROOT = "root";

    public static final String FUNC_ROOTTRANSACTIONINFORMATION = "rootTransactionInformation";

    public static final String FUNC_SEGMENT = "segment";

    public static final String FUNC_SEGMENTTRANSACTIONEXECUTED = "segmentTransactionExecuted";

    public static final String FUNC_SIGNALLING = "signalling";

    public static final String FUNC_START = "start";

    public static final String FUNC_WHOCALLEDME = "whoCalledMe";

    public static final Event BADCALL_EVENT = new Event("BadCall", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Address>() {}, new TypeReference<Address>() {}, new TypeReference<DynamicBytes>() {}, new TypeReference<DynamicBytes>() {}));
    ;

    public static final Event CALLFAILURE_EVENT = new Event("CallFailure", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
    ;

    public static final Event CALLRESULT_EVENT = new Event("CallResult", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Address>() {}, new TypeReference<DynamicBytes>() {}, new TypeReference<DynamicBytes>() {}));
    ;

    public static final Event DUMP_EVENT = new Event("Dump", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Bytes32>() {}, new TypeReference<Address>() {}, new TypeReference<DynamicBytes>() {}));
    ;

    public static final Event NOTENOUGHCALLS_EVENT = new Event("NotEnoughCalls", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event ROOT_EVENT = new Event("Root", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Bool>() {}));
    ;

    public static final Event SEGMENT_EVENT = new Event("Segment", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Bytes32>() {}, new TypeReference<DynamicArray<Uint256>>() {}, new TypeReference<DynamicArray<Address>>() {}, new TypeReference<Bool>() {}, new TypeReference<DynamicBytes>() {}));
    ;

    public static final Event SIGNALLING_EVENT = new Event("Signalling", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event START_EVENT = new Event("Start", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}, new TypeReference<DynamicBytes>() {}));
    ;

    @Deprecated
    protected CrosschainControl(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected CrosschainControl(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected CrosschainControl(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected CrosschainControl(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public List<BadCallEventResponse> getBadCallEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(BADCALL_EVENT, transactionReceipt);
        ArrayList<BadCallEventResponse> responses = new ArrayList<BadCallEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            BadCallEventResponse typedResponse = new BadCallEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse._expectedBlockchainId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse._actualBlockchainId = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse._expectedContract = (String) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse._actualContract = (String) eventValues.getNonIndexedValues().get(3).getValue();
            typedResponse._expectedFunctionCall = (byte[]) eventValues.getNonIndexedValues().get(4).getValue();
            typedResponse._actualFunctionCall = (byte[]) eventValues.getNonIndexedValues().get(5).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<BadCallEventResponse> badCallEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, BadCallEventResponse>() {
            @Override
            public BadCallEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(BADCALL_EVENT, log);
                BadCallEventResponse typedResponse = new BadCallEventResponse();
                typedResponse.log = log;
                typedResponse._expectedBlockchainId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse._actualBlockchainId = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse._expectedContract = (String) eventValues.getNonIndexedValues().get(2).getValue();
                typedResponse._actualContract = (String) eventValues.getNonIndexedValues().get(3).getValue();
                typedResponse._expectedFunctionCall = (byte[]) eventValues.getNonIndexedValues().get(4).getValue();
                typedResponse._actualFunctionCall = (byte[]) eventValues.getNonIndexedValues().get(5).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<BadCallEventResponse> badCallEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(BADCALL_EVENT));
        return badCallEventFlowable(filter);
    }

    public List<CallFailureEventResponse> getCallFailureEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(CALLFAILURE_EVENT, transactionReceipt);
        ArrayList<CallFailureEventResponse> responses = new ArrayList<CallFailureEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            CallFailureEventResponse typedResponse = new CallFailureEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse._revertReason = (String) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<CallFailureEventResponse> callFailureEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, CallFailureEventResponse>() {
            @Override
            public CallFailureEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(CALLFAILURE_EVENT, log);
                CallFailureEventResponse typedResponse = new CallFailureEventResponse();
                typedResponse.log = log;
                typedResponse._revertReason = (String) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<CallFailureEventResponse> callFailureEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(CALLFAILURE_EVENT));
        return callFailureEventFlowable(filter);
    }

    public List<CallResultEventResponse> getCallResultEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(CALLRESULT_EVENT, transactionReceipt);
        ArrayList<CallResultEventResponse> responses = new ArrayList<CallResultEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            CallResultEventResponse typedResponse = new CallResultEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse._blockchainId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse._contract = (String) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse._functionCall = (byte[]) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse._result = (byte[]) eventValues.getNonIndexedValues().get(3).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<CallResultEventResponse> callResultEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, CallResultEventResponse>() {
            @Override
            public CallResultEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(CALLRESULT_EVENT, log);
                CallResultEventResponse typedResponse = new CallResultEventResponse();
                typedResponse.log = log;
                typedResponse._blockchainId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse._contract = (String) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse._functionCall = (byte[]) eventValues.getNonIndexedValues().get(2).getValue();
                typedResponse._result = (byte[]) eventValues.getNonIndexedValues().get(3).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<CallResultEventResponse> callResultEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(CALLRESULT_EVENT));
        return callResultEventFlowable(filter);
    }

    public List<DumpEventResponse> getDumpEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(DUMP_EVENT, transactionReceipt);
        ArrayList<DumpEventResponse> responses = new ArrayList<DumpEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            DumpEventResponse typedResponse = new DumpEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse._val1 = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse._val2 = (byte[]) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse._val3 = (String) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse._val4 = (byte[]) eventValues.getNonIndexedValues().get(3).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<DumpEventResponse> dumpEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, DumpEventResponse>() {
            @Override
            public DumpEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(DUMP_EVENT, log);
                DumpEventResponse typedResponse = new DumpEventResponse();
                typedResponse.log = log;
                typedResponse._val1 = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse._val2 = (byte[]) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse._val3 = (String) eventValues.getNonIndexedValues().get(2).getValue();
                typedResponse._val4 = (byte[]) eventValues.getNonIndexedValues().get(3).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<DumpEventResponse> dumpEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(DUMP_EVENT));
        return dumpEventFlowable(filter);
    }

    public List<NotEnoughCallsEventResponse> getNotEnoughCallsEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(NOTENOUGHCALLS_EVENT, transactionReceipt);
        ArrayList<NotEnoughCallsEventResponse> responses = new ArrayList<NotEnoughCallsEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            NotEnoughCallsEventResponse typedResponse = new NotEnoughCallsEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse._expectedNumberOfCalls = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse._actualNumberOfCalls = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<NotEnoughCallsEventResponse> notEnoughCallsEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, NotEnoughCallsEventResponse>() {
            @Override
            public NotEnoughCallsEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(NOTENOUGHCALLS_EVENT, log);
                NotEnoughCallsEventResponse typedResponse = new NotEnoughCallsEventResponse();
                typedResponse.log = log;
                typedResponse._expectedNumberOfCalls = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse._actualNumberOfCalls = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<NotEnoughCallsEventResponse> notEnoughCallsEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(NOTENOUGHCALLS_EVENT));
        return notEnoughCallsEventFlowable(filter);
    }

    public List<RootEventResponse> getRootEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(ROOT_EVENT, transactionReceipt);
        ArrayList<RootEventResponse> responses = new ArrayList<RootEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            RootEventResponse typedResponse = new RootEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse._crossBlockchainTransactionId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse._success = (Boolean) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<RootEventResponse> rootEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, RootEventResponse>() {
            @Override
            public RootEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(ROOT_EVENT, log);
                RootEventResponse typedResponse = new RootEventResponse();
                typedResponse.log = log;
                typedResponse._crossBlockchainTransactionId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse._success = (Boolean) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<RootEventResponse> rootEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(ROOT_EVENT));
        return rootEventFlowable(filter);
    }

    public List<SegmentEventResponse> getSegmentEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(SEGMENT_EVENT, transactionReceipt);
        ArrayList<SegmentEventResponse> responses = new ArrayList<SegmentEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            SegmentEventResponse typedResponse = new SegmentEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse._crossBlockchainTransactionId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse._hashOfCallGraph = (byte[]) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse._callPath = (List<BigInteger>) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse._lockedContracts = (List<String>) eventValues.getNonIndexedValues().get(3).getValue();
            typedResponse._success = (Boolean) eventValues.getNonIndexedValues().get(4).getValue();
            typedResponse._returnValue = (byte[]) eventValues.getNonIndexedValues().get(5).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<SegmentEventResponse> segmentEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, SegmentEventResponse>() {
            @Override
            public SegmentEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(SEGMENT_EVENT, log);
                SegmentEventResponse typedResponse = new SegmentEventResponse();
                typedResponse.log = log;
                typedResponse._crossBlockchainTransactionId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse._hashOfCallGraph = (byte[]) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse._callPath = (List<BigInteger>) eventValues.getNonIndexedValues().get(2).getValue();
                typedResponse._lockedContracts = (List<String>) eventValues.getNonIndexedValues().get(3).getValue();
                typedResponse._success = (Boolean) eventValues.getNonIndexedValues().get(4).getValue();
                typedResponse._returnValue = (byte[]) eventValues.getNonIndexedValues().get(5).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<SegmentEventResponse> segmentEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(SEGMENT_EVENT));
        return segmentEventFlowable(filter);
    }

    public List<SignallingEventResponse> getSignallingEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(SIGNALLING_EVENT, transactionReceipt);
        ArrayList<SignallingEventResponse> responses = new ArrayList<SignallingEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            SignallingEventResponse typedResponse = new SignallingEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse._rootBcId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse._crossBlockchainTransactionId = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<SignallingEventResponse> signallingEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, SignallingEventResponse>() {
            @Override
            public SignallingEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(SIGNALLING_EVENT, log);
                SignallingEventResponse typedResponse = new SignallingEventResponse();
                typedResponse.log = log;
                typedResponse._rootBcId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse._crossBlockchainTransactionId = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<SignallingEventResponse> signallingEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(SIGNALLING_EVENT));
        return signallingEventFlowable(filter);
    }

    public List<StartEventResponse> getStartEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(START_EVENT, transactionReceipt);
        ArrayList<StartEventResponse> responses = new ArrayList<StartEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            StartEventResponse typedResponse = new StartEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse._crossBlockchainTransactionId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse._caller = (String) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse._timeout = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse._callGraph = (byte[]) eventValues.getNonIndexedValues().get(3).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<StartEventResponse> startEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, StartEventResponse>() {
            @Override
            public StartEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(START_EVENT, log);
                StartEventResponse typedResponse = new StartEventResponse();
                typedResponse.log = log;
                typedResponse._crossBlockchainTransactionId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse._caller = (String) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse._timeout = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
                typedResponse._callGraph = (byte[]) eventValues.getNonIndexedValues().get(3).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<StartEventResponse> startEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(START_EVENT));
        return startEventFlowable(filter);
    }

    public RemoteFunctionCall<byte[]> activeCallCrosschainRootTxId() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_ACTIVECALLCROSSCHAINROOTTXID, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        return executeRemoteCallSingleValueReturn(function, byte[].class);
    }

    public RemoteFunctionCall<byte[]> activeCallGraph() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_ACTIVECALLGRAPH, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicBytes>() {}));
        return executeRemoteCallSingleValueReturn(function, byte[].class);
    }

    public RemoteFunctionCall<BigInteger> activeCallRootBlockchainId() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_ACTIVECALLROOTBLOCKCHAINID, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<TransactionReceipt> addToListOfLockedContracts(String _contractToLock) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_ADDTOLISTOFLOCKEDCONTRACTS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, _contractToLock)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> addVerifier(BigInteger _blockchainId, String verifier) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_ADDVERIFIER, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_blockchainId), 
                new org.web3j.abi.datatypes.Address(160, verifier)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> crossBlockchainCall(BigInteger _blockchainId, String _contract, byte[] _functionCallData) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_CROSSBLOCKCHAINCALL, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_blockchainId), 
                new org.web3j.abi.datatypes.Address(160, _contract), 
                new org.web3j.abi.datatypes.DynamicBytes(_functionCallData)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> crossBlockchainCallReturnsUint256(BigInteger _blockchainId, String _contract, byte[] _functionCallData) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_CROSSBLOCKCHAINCALLRETURNSUINT256, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_blockchainId), 
                new org.web3j.abi.datatypes.Address(160, _contract), 
                new org.web3j.abi.datatypes.DynamicBytes(_functionCallData)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<byte[]> getActiveCallCrosschainRootTxId() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETACTIVECALLCROSSCHAINROOTTXID, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        return executeRemoteCallSingleValueReturn(function, byte[].class);
    }

    public RemoteFunctionCall<Boolean> isSingleBlockchainCall() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_ISSINGLEBLOCKCHAINCALL, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<BigInteger> myBlockchainId() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_MYBLOCKCHAINID, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<TransactionReceipt> root(List<BigInteger> _blockchainIds, List<String> _cbcAddresses, List<byte[]> _eventFunctionSignatures, List<byte[]> _eventData, List<byte[]> _signatures) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_ROOT, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.generated.Uint256>(
                        org.web3j.abi.datatypes.generated.Uint256.class,
                        org.web3j.abi.Utils.typeMap(_blockchainIds, org.web3j.abi.datatypes.generated.Uint256.class)), 
                new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.Address>(
                        org.web3j.abi.datatypes.Address.class,
                        org.web3j.abi.Utils.typeMap(_cbcAddresses, org.web3j.abi.datatypes.Address.class)), 
                new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.generated.Bytes32>(
                        org.web3j.abi.datatypes.generated.Bytes32.class,
                        org.web3j.abi.Utils.typeMap(_eventFunctionSignatures, org.web3j.abi.datatypes.generated.Bytes32.class)), 
                new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.DynamicBytes>(
                        org.web3j.abi.datatypes.DynamicBytes.class,
                        org.web3j.abi.Utils.typeMap(_eventData, org.web3j.abi.datatypes.DynamicBytes.class)), 
                new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.DynamicBytes>(
                        org.web3j.abi.datatypes.DynamicBytes.class,
                        org.web3j.abi.Utils.typeMap(_signatures, org.web3j.abi.datatypes.DynamicBytes.class))), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<BigInteger> rootTransactionInformation(BigInteger param0) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_ROOTTRANSACTIONINFORMATION, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<TransactionReceipt> segment(List<BigInteger> _blockchainIds, List<String> _cbcAddresses, List<byte[]> _eventFunctionSignatures, List<byte[]> _eventData, List<byte[]> _signatures, List<BigInteger> _callPath) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SEGMENT, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.generated.Uint256>(
                        org.web3j.abi.datatypes.generated.Uint256.class,
                        org.web3j.abi.Utils.typeMap(_blockchainIds, org.web3j.abi.datatypes.generated.Uint256.class)), 
                new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.Address>(
                        org.web3j.abi.datatypes.Address.class,
                        org.web3j.abi.Utils.typeMap(_cbcAddresses, org.web3j.abi.datatypes.Address.class)), 
                new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.generated.Bytes32>(
                        org.web3j.abi.datatypes.generated.Bytes32.class,
                        org.web3j.abi.Utils.typeMap(_eventFunctionSignatures, org.web3j.abi.datatypes.generated.Bytes32.class)), 
                new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.DynamicBytes>(
                        org.web3j.abi.datatypes.DynamicBytes.class,
                        org.web3j.abi.Utils.typeMap(_eventData, org.web3j.abi.datatypes.DynamicBytes.class)), 
                new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.DynamicBytes>(
                        org.web3j.abi.datatypes.DynamicBytes.class,
                        org.web3j.abi.Utils.typeMap(_signatures, org.web3j.abi.datatypes.DynamicBytes.class)), 
                new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.generated.Uint256>(
                        org.web3j.abi.datatypes.generated.Uint256.class,
                        org.web3j.abi.Utils.typeMap(_callPath, org.web3j.abi.datatypes.generated.Uint256.class))), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Boolean> segmentTransactionExecuted(byte[] param0) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_SEGMENTTRANSACTIONEXECUTED, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<TransactionReceipt> signalling(List<BigInteger> _blockchainIds, List<String> _cbcAddresses, List<byte[]> _eventFunctionSignatures, List<byte[]> _eventData, List<byte[]> _signatures) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SIGNALLING, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.generated.Uint256>(
                        org.web3j.abi.datatypes.generated.Uint256.class,
                        org.web3j.abi.Utils.typeMap(_blockchainIds, org.web3j.abi.datatypes.generated.Uint256.class)), 
                new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.Address>(
                        org.web3j.abi.datatypes.Address.class,
                        org.web3j.abi.Utils.typeMap(_cbcAddresses, org.web3j.abi.datatypes.Address.class)), 
                new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.generated.Bytes32>(
                        org.web3j.abi.datatypes.generated.Bytes32.class,
                        org.web3j.abi.Utils.typeMap(_eventFunctionSignatures, org.web3j.abi.datatypes.generated.Bytes32.class)), 
                new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.DynamicBytes>(
                        org.web3j.abi.datatypes.DynamicBytes.class,
                        org.web3j.abi.Utils.typeMap(_eventData, org.web3j.abi.datatypes.DynamicBytes.class)), 
                new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.DynamicBytes>(
                        org.web3j.abi.datatypes.DynamicBytes.class,
                        org.web3j.abi.Utils.typeMap(_signatures, org.web3j.abi.datatypes.DynamicBytes.class))), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> start(BigInteger _crossBlockchainTransactionId, BigInteger _timeout, byte[] _callGraph) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_START, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_crossBlockchainTransactionId), 
                new org.web3j.abi.datatypes.generated.Uint256(_timeout), 
                new org.web3j.abi.datatypes.DynamicBytes(_callGraph)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Tuple3<BigInteger, BigInteger, String>> whoCalledMe() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_WHOCALLEDME, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Address>() {}));
        return new RemoteFunctionCall<Tuple3<BigInteger, BigInteger, String>>(function,
                new Callable<Tuple3<BigInteger, BigInteger, String>>() {
                    @Override
                    public Tuple3<BigInteger, BigInteger, String> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple3<BigInteger, BigInteger, String>(
                                (BigInteger) results.get(0).getValue(), 
                                (BigInteger) results.get(1).getValue(), 
                                (String) results.get(2).getValue());
                    }
                });
    }

    @Deprecated
    public static CrosschainControl load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new CrosschainControl(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static CrosschainControl load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new CrosschainControl(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static CrosschainControl load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new CrosschainControl(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static CrosschainControl load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new CrosschainControl(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<CrosschainControl> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider, BigInteger _myBlockchainId, String _registrar) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_myBlockchainId), 
                new org.web3j.abi.datatypes.Address(160, _registrar)));
        return deployRemoteCall(CrosschainControl.class, web3j, credentials, contractGasProvider, BINARY, encodedConstructor);
    }

    public static RemoteCall<CrosschainControl> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider, BigInteger _myBlockchainId, String _registrar) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_myBlockchainId), 
                new org.web3j.abi.datatypes.Address(160, _registrar)));
        return deployRemoteCall(CrosschainControl.class, web3j, transactionManager, contractGasProvider, BINARY, encodedConstructor);
    }

    @Deprecated
    public static RemoteCall<CrosschainControl> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit, BigInteger _myBlockchainId, String _registrar) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_myBlockchainId), 
                new org.web3j.abi.datatypes.Address(160, _registrar)));
        return deployRemoteCall(CrosschainControl.class, web3j, credentials, gasPrice, gasLimit, BINARY, encodedConstructor);
    }

    @Deprecated
    public static RemoteCall<CrosschainControl> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit, BigInteger _myBlockchainId, String _registrar) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_myBlockchainId), 
                new org.web3j.abi.datatypes.Address(160, _registrar)));
        return deployRemoteCall(CrosschainControl.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, encodedConstructor);
    }

    public static class BadCallEventResponse extends BaseEventResponse {
        public BigInteger _expectedBlockchainId;

        public BigInteger _actualBlockchainId;

        public String _expectedContract;

        public String _actualContract;

        public byte[] _expectedFunctionCall;

        public byte[] _actualFunctionCall;
    }

    public static class CallFailureEventResponse extends BaseEventResponse {
        public String _revertReason;
    }

    public static class CallResultEventResponse extends BaseEventResponse {
        public BigInteger _blockchainId;

        public String _contract;

        public byte[] _functionCall;

        public byte[] _result;
    }

    public static class DumpEventResponse extends BaseEventResponse {
        public BigInteger _val1;

        public byte[] _val2;

        public String _val3;

        public byte[] _val4;
    }

    public static class NotEnoughCallsEventResponse extends BaseEventResponse {
        public BigInteger _expectedNumberOfCalls;

        public BigInteger _actualNumberOfCalls;
    }

    public static class RootEventResponse extends BaseEventResponse {
        public BigInteger _crossBlockchainTransactionId;

        public Boolean _success;
    }

    public static class SegmentEventResponse extends BaseEventResponse {
        public BigInteger _crossBlockchainTransactionId;

        public byte[] _hashOfCallGraph;

        public List<BigInteger> _callPath;

        public List<String> _lockedContracts;

        public Boolean _success;

        public byte[] _returnValue;
    }

    public static class SignallingEventResponse extends BaseEventResponse {
        public BigInteger _rootBcId;

        public BigInteger _crossBlockchainTransactionId;
    }

    public static class StartEventResponse extends BaseEventResponse {
        public BigInteger _crossBlockchainTransactionId;

        public String _caller;

        public BigInteger _timeout;

        public byte[] _callGraph;
    }
}

plugins {
    id 'java'
}

sourceCompatibility = 1.9

repositories {
    mavenCentral()
}

dependencies {
    implementation project (':common')
    testImplementation project (path: ':common', configuration: 'testArtifacts')

    implementation project (':registrar')
    testImplementation project (':sol-registrar')
    testImplementation project (path: ':sol-registrar', configuration: 'testArtifacts')

    // https://mvnrepository.com/artifact/org.apache.tuweni/tuweni-bytes
    implementation group: 'org.apache.tuweni', name: 'tuweni-bytes', version: '1.0.0'
    // https://mvnrepository.com/artifact/org.apache.tuweni/tuweni-units
    implementation group: 'org.apache.tuweni', name: 'tuweni-units', version: '1.0.0'


    testImplementation group: 'junit', name: 'junit', version: '4.12'

    implementation files('../../../web3j-rlp/abi/build/libs/abi-4.8.5-SNAPSHOT.jar')
    implementation files('../../../web3j-rlp/core/build/libs/core-4.8.5-SNAPSHOT.jar')
    implementation files('../../../web3j-rlp/crypto/build/libs/crypto-4.8.5-SNAPSHOT.jar')
    implementation files('../../../web3j-rlp/rlp/build/libs/rlp-4.8.5-SNAPSHOT.jar')
    implementation files('../../../web3j-rlp/utils/build/libs/utils-4.8.5-SNAPSHOT.jar')

    // https://mvnrepository.com/artifact/com.fasterxml.jackson.core/jackson-databind
    implementation group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: '2.12.5'
// https://mvnrepository.com/artifact/com.fasterxml.jackson.core/jackson-annotations
    //implementation group: 'com.fasterxml.jackson.core', name: 'jackson-annotations', version: '2.12.5'

    testImplementation "io.reactivex.rxjava2:rxjava:2.2.2"

    implementation group: 'com.google.guava', name: 'guava', version: '14.0'
    implementation group: 'org.apache.logging.log4j', name: 'log4j-slf4j-impl', version: '2.12.0'
    implementation group: 'org.apache.logging.log4j', name: 'log4j-api', version: '2.12.0'
    implementation group: 'org.apache.logging.log4j', name: 'log4j-core', version: '2.12.0'

}

task generateSources {
    def script = "messaging/txroot-transfer/gen.sh".execute()
//    script.in.eachLine {line -> println line}
//    script.err.eachLine {line -> println "ERROR: " + line}
    script.waitForProcessOutput(System.out, System.err)
    if (script.exitValue() != 0) {
        throw new GradleException("Solidity compile error")
    }
}

project.afterEvaluate {
    build.dependsOn generateSources
}

test {
    testLogging {
        events "PASSED", "SKIPPED", "FAILED"
    }
}
// SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;

import "./ERC721RemoteBlockchain.sol";

/**
 * This ERC 721 implementation is for the situation when an ERC 721 was issued on another
 * blockchain, and the token has been moved to this blockchain.
 *
 *  - ability for holders to burn (destroy) their tokens
 *  - a miner role can create tokens with specific token ids. This role
 *    should be given to the function call bridge compoenent.
 *  - a pauser role that allows an operator to stop all token transfers
 *
 * This contract uses {AccessControl} to lock permissioned functions using the
 * different roles - head to its documentation for details.
 *
 * The account that deploys the contract will be granted the minter and pauser
 * roles, as well as the default admin role, which will let it grant both minter
 * and pauser roles to other accounts.
 */
contract ERC721AutoURIRemoteBlockchain is ERC721RemoteBlockchain {
    string private _baseTokenURI;

    /**
     * @dev Grants `DEFAULT_ADMIN_ROLE`, `MINTER_ROLE` and `PAUSER_ROLE` to the
     * account that deploys the contract.
     *
     * Token URIs will be autogenerated based on `baseURI` and their token IDs.
     * See {ERC721-tokenURI}.
     */
    constructor(
        string memory name,
        string memory symbol,
        string memory baseTokenURI
    )
        ERC721RemoteBlockchain(
            name,
            symbol,
            _msgSender(),
            _msgSender(),
            _msgSender()
        )
    {
        _baseTokenURI = baseTokenURI;
    }

    function _baseURI() internal view virtual override returns (string memory) {
        return _baseTokenURI;
    }

    /**
     * @dev Creates a new token with the specified token ID. This should be called by the
     * crosschain control contract / function call bridge.
     *
     * @param _recipient    Address to assign the token to.
     * @param _tokenId      Token to create.
     * @param _data         Additional data to forward to the recipient.
     *
     * Requirements:
     * - the caller must have the `MINTER_ROLE`.
     */
    function mint(
        address _recipient,
        uint256 _tokenId,
        bytes memory _data
    ) public virtual override {
        require(
            hasRole(MINTER_ROLE, _msgSender()),
            "ERC721CrosschainEndPoint: must have minter role to mint"
        );

        _safeMint(_recipient, _tokenId, _data);
    }
}

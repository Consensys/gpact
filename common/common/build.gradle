/*
 * Copyright ConsenSys Software Inc
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
 * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
 * specific language governing permissions and limitations under the License.
 *
 * SPDX-License-Identifier: Apache-2.0
 */

dependencies {
    // https://mvnrepository.com/artifact/org.apache.tuweni/tuweni-bytes
    implementation group: 'org.apache.tuweni', name: 'tuweni-bytes', version: '1.0.0'
    // https://mvnrepository.com/artifact/org.apache.tuweni/tuweni-units
    implementation group: 'org.apache.tuweni', name: 'tuweni-units', version: '1.0.0'

    implementation group: 'com.google.guava', name: 'guava', version: guavaVersion

    implementation files('../../../web3j-abi/abi/build/libs/abi-4.8.7-SNAPSHOT.jar')
    implementation files('../../../web3j-abi/core/build/libs/core-4.8.7-SNAPSHOT.jar')
    implementation files('../../../web3j-abi/crypto/build/libs/crypto-4.8.7-SNAPSHOT.jar')
    implementation files('../../../web3j-abi/rlp/build/libs/rlp-4.8.7-SNAPSHOT.jar')
    implementation files('../../../web3j-abi/utils/build/libs/utils-4.8.7-SNAPSHOT.jar')

    implementation "org.bouncycastle:bcprov-jdk15on:1.69"

    testImplementation "com.fasterxml.jackson.core:jackson-databind:${jacksonVersion}"
    testImplementation "io.reactivex.rxjava2:rxjava:${rxJavaVersion}"
}

// Generate a test jar so other modules can use the test code.
configurations {
    testArtifacts.extendsFrom testRuntime
}
task testJar(type: Jar) {
    classifier "test"
    from sourceSets.test.output
}
artifacts {
    testArtifacts testJar
}

// Generate Solidity wrapper code before build.
task generateSources {
    def script = "common/common/gen.sh".execute()
    script.waitForProcessOutput(System.out, System.err)
    if (script.exitValue() != 0) {
        throw new GradleException("Solidity compile error")
    }
}
project.afterEvaluate {
    build.dependsOn generateSources
}
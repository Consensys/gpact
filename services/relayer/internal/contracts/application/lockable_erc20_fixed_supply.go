// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package application

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// LockableERC20FixedSupplyMetaData contains all meta data concerning the LockableERC20FixedSupply contract.
var LockableERC20FixedSupplyMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_cbc\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_initialSupply\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"ApprovalDecrease\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"ApprovalIncrease\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"bridge\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"added\",\"type\":\"bool\"}],\"name\":\"TrustedBridge\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"accountPallelizationFactor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"bridge\",\"type\":\"address\"}],\"name\":\"addTrustedBridge\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowanceMax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowanceMin\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowanceProvisional\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOfMin\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOfProvisional\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burnFromAccount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"burner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burnFromInternal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"erc20PallelizationFactor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_commit\",\"type\":\"bool\"},{\"internalType\":\"bytes32\",\"name\":\"_crossRootTxId\",\"type\":\"bytes32\"}],\"name\":\"finalise\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"increaseAccountParallelizartionFactor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"increaseERC20ParallelizartionFactor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_key\",\"type\":\"uint256\"}],\"name\":\"isLocked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"bridge\",\"type\":\"address\"}],\"name\":\"removeTrustedBridge\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupplyMax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupplyMin\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupplyProvisional\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFromAccount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Bin: "",
}

// LockableERC20FixedSupplyABI is the input ABI used to generate the binding from.
// Deprecated: Use LockableERC20FixedSupplyMetaData.ABI instead.
var LockableERC20FixedSupplyABI = LockableERC20FixedSupplyMetaData.ABI

// LockableERC20FixedSupplyBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use LockableERC20FixedSupplyMetaData.Bin instead.
var LockableERC20FixedSupplyBin = LockableERC20FixedSupplyMetaData.Bin

// DeployLockableERC20FixedSupply deploys a new Ethereum contract, binding an instance of LockableERC20FixedSupply to it.
func DeployLockableERC20FixedSupply(auth *bind.TransactOpts, backend bind.ContractBackend, _name string, _symbol string, _cbc common.Address, _initialSupply *big.Int, _owner common.Address) (common.Address, *types.Transaction, *LockableERC20FixedSupply, error) {
	parsed, err := LockableERC20FixedSupplyMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(LockableERC20FixedSupplyBin), backend, _name, _symbol, _cbc, _initialSupply, _owner)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &LockableERC20FixedSupply{LockableERC20FixedSupplyCaller: LockableERC20FixedSupplyCaller{contract: contract}, LockableERC20FixedSupplyTransactor: LockableERC20FixedSupplyTransactor{contract: contract}, LockableERC20FixedSupplyFilterer: LockableERC20FixedSupplyFilterer{contract: contract}}, nil
}

// LockableERC20FixedSupply is an auto generated Go binding around an Ethereum contract.
type LockableERC20FixedSupply struct {
	LockableERC20FixedSupplyCaller     // Read-only binding to the contract
	LockableERC20FixedSupplyTransactor // Write-only binding to the contract
	LockableERC20FixedSupplyFilterer   // Log filterer for contract events
}

// LockableERC20FixedSupplyCaller is an auto generated read-only Go binding around an Ethereum contract.
type LockableERC20FixedSupplyCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// LockableERC20FixedSupplyTransactor is an auto generated write-only Go binding around an Ethereum contract.
type LockableERC20FixedSupplyTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// LockableERC20FixedSupplyFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type LockableERC20FixedSupplyFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// LockableERC20FixedSupplySession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type LockableERC20FixedSupplySession struct {
	Contract     *LockableERC20FixedSupply // Generic contract binding to set the session for
	CallOpts     bind.CallOpts             // Call options to use throughout this session
	TransactOpts bind.TransactOpts         // Transaction auth options to use throughout this session
}

// LockableERC20FixedSupplyCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type LockableERC20FixedSupplyCallerSession struct {
	Contract *LockableERC20FixedSupplyCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts                   // Call options to use throughout this session
}

// LockableERC20FixedSupplyTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type LockableERC20FixedSupplyTransactorSession struct {
	Contract     *LockableERC20FixedSupplyTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts                   // Transaction auth options to use throughout this session
}

// LockableERC20FixedSupplyRaw is an auto generated low-level Go binding around an Ethereum contract.
type LockableERC20FixedSupplyRaw struct {
	Contract *LockableERC20FixedSupply // Generic contract binding to access the raw methods on
}

// LockableERC20FixedSupplyCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type LockableERC20FixedSupplyCallerRaw struct {
	Contract *LockableERC20FixedSupplyCaller // Generic read-only contract binding to access the raw methods on
}

// LockableERC20FixedSupplyTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type LockableERC20FixedSupplyTransactorRaw struct {
	Contract *LockableERC20FixedSupplyTransactor // Generic write-only contract binding to access the raw methods on
}

// NewLockableERC20FixedSupply creates a new instance of LockableERC20FixedSupply, bound to a specific deployed contract.
func NewLockableERC20FixedSupply(address common.Address, backend bind.ContractBackend) (*LockableERC20FixedSupply, error) {
	contract, err := bindLockableERC20FixedSupply(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &LockableERC20FixedSupply{LockableERC20FixedSupplyCaller: LockableERC20FixedSupplyCaller{contract: contract}, LockableERC20FixedSupplyTransactor: LockableERC20FixedSupplyTransactor{contract: contract}, LockableERC20FixedSupplyFilterer: LockableERC20FixedSupplyFilterer{contract: contract}}, nil
}

// NewLockableERC20FixedSupplyCaller creates a new read-only instance of LockableERC20FixedSupply, bound to a specific deployed contract.
func NewLockableERC20FixedSupplyCaller(address common.Address, caller bind.ContractCaller) (*LockableERC20FixedSupplyCaller, error) {
	contract, err := bindLockableERC20FixedSupply(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &LockableERC20FixedSupplyCaller{contract: contract}, nil
}

// NewLockableERC20FixedSupplyTransactor creates a new write-only instance of LockableERC20FixedSupply, bound to a specific deployed contract.
func NewLockableERC20FixedSupplyTransactor(address common.Address, transactor bind.ContractTransactor) (*LockableERC20FixedSupplyTransactor, error) {
	contract, err := bindLockableERC20FixedSupply(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &LockableERC20FixedSupplyTransactor{contract: contract}, nil
}

// NewLockableERC20FixedSupplyFilterer creates a new log filterer instance of LockableERC20FixedSupply, bound to a specific deployed contract.
func NewLockableERC20FixedSupplyFilterer(address common.Address, filterer bind.ContractFilterer) (*LockableERC20FixedSupplyFilterer, error) {
	contract, err := bindLockableERC20FixedSupply(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &LockableERC20FixedSupplyFilterer{contract: contract}, nil
}

// bindLockableERC20FixedSupply binds a generic wrapper to an already deployed contract.
func bindLockableERC20FixedSupply(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(LockableERC20FixedSupplyABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_LockableERC20FixedSupply *LockableERC20FixedSupplyRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _LockableERC20FixedSupply.Contract.LockableERC20FixedSupplyCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_LockableERC20FixedSupply *LockableERC20FixedSupplyRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _LockableERC20FixedSupply.Contract.LockableERC20FixedSupplyTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_LockableERC20FixedSupply *LockableERC20FixedSupplyRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _LockableERC20FixedSupply.Contract.LockableERC20FixedSupplyTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_LockableERC20FixedSupply *LockableERC20FixedSupplyCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _LockableERC20FixedSupply.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_LockableERC20FixedSupply *LockableERC20FixedSupplyTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _LockableERC20FixedSupply.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_LockableERC20FixedSupply *LockableERC20FixedSupplyTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _LockableERC20FixedSupply.Contract.contract.Transact(opts, method, params...)
}

// AccountPallelizationFactor is a free data retrieval call binding the contract method 0x3aca7144.
//
// Solidity: function accountPallelizationFactor() view returns(uint256)
func (_LockableERC20FixedSupply *LockableERC20FixedSupplyCaller) AccountPallelizationFactor(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _LockableERC20FixedSupply.contract.Call(opts, &out, "accountPallelizationFactor")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// AccountPallelizationFactor is a free data retrieval call binding the contract method 0x3aca7144.
//
// Solidity: function accountPallelizationFactor() view returns(uint256)
func (_LockableERC20FixedSupply *LockableERC20FixedSupplySession) AccountPallelizationFactor() (*big.Int, error) {
	return _LockableERC20FixedSupply.Contract.AccountPallelizationFactor(&_LockableERC20FixedSupply.CallOpts)
}

// AccountPallelizationFactor is a free data retrieval call binding the contract method 0x3aca7144.
//
// Solidity: function accountPallelizationFactor() view returns(uint256)
func (_LockableERC20FixedSupply *LockableERC20FixedSupplyCallerSession) AccountPallelizationFactor() (*big.Int, error) {
	return _LockableERC20FixedSupply.Contract.AccountPallelizationFactor(&_LockableERC20FixedSupply.CallOpts)
}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address owner, address spender) view returns(uint256)
func (_LockableERC20FixedSupply *LockableERC20FixedSupplyCaller) Allowance(opts *bind.CallOpts, owner common.Address, spender common.Address) (*big.Int, error) {
	var out []interface{}
	err := _LockableERC20FixedSupply.contract.Call(opts, &out, "allowance", owner, spender)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address owner, address spender) view returns(uint256)
func (_LockableERC20FixedSupply *LockableERC20FixedSupplySession) Allowance(owner common.Address, spender common.Address) (*big.Int, error) {
	return _LockableERC20FixedSupply.Contract.Allowance(&_LockableERC20FixedSupply.CallOpts, owner, spender)
}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address owner, address spender) view returns(uint256)
func (_LockableERC20FixedSupply *LockableERC20FixedSupplyCallerSession) Allowance(owner common.Address, spender common.Address) (*big.Int, error) {
	return _LockableERC20FixedSupply.Contract.Allowance(&_LockableERC20FixedSupply.CallOpts, owner, spender)
}

// AllowanceMax is a free data retrieval call binding the contract method 0x409b223e.
//
// Solidity: function allowanceMax(address owner, address spender) view returns(uint256)
func (_LockableERC20FixedSupply *LockableERC20FixedSupplyCaller) AllowanceMax(opts *bind.CallOpts, owner common.Address, spender common.Address) (*big.Int, error) {
	var out []interface{}
	err := _LockableERC20FixedSupply.contract.Call(opts, &out, "allowanceMax", owner, spender)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// AllowanceMax is a free data retrieval call binding the contract method 0x409b223e.
//
// Solidity: function allowanceMax(address owner, address spender) view returns(uint256)
func (_LockableERC20FixedSupply *LockableERC20FixedSupplySession) AllowanceMax(owner common.Address, spender common.Address) (*big.Int, error) {
	return _LockableERC20FixedSupply.Contract.AllowanceMax(&_LockableERC20FixedSupply.CallOpts, owner, spender)
}

// AllowanceMax is a free data retrieval call binding the contract method 0x409b223e.
//
// Solidity: function allowanceMax(address owner, address spender) view returns(uint256)
func (_LockableERC20FixedSupply *LockableERC20FixedSupplyCallerSession) AllowanceMax(owner common.Address, spender common.Address) (*big.Int, error) {
	return _LockableERC20FixedSupply.Contract.AllowanceMax(&_LockableERC20FixedSupply.CallOpts, owner, spender)
}

// AllowanceMin is a free data retrieval call binding the contract method 0x691448c2.
//
// Solidity: function allowanceMin(address owner, address spender) view returns(uint256)
func (_LockableERC20FixedSupply *LockableERC20FixedSupplyCaller) AllowanceMin(opts *bind.CallOpts, owner common.Address, spender common.Address) (*big.Int, error) {
	var out []interface{}
	err := _LockableERC20FixedSupply.contract.Call(opts, &out, "allowanceMin", owner, spender)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// AllowanceMin is a free data retrieval call binding the contract method 0x691448c2.
//
// Solidity: function allowanceMin(address owner, address spender) view returns(uint256)
func (_LockableERC20FixedSupply *LockableERC20FixedSupplySession) AllowanceMin(owner common.Address, spender common.Address) (*big.Int, error) {
	return _LockableERC20FixedSupply.Contract.AllowanceMin(&_LockableERC20FixedSupply.CallOpts, owner, spender)
}

// AllowanceMin is a free data retrieval call binding the contract method 0x691448c2.
//
// Solidity: function allowanceMin(address owner, address spender) view returns(uint256)
func (_LockableERC20FixedSupply *LockableERC20FixedSupplyCallerSession) AllowanceMin(owner common.Address, spender common.Address) (*big.Int, error) {
	return _LockableERC20FixedSupply.Contract.AllowanceMin(&_LockableERC20FixedSupply.CallOpts, owner, spender)
}

// AllowanceProvisional is a free data retrieval call binding the contract method 0xfcdb3710.
//
// Solidity: function allowanceProvisional(address owner, address spender) view returns(uint256)
func (_LockableERC20FixedSupply *LockableERC20FixedSupplyCaller) AllowanceProvisional(opts *bind.CallOpts, owner common.Address, spender common.Address) (*big.Int, error) {
	var out []interface{}
	err := _LockableERC20FixedSupply.contract.Call(opts, &out, "allowanceProvisional", owner, spender)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// AllowanceProvisional is a free data retrieval call binding the contract method 0xfcdb3710.
//
// Solidity: function allowanceProvisional(address owner, address spender) view returns(uint256)
func (_LockableERC20FixedSupply *LockableERC20FixedSupplySession) AllowanceProvisional(owner common.Address, spender common.Address) (*big.Int, error) {
	return _LockableERC20FixedSupply.Contract.AllowanceProvisional(&_LockableERC20FixedSupply.CallOpts, owner, spender)
}

// AllowanceProvisional is a free data retrieval call binding the contract method 0xfcdb3710.
//
// Solidity: function allowanceProvisional(address owner, address spender) view returns(uint256)
func (_LockableERC20FixedSupply *LockableERC20FixedSupplyCallerSession) AllowanceProvisional(owner common.Address, spender common.Address) (*big.Int, error) {
	return _LockableERC20FixedSupply.Contract.AllowanceProvisional(&_LockableERC20FixedSupply.CallOpts, owner, spender)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address account) view returns(uint256)
func (_LockableERC20FixedSupply *LockableERC20FixedSupplyCaller) BalanceOf(opts *bind.CallOpts, account common.Address) (*big.Int, error) {
	var out []interface{}
	err := _LockableERC20FixedSupply.contract.Call(opts, &out, "balanceOf", account)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address account) view returns(uint256)
func (_LockableERC20FixedSupply *LockableERC20FixedSupplySession) BalanceOf(account common.Address) (*big.Int, error) {
	return _LockableERC20FixedSupply.Contract.BalanceOf(&_LockableERC20FixedSupply.CallOpts, account)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address account) view returns(uint256)
func (_LockableERC20FixedSupply *LockableERC20FixedSupplyCallerSession) BalanceOf(account common.Address) (*big.Int, error) {
	return _LockableERC20FixedSupply.Contract.BalanceOf(&_LockableERC20FixedSupply.CallOpts, account)
}

// BalanceOfMin is a free data retrieval call binding the contract method 0x40490cc2.
//
// Solidity: function balanceOfMin(address account) view returns(uint256)
func (_LockableERC20FixedSupply *LockableERC20FixedSupplyCaller) BalanceOfMin(opts *bind.CallOpts, account common.Address) (*big.Int, error) {
	var out []interface{}
	err := _LockableERC20FixedSupply.contract.Call(opts, &out, "balanceOfMin", account)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BalanceOfMin is a free data retrieval call binding the contract method 0x40490cc2.
//
// Solidity: function balanceOfMin(address account) view returns(uint256)
func (_LockableERC20FixedSupply *LockableERC20FixedSupplySession) BalanceOfMin(account common.Address) (*big.Int, error) {
	return _LockableERC20FixedSupply.Contract.BalanceOfMin(&_LockableERC20FixedSupply.CallOpts, account)
}

// BalanceOfMin is a free data retrieval call binding the contract method 0x40490cc2.
//
// Solidity: function balanceOfMin(address account) view returns(uint256)
func (_LockableERC20FixedSupply *LockableERC20FixedSupplyCallerSession) BalanceOfMin(account common.Address) (*big.Int, error) {
	return _LockableERC20FixedSupply.Contract.BalanceOfMin(&_LockableERC20FixedSupply.CallOpts, account)
}

// BalanceOfProvisional is a free data retrieval call binding the contract method 0x97879e0f.
//
// Solidity: function balanceOfProvisional(address account) view returns(uint256)
func (_LockableERC20FixedSupply *LockableERC20FixedSupplyCaller) BalanceOfProvisional(opts *bind.CallOpts, account common.Address) (*big.Int, error) {
	var out []interface{}
	err := _LockableERC20FixedSupply.contract.Call(opts, &out, "balanceOfProvisional", account)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BalanceOfProvisional is a free data retrieval call binding the contract method 0x97879e0f.
//
// Solidity: function balanceOfProvisional(address account) view returns(uint256)
func (_LockableERC20FixedSupply *LockableERC20FixedSupplySession) BalanceOfProvisional(account common.Address) (*big.Int, error) {
	return _LockableERC20FixedSupply.Contract.BalanceOfProvisional(&_LockableERC20FixedSupply.CallOpts, account)
}

// BalanceOfProvisional is a free data retrieval call binding the contract method 0x97879e0f.
//
// Solidity: function balanceOfProvisional(address account) view returns(uint256)
func (_LockableERC20FixedSupply *LockableERC20FixedSupplyCallerSession) BalanceOfProvisional(account common.Address) (*big.Int, error) {
	return _LockableERC20FixedSupply.Contract.BalanceOfProvisional(&_LockableERC20FixedSupply.CallOpts, account)
}

// Decimals is a free data retrieval call binding the contract method 0x313ce567.
//
// Solidity: function decimals() view returns(uint8)
func (_LockableERC20FixedSupply *LockableERC20FixedSupplyCaller) Decimals(opts *bind.CallOpts) (uint8, error) {
	var out []interface{}
	err := _LockableERC20FixedSupply.contract.Call(opts, &out, "decimals")

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// Decimals is a free data retrieval call binding the contract method 0x313ce567.
//
// Solidity: function decimals() view returns(uint8)
func (_LockableERC20FixedSupply *LockableERC20FixedSupplySession) Decimals() (uint8, error) {
	return _LockableERC20FixedSupply.Contract.Decimals(&_LockableERC20FixedSupply.CallOpts)
}

// Decimals is a free data retrieval call binding the contract method 0x313ce567.
//
// Solidity: function decimals() view returns(uint8)
func (_LockableERC20FixedSupply *LockableERC20FixedSupplyCallerSession) Decimals() (uint8, error) {
	return _LockableERC20FixedSupply.Contract.Decimals(&_LockableERC20FixedSupply.CallOpts)
}

// Erc20PallelizationFactor is a free data retrieval call binding the contract method 0x7785eebd.
//
// Solidity: function erc20PallelizationFactor() view returns(uint256)
func (_LockableERC20FixedSupply *LockableERC20FixedSupplyCaller) Erc20PallelizationFactor(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _LockableERC20FixedSupply.contract.Call(opts, &out, "erc20PallelizationFactor")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Erc20PallelizationFactor is a free data retrieval call binding the contract method 0x7785eebd.
//
// Solidity: function erc20PallelizationFactor() view returns(uint256)
func (_LockableERC20FixedSupply *LockableERC20FixedSupplySession) Erc20PallelizationFactor() (*big.Int, error) {
	return _LockableERC20FixedSupply.Contract.Erc20PallelizationFactor(&_LockableERC20FixedSupply.CallOpts)
}

// Erc20PallelizationFactor is a free data retrieval call binding the contract method 0x7785eebd.
//
// Solidity: function erc20PallelizationFactor() view returns(uint256)
func (_LockableERC20FixedSupply *LockableERC20FixedSupplyCallerSession) Erc20PallelizationFactor() (*big.Int, error) {
	return _LockableERC20FixedSupply.Contract.Erc20PallelizationFactor(&_LockableERC20FixedSupply.CallOpts)
}

// IsLocked is a free data retrieval call binding the contract method 0xf6aacfb1.
//
// Solidity: function isLocked(uint256 _key) view returns(bool)
func (_LockableERC20FixedSupply *LockableERC20FixedSupplyCaller) IsLocked(opts *bind.CallOpts, _key *big.Int) (bool, error) {
	var out []interface{}
	err := _LockableERC20FixedSupply.contract.Call(opts, &out, "isLocked", _key)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsLocked is a free data retrieval call binding the contract method 0xf6aacfb1.
//
// Solidity: function isLocked(uint256 _key) view returns(bool)
func (_LockableERC20FixedSupply *LockableERC20FixedSupplySession) IsLocked(_key *big.Int) (bool, error) {
	return _LockableERC20FixedSupply.Contract.IsLocked(&_LockableERC20FixedSupply.CallOpts, _key)
}

// IsLocked is a free data retrieval call binding the contract method 0xf6aacfb1.
//
// Solidity: function isLocked(uint256 _key) view returns(bool)
func (_LockableERC20FixedSupply *LockableERC20FixedSupplyCallerSession) IsLocked(_key *big.Int) (bool, error) {
	return _LockableERC20FixedSupply.Contract.IsLocked(&_LockableERC20FixedSupply.CallOpts, _key)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_LockableERC20FixedSupply *LockableERC20FixedSupplyCaller) Name(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _LockableERC20FixedSupply.contract.Call(opts, &out, "name")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_LockableERC20FixedSupply *LockableERC20FixedSupplySession) Name() (string, error) {
	return _LockableERC20FixedSupply.Contract.Name(&_LockableERC20FixedSupply.CallOpts)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_LockableERC20FixedSupply *LockableERC20FixedSupplyCallerSession) Name() (string, error) {
	return _LockableERC20FixedSupply.Contract.Name(&_LockableERC20FixedSupply.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_LockableERC20FixedSupply *LockableERC20FixedSupplyCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _LockableERC20FixedSupply.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_LockableERC20FixedSupply *LockableERC20FixedSupplySession) Owner() (common.Address, error) {
	return _LockableERC20FixedSupply.Contract.Owner(&_LockableERC20FixedSupply.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_LockableERC20FixedSupply *LockableERC20FixedSupplyCallerSession) Owner() (common.Address, error) {
	return _LockableERC20FixedSupply.Contract.Owner(&_LockableERC20FixedSupply.CallOpts)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_LockableERC20FixedSupply *LockableERC20FixedSupplyCaller) Symbol(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _LockableERC20FixedSupply.contract.Call(opts, &out, "symbol")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_LockableERC20FixedSupply *LockableERC20FixedSupplySession) Symbol() (string, error) {
	return _LockableERC20FixedSupply.Contract.Symbol(&_LockableERC20FixedSupply.CallOpts)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_LockableERC20FixedSupply *LockableERC20FixedSupplyCallerSession) Symbol() (string, error) {
	return _LockableERC20FixedSupply.Contract.Symbol(&_LockableERC20FixedSupply.CallOpts)
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_LockableERC20FixedSupply *LockableERC20FixedSupplyCaller) TotalSupply(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _LockableERC20FixedSupply.contract.Call(opts, &out, "totalSupply")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_LockableERC20FixedSupply *LockableERC20FixedSupplySession) TotalSupply() (*big.Int, error) {
	return _LockableERC20FixedSupply.Contract.TotalSupply(&_LockableERC20FixedSupply.CallOpts)
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_LockableERC20FixedSupply *LockableERC20FixedSupplyCallerSession) TotalSupply() (*big.Int, error) {
	return _LockableERC20FixedSupply.Contract.TotalSupply(&_LockableERC20FixedSupply.CallOpts)
}

// TotalSupplyMax is a free data retrieval call binding the contract method 0xf50249fc.
//
// Solidity: function totalSupplyMax() view returns(uint256)
func (_LockableERC20FixedSupply *LockableERC20FixedSupplyCaller) TotalSupplyMax(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _LockableERC20FixedSupply.contract.Call(opts, &out, "totalSupplyMax")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TotalSupplyMax is a free data retrieval call binding the contract method 0xf50249fc.
//
// Solidity: function totalSupplyMax() view returns(uint256)
func (_LockableERC20FixedSupply *LockableERC20FixedSupplySession) TotalSupplyMax() (*big.Int, error) {
	return _LockableERC20FixedSupply.Contract.TotalSupplyMax(&_LockableERC20FixedSupply.CallOpts)
}

// TotalSupplyMax is a free data retrieval call binding the contract method 0xf50249fc.
//
// Solidity: function totalSupplyMax() view returns(uint256)
func (_LockableERC20FixedSupply *LockableERC20FixedSupplyCallerSession) TotalSupplyMax() (*big.Int, error) {
	return _LockableERC20FixedSupply.Contract.TotalSupplyMax(&_LockableERC20FixedSupply.CallOpts)
}

// TotalSupplyMin is a free data retrieval call binding the contract method 0x59ad3fe0.
//
// Solidity: function totalSupplyMin() view returns(uint256)
func (_LockableERC20FixedSupply *LockableERC20FixedSupplyCaller) TotalSupplyMin(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _LockableERC20FixedSupply.contract.Call(opts, &out, "totalSupplyMin")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TotalSupplyMin is a free data retrieval call binding the contract method 0x59ad3fe0.
//
// Solidity: function totalSupplyMin() view returns(uint256)
func (_LockableERC20FixedSupply *LockableERC20FixedSupplySession) TotalSupplyMin() (*big.Int, error) {
	return _LockableERC20FixedSupply.Contract.TotalSupplyMin(&_LockableERC20FixedSupply.CallOpts)
}

// TotalSupplyMin is a free data retrieval call binding the contract method 0x59ad3fe0.
//
// Solidity: function totalSupplyMin() view returns(uint256)
func (_LockableERC20FixedSupply *LockableERC20FixedSupplyCallerSession) TotalSupplyMin() (*big.Int, error) {
	return _LockableERC20FixedSupply.Contract.TotalSupplyMin(&_LockableERC20FixedSupply.CallOpts)
}

// TotalSupplyProvisional is a free data retrieval call binding the contract method 0xbd1b1afd.
//
// Solidity: function totalSupplyProvisional() view returns(uint256)
func (_LockableERC20FixedSupply *LockableERC20FixedSupplyCaller) TotalSupplyProvisional(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _LockableERC20FixedSupply.contract.Call(opts, &out, "totalSupplyProvisional")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TotalSupplyProvisional is a free data retrieval call binding the contract method 0xbd1b1afd.
//
// Solidity: function totalSupplyProvisional() view returns(uint256)
func (_LockableERC20FixedSupply *LockableERC20FixedSupplySession) TotalSupplyProvisional() (*big.Int, error) {
	return _LockableERC20FixedSupply.Contract.TotalSupplyProvisional(&_LockableERC20FixedSupply.CallOpts)
}

// TotalSupplyProvisional is a free data retrieval call binding the contract method 0xbd1b1afd.
//
// Solidity: function totalSupplyProvisional() view returns(uint256)
func (_LockableERC20FixedSupply *LockableERC20FixedSupplyCallerSession) TotalSupplyProvisional() (*big.Int, error) {
	return _LockableERC20FixedSupply.Contract.TotalSupplyProvisional(&_LockableERC20FixedSupply.CallOpts)
}

// AddTrustedBridge is a paid mutator transaction binding the contract method 0xec87cbe6.
//
// Solidity: function addTrustedBridge(address bridge) returns()
func (_LockableERC20FixedSupply *LockableERC20FixedSupplyTransactor) AddTrustedBridge(opts *bind.TransactOpts, bridge common.Address) (*types.Transaction, error) {
	return _LockableERC20FixedSupply.contract.Transact(opts, "addTrustedBridge", bridge)
}

// AddTrustedBridge is a paid mutator transaction binding the contract method 0xec87cbe6.
//
// Solidity: function addTrustedBridge(address bridge) returns()
func (_LockableERC20FixedSupply *LockableERC20FixedSupplySession) AddTrustedBridge(bridge common.Address) (*types.Transaction, error) {
	return _LockableERC20FixedSupply.Contract.AddTrustedBridge(&_LockableERC20FixedSupply.TransactOpts, bridge)
}

// AddTrustedBridge is a paid mutator transaction binding the contract method 0xec87cbe6.
//
// Solidity: function addTrustedBridge(address bridge) returns()
func (_LockableERC20FixedSupply *LockableERC20FixedSupplyTransactorSession) AddTrustedBridge(bridge common.Address) (*types.Transaction, error) {
	return _LockableERC20FixedSupply.Contract.AddTrustedBridge(&_LockableERC20FixedSupply.TransactOpts, bridge)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address spender, uint256 amount) returns(bool)
func (_LockableERC20FixedSupply *LockableERC20FixedSupplyTransactor) Approve(opts *bind.TransactOpts, spender common.Address, amount *big.Int) (*types.Transaction, error) {
	return _LockableERC20FixedSupply.contract.Transact(opts, "approve", spender, amount)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address spender, uint256 amount) returns(bool)
func (_LockableERC20FixedSupply *LockableERC20FixedSupplySession) Approve(spender common.Address, amount *big.Int) (*types.Transaction, error) {
	return _LockableERC20FixedSupply.Contract.Approve(&_LockableERC20FixedSupply.TransactOpts, spender, amount)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address spender, uint256 amount) returns(bool)
func (_LockableERC20FixedSupply *LockableERC20FixedSupplyTransactorSession) Approve(spender common.Address, amount *big.Int) (*types.Transaction, error) {
	return _LockableERC20FixedSupply.Contract.Approve(&_LockableERC20FixedSupply.TransactOpts, spender, amount)
}

// Burn is a paid mutator transaction binding the contract method 0x42966c68.
//
// Solidity: function burn(uint256 amount) returns()
func (_LockableERC20FixedSupply *LockableERC20FixedSupplyTransactor) Burn(opts *bind.TransactOpts, amount *big.Int) (*types.Transaction, error) {
	return _LockableERC20FixedSupply.contract.Transact(opts, "burn", amount)
}

// Burn is a paid mutator transaction binding the contract method 0x42966c68.
//
// Solidity: function burn(uint256 amount) returns()
func (_LockableERC20FixedSupply *LockableERC20FixedSupplySession) Burn(amount *big.Int) (*types.Transaction, error) {
	return _LockableERC20FixedSupply.Contract.Burn(&_LockableERC20FixedSupply.TransactOpts, amount)
}

// Burn is a paid mutator transaction binding the contract method 0x42966c68.
//
// Solidity: function burn(uint256 amount) returns()
func (_LockableERC20FixedSupply *LockableERC20FixedSupplyTransactorSession) Burn(amount *big.Int) (*types.Transaction, error) {
	return _LockableERC20FixedSupply.Contract.Burn(&_LockableERC20FixedSupply.TransactOpts, amount)
}

// BurnFrom is a paid mutator transaction binding the contract method 0x79cc6790.
//
// Solidity: function burnFrom(address account, uint256 amount) returns()
func (_LockableERC20FixedSupply *LockableERC20FixedSupplyTransactor) BurnFrom(opts *bind.TransactOpts, account common.Address, amount *big.Int) (*types.Transaction, error) {
	return _LockableERC20FixedSupply.contract.Transact(opts, "burnFrom", account, amount)
}

// BurnFrom is a paid mutator transaction binding the contract method 0x79cc6790.
//
// Solidity: function burnFrom(address account, uint256 amount) returns()
func (_LockableERC20FixedSupply *LockableERC20FixedSupplySession) BurnFrom(account common.Address, amount *big.Int) (*types.Transaction, error) {
	return _LockableERC20FixedSupply.Contract.BurnFrom(&_LockableERC20FixedSupply.TransactOpts, account, amount)
}

// BurnFrom is a paid mutator transaction binding the contract method 0x79cc6790.
//
// Solidity: function burnFrom(address account, uint256 amount) returns()
func (_LockableERC20FixedSupply *LockableERC20FixedSupplyTransactorSession) BurnFrom(account common.Address, amount *big.Int) (*types.Transaction, error) {
	return _LockableERC20FixedSupply.Contract.BurnFrom(&_LockableERC20FixedSupply.TransactOpts, account, amount)
}

// BurnFromAccount is a paid mutator transaction binding the contract method 0x54e35b6e.
//
// Solidity: function burnFromAccount(address spender, address sender, uint256 amount) returns()
func (_LockableERC20FixedSupply *LockableERC20FixedSupplyTransactor) BurnFromAccount(opts *bind.TransactOpts, spender common.Address, sender common.Address, amount *big.Int) (*types.Transaction, error) {
	return _LockableERC20FixedSupply.contract.Transact(opts, "burnFromAccount", spender, sender, amount)
}

// BurnFromAccount is a paid mutator transaction binding the contract method 0x54e35b6e.
//
// Solidity: function burnFromAccount(address spender, address sender, uint256 amount) returns()
func (_LockableERC20FixedSupply *LockableERC20FixedSupplySession) BurnFromAccount(spender common.Address, sender common.Address, amount *big.Int) (*types.Transaction, error) {
	return _LockableERC20FixedSupply.Contract.BurnFromAccount(&_LockableERC20FixedSupply.TransactOpts, spender, sender, amount)
}

// BurnFromAccount is a paid mutator transaction binding the contract method 0x54e35b6e.
//
// Solidity: function burnFromAccount(address spender, address sender, uint256 amount) returns()
func (_LockableERC20FixedSupply *LockableERC20FixedSupplyTransactorSession) BurnFromAccount(spender common.Address, sender common.Address, amount *big.Int) (*types.Transaction, error) {
	return _LockableERC20FixedSupply.Contract.BurnFromAccount(&_LockableERC20FixedSupply.TransactOpts, spender, sender, amount)
}

// BurnFromInternal is a paid mutator transaction binding the contract method 0x27fcfd7d.
//
// Solidity: function burnFromInternal(address burner, address account, uint256 amount) returns()
func (_LockableERC20FixedSupply *LockableERC20FixedSupplyTransactor) BurnFromInternal(opts *bind.TransactOpts, burner common.Address, account common.Address, amount *big.Int) (*types.Transaction, error) {
	return _LockableERC20FixedSupply.contract.Transact(opts, "burnFromInternal", burner, account, amount)
}

// BurnFromInternal is a paid mutator transaction binding the contract method 0x27fcfd7d.
//
// Solidity: function burnFromInternal(address burner, address account, uint256 amount) returns()
func (_LockableERC20FixedSupply *LockableERC20FixedSupplySession) BurnFromInternal(burner common.Address, account common.Address, amount *big.Int) (*types.Transaction, error) {
	return _LockableERC20FixedSupply.Contract.BurnFromInternal(&_LockableERC20FixedSupply.TransactOpts, burner, account, amount)
}

// BurnFromInternal is a paid mutator transaction binding the contract method 0x27fcfd7d.
//
// Solidity: function burnFromInternal(address burner, address account, uint256 amount) returns()
func (_LockableERC20FixedSupply *LockableERC20FixedSupplyTransactorSession) BurnFromInternal(burner common.Address, account common.Address, amount *big.Int) (*types.Transaction, error) {
	return _LockableERC20FixedSupply.Contract.BurnFromInternal(&_LockableERC20FixedSupply.TransactOpts, burner, account, amount)
}

// DecreaseAllowance is a paid mutator transaction binding the contract method 0xa457c2d7.
//
// Solidity: function decreaseAllowance(address spender, uint256 subtractedValue) returns(bool)
func (_LockableERC20FixedSupply *LockableERC20FixedSupplyTransactor) DecreaseAllowance(opts *bind.TransactOpts, spender common.Address, subtractedValue *big.Int) (*types.Transaction, error) {
	return _LockableERC20FixedSupply.contract.Transact(opts, "decreaseAllowance", spender, subtractedValue)
}

// DecreaseAllowance is a paid mutator transaction binding the contract method 0xa457c2d7.
//
// Solidity: function decreaseAllowance(address spender, uint256 subtractedValue) returns(bool)
func (_LockableERC20FixedSupply *LockableERC20FixedSupplySession) DecreaseAllowance(spender common.Address, subtractedValue *big.Int) (*types.Transaction, error) {
	return _LockableERC20FixedSupply.Contract.DecreaseAllowance(&_LockableERC20FixedSupply.TransactOpts, spender, subtractedValue)
}

// DecreaseAllowance is a paid mutator transaction binding the contract method 0xa457c2d7.
//
// Solidity: function decreaseAllowance(address spender, uint256 subtractedValue) returns(bool)
func (_LockableERC20FixedSupply *LockableERC20FixedSupplyTransactorSession) DecreaseAllowance(spender common.Address, subtractedValue *big.Int) (*types.Transaction, error) {
	return _LockableERC20FixedSupply.Contract.DecreaseAllowance(&_LockableERC20FixedSupply.TransactOpts, spender, subtractedValue)
}

// Finalise is a paid mutator transaction binding the contract method 0x99eb5d4c.
//
// Solidity: function finalise(bool _commit, bytes32 _crossRootTxId) returns()
func (_LockableERC20FixedSupply *LockableERC20FixedSupplyTransactor) Finalise(opts *bind.TransactOpts, _commit bool, _crossRootTxId [32]byte) (*types.Transaction, error) {
	return _LockableERC20FixedSupply.contract.Transact(opts, "finalise", _commit, _crossRootTxId)
}

// Finalise is a paid mutator transaction binding the contract method 0x99eb5d4c.
//
// Solidity: function finalise(bool _commit, bytes32 _crossRootTxId) returns()
func (_LockableERC20FixedSupply *LockableERC20FixedSupplySession) Finalise(_commit bool, _crossRootTxId [32]byte) (*types.Transaction, error) {
	return _LockableERC20FixedSupply.Contract.Finalise(&_LockableERC20FixedSupply.TransactOpts, _commit, _crossRootTxId)
}

// Finalise is a paid mutator transaction binding the contract method 0x99eb5d4c.
//
// Solidity: function finalise(bool _commit, bytes32 _crossRootTxId) returns()
func (_LockableERC20FixedSupply *LockableERC20FixedSupplyTransactorSession) Finalise(_commit bool, _crossRootTxId [32]byte) (*types.Transaction, error) {
	return _LockableERC20FixedSupply.Contract.Finalise(&_LockableERC20FixedSupply.TransactOpts, _commit, _crossRootTxId)
}

// IncreaseAccountParallelizartionFactor is a paid mutator transaction binding the contract method 0x7b0919b2.
//
// Solidity: function increaseAccountParallelizartionFactor(uint256 amount) returns()
func (_LockableERC20FixedSupply *LockableERC20FixedSupplyTransactor) IncreaseAccountParallelizartionFactor(opts *bind.TransactOpts, amount *big.Int) (*types.Transaction, error) {
	return _LockableERC20FixedSupply.contract.Transact(opts, "increaseAccountParallelizartionFactor", amount)
}

// IncreaseAccountParallelizartionFactor is a paid mutator transaction binding the contract method 0x7b0919b2.
//
// Solidity: function increaseAccountParallelizartionFactor(uint256 amount) returns()
func (_LockableERC20FixedSupply *LockableERC20FixedSupplySession) IncreaseAccountParallelizartionFactor(amount *big.Int) (*types.Transaction, error) {
	return _LockableERC20FixedSupply.Contract.IncreaseAccountParallelizartionFactor(&_LockableERC20FixedSupply.TransactOpts, amount)
}

// IncreaseAccountParallelizartionFactor is a paid mutator transaction binding the contract method 0x7b0919b2.
//
// Solidity: function increaseAccountParallelizartionFactor(uint256 amount) returns()
func (_LockableERC20FixedSupply *LockableERC20FixedSupplyTransactorSession) IncreaseAccountParallelizartionFactor(amount *big.Int) (*types.Transaction, error) {
	return _LockableERC20FixedSupply.Contract.IncreaseAccountParallelizartionFactor(&_LockableERC20FixedSupply.TransactOpts, amount)
}

// IncreaseAllowance is a paid mutator transaction binding the contract method 0x39509351.
//
// Solidity: function increaseAllowance(address spender, uint256 addedValue) returns(bool)
func (_LockableERC20FixedSupply *LockableERC20FixedSupplyTransactor) IncreaseAllowance(opts *bind.TransactOpts, spender common.Address, addedValue *big.Int) (*types.Transaction, error) {
	return _LockableERC20FixedSupply.contract.Transact(opts, "increaseAllowance", spender, addedValue)
}

// IncreaseAllowance is a paid mutator transaction binding the contract method 0x39509351.
//
// Solidity: function increaseAllowance(address spender, uint256 addedValue) returns(bool)
func (_LockableERC20FixedSupply *LockableERC20FixedSupplySession) IncreaseAllowance(spender common.Address, addedValue *big.Int) (*types.Transaction, error) {
	return _LockableERC20FixedSupply.Contract.IncreaseAllowance(&_LockableERC20FixedSupply.TransactOpts, spender, addedValue)
}

// IncreaseAllowance is a paid mutator transaction binding the contract method 0x39509351.
//
// Solidity: function increaseAllowance(address spender, uint256 addedValue) returns(bool)
func (_LockableERC20FixedSupply *LockableERC20FixedSupplyTransactorSession) IncreaseAllowance(spender common.Address, addedValue *big.Int) (*types.Transaction, error) {
	return _LockableERC20FixedSupply.Contract.IncreaseAllowance(&_LockableERC20FixedSupply.TransactOpts, spender, addedValue)
}

// IncreaseERC20ParallelizartionFactor is a paid mutator transaction binding the contract method 0x35c01fc3.
//
// Solidity: function increaseERC20ParallelizartionFactor(uint256 amount) returns()
func (_LockableERC20FixedSupply *LockableERC20FixedSupplyTransactor) IncreaseERC20ParallelizartionFactor(opts *bind.TransactOpts, amount *big.Int) (*types.Transaction, error) {
	return _LockableERC20FixedSupply.contract.Transact(opts, "increaseERC20ParallelizartionFactor", amount)
}

// IncreaseERC20ParallelizartionFactor is a paid mutator transaction binding the contract method 0x35c01fc3.
//
// Solidity: function increaseERC20ParallelizartionFactor(uint256 amount) returns()
func (_LockableERC20FixedSupply *LockableERC20FixedSupplySession) IncreaseERC20ParallelizartionFactor(amount *big.Int) (*types.Transaction, error) {
	return _LockableERC20FixedSupply.Contract.IncreaseERC20ParallelizartionFactor(&_LockableERC20FixedSupply.TransactOpts, amount)
}

// IncreaseERC20ParallelizartionFactor is a paid mutator transaction binding the contract method 0x35c01fc3.
//
// Solidity: function increaseERC20ParallelizartionFactor(uint256 amount) returns()
func (_LockableERC20FixedSupply *LockableERC20FixedSupplyTransactorSession) IncreaseERC20ParallelizartionFactor(amount *big.Int) (*types.Transaction, error) {
	return _LockableERC20FixedSupply.Contract.IncreaseERC20ParallelizartionFactor(&_LockableERC20FixedSupply.TransactOpts, amount)
}

// RemoveTrustedBridge is a paid mutator transaction binding the contract method 0x8611374d.
//
// Solidity: function removeTrustedBridge(address bridge) returns()
func (_LockableERC20FixedSupply *LockableERC20FixedSupplyTransactor) RemoveTrustedBridge(opts *bind.TransactOpts, bridge common.Address) (*types.Transaction, error) {
	return _LockableERC20FixedSupply.contract.Transact(opts, "removeTrustedBridge", bridge)
}

// RemoveTrustedBridge is a paid mutator transaction binding the contract method 0x8611374d.
//
// Solidity: function removeTrustedBridge(address bridge) returns()
func (_LockableERC20FixedSupply *LockableERC20FixedSupplySession) RemoveTrustedBridge(bridge common.Address) (*types.Transaction, error) {
	return _LockableERC20FixedSupply.Contract.RemoveTrustedBridge(&_LockableERC20FixedSupply.TransactOpts, bridge)
}

// RemoveTrustedBridge is a paid mutator transaction binding the contract method 0x8611374d.
//
// Solidity: function removeTrustedBridge(address bridge) returns()
func (_LockableERC20FixedSupply *LockableERC20FixedSupplyTransactorSession) RemoveTrustedBridge(bridge common.Address) (*types.Transaction, error) {
	return _LockableERC20FixedSupply.Contract.RemoveTrustedBridge(&_LockableERC20FixedSupply.TransactOpts, bridge)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_LockableERC20FixedSupply *LockableERC20FixedSupplyTransactor) RenounceOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _LockableERC20FixedSupply.contract.Transact(opts, "renounceOwnership")
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_LockableERC20FixedSupply *LockableERC20FixedSupplySession) RenounceOwnership() (*types.Transaction, error) {
	return _LockableERC20FixedSupply.Contract.RenounceOwnership(&_LockableERC20FixedSupply.TransactOpts)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_LockableERC20FixedSupply *LockableERC20FixedSupplyTransactorSession) RenounceOwnership() (*types.Transaction, error) {
	return _LockableERC20FixedSupply.Contract.RenounceOwnership(&_LockableERC20FixedSupply.TransactOpts)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address recipient, uint256 amount) returns(bool)
func (_LockableERC20FixedSupply *LockableERC20FixedSupplyTransactor) Transfer(opts *bind.TransactOpts, recipient common.Address, amount *big.Int) (*types.Transaction, error) {
	return _LockableERC20FixedSupply.contract.Transact(opts, "transfer", recipient, amount)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address recipient, uint256 amount) returns(bool)
func (_LockableERC20FixedSupply *LockableERC20FixedSupplySession) Transfer(recipient common.Address, amount *big.Int) (*types.Transaction, error) {
	return _LockableERC20FixedSupply.Contract.Transfer(&_LockableERC20FixedSupply.TransactOpts, recipient, amount)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address recipient, uint256 amount) returns(bool)
func (_LockableERC20FixedSupply *LockableERC20FixedSupplyTransactorSession) Transfer(recipient common.Address, amount *big.Int) (*types.Transaction, error) {
	return _LockableERC20FixedSupply.Contract.Transfer(&_LockableERC20FixedSupply.TransactOpts, recipient, amount)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address sender, address recipient, uint256 amount) returns(bool)
func (_LockableERC20FixedSupply *LockableERC20FixedSupplyTransactor) TransferFrom(opts *bind.TransactOpts, sender common.Address, recipient common.Address, amount *big.Int) (*types.Transaction, error) {
	return _LockableERC20FixedSupply.contract.Transact(opts, "transferFrom", sender, recipient, amount)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address sender, address recipient, uint256 amount) returns(bool)
func (_LockableERC20FixedSupply *LockableERC20FixedSupplySession) TransferFrom(sender common.Address, recipient common.Address, amount *big.Int) (*types.Transaction, error) {
	return _LockableERC20FixedSupply.Contract.TransferFrom(&_LockableERC20FixedSupply.TransactOpts, sender, recipient, amount)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address sender, address recipient, uint256 amount) returns(bool)
func (_LockableERC20FixedSupply *LockableERC20FixedSupplyTransactorSession) TransferFrom(sender common.Address, recipient common.Address, amount *big.Int) (*types.Transaction, error) {
	return _LockableERC20FixedSupply.Contract.TransferFrom(&_LockableERC20FixedSupply.TransactOpts, sender, recipient, amount)
}

// TransferFromAccount is a paid mutator transaction binding the contract method 0x5e61e1c8.
//
// Solidity: function transferFromAccount(address spender, address sender, address recipient, uint256 amount) returns()
func (_LockableERC20FixedSupply *LockableERC20FixedSupplyTransactor) TransferFromAccount(opts *bind.TransactOpts, spender common.Address, sender common.Address, recipient common.Address, amount *big.Int) (*types.Transaction, error) {
	return _LockableERC20FixedSupply.contract.Transact(opts, "transferFromAccount", spender, sender, recipient, amount)
}

// TransferFromAccount is a paid mutator transaction binding the contract method 0x5e61e1c8.
//
// Solidity: function transferFromAccount(address spender, address sender, address recipient, uint256 amount) returns()
func (_LockableERC20FixedSupply *LockableERC20FixedSupplySession) TransferFromAccount(spender common.Address, sender common.Address, recipient common.Address, amount *big.Int) (*types.Transaction, error) {
	return _LockableERC20FixedSupply.Contract.TransferFromAccount(&_LockableERC20FixedSupply.TransactOpts, spender, sender, recipient, amount)
}

// TransferFromAccount is a paid mutator transaction binding the contract method 0x5e61e1c8.
//
// Solidity: function transferFromAccount(address spender, address sender, address recipient, uint256 amount) returns()
func (_LockableERC20FixedSupply *LockableERC20FixedSupplyTransactorSession) TransferFromAccount(spender common.Address, sender common.Address, recipient common.Address, amount *big.Int) (*types.Transaction, error) {
	return _LockableERC20FixedSupply.Contract.TransferFromAccount(&_LockableERC20FixedSupply.TransactOpts, spender, sender, recipient, amount)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_LockableERC20FixedSupply *LockableERC20FixedSupplyTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _LockableERC20FixedSupply.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_LockableERC20FixedSupply *LockableERC20FixedSupplySession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _LockableERC20FixedSupply.Contract.TransferOwnership(&_LockableERC20FixedSupply.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_LockableERC20FixedSupply *LockableERC20FixedSupplyTransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _LockableERC20FixedSupply.Contract.TransferOwnership(&_LockableERC20FixedSupply.TransactOpts, newOwner)
}

// LockableERC20FixedSupplyApprovalIterator is returned from FilterApproval and is used to iterate over the raw logs and unpacked data for Approval events raised by the LockableERC20FixedSupply contract.
type LockableERC20FixedSupplyApprovalIterator struct {
	Event *LockableERC20FixedSupplyApproval // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *LockableERC20FixedSupplyApprovalIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(LockableERC20FixedSupplyApproval)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(LockableERC20FixedSupplyApproval)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *LockableERC20FixedSupplyApprovalIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *LockableERC20FixedSupplyApprovalIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// LockableERC20FixedSupplyApproval represents a Approval event raised by the LockableERC20FixedSupply contract.
type LockableERC20FixedSupplyApproval struct {
	Owner   common.Address
	Spender common.Address
	Value   *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterApproval is a free log retrieval operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed spender, uint256 value)
func (_LockableERC20FixedSupply *LockableERC20FixedSupplyFilterer) FilterApproval(opts *bind.FilterOpts, owner []common.Address, spender []common.Address) (*LockableERC20FixedSupplyApprovalIterator, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var spenderRule []interface{}
	for _, spenderItem := range spender {
		spenderRule = append(spenderRule, spenderItem)
	}

	logs, sub, err := _LockableERC20FixedSupply.contract.FilterLogs(opts, "Approval", ownerRule, spenderRule)
	if err != nil {
		return nil, err
	}
	return &LockableERC20FixedSupplyApprovalIterator{contract: _LockableERC20FixedSupply.contract, event: "Approval", logs: logs, sub: sub}, nil
}

// WatchApproval is a free log subscription operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed spender, uint256 value)
func (_LockableERC20FixedSupply *LockableERC20FixedSupplyFilterer) WatchApproval(opts *bind.WatchOpts, sink chan<- *LockableERC20FixedSupplyApproval, owner []common.Address, spender []common.Address) (event.Subscription, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var spenderRule []interface{}
	for _, spenderItem := range spender {
		spenderRule = append(spenderRule, spenderItem)
	}

	logs, sub, err := _LockableERC20FixedSupply.contract.WatchLogs(opts, "Approval", ownerRule, spenderRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(LockableERC20FixedSupplyApproval)
				if err := _LockableERC20FixedSupply.contract.UnpackLog(event, "Approval", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseApproval is a log parse operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed spender, uint256 value)
func (_LockableERC20FixedSupply *LockableERC20FixedSupplyFilterer) ParseApproval(log types.Log) (*LockableERC20FixedSupplyApproval, error) {
	event := new(LockableERC20FixedSupplyApproval)
	if err := _LockableERC20FixedSupply.contract.UnpackLog(event, "Approval", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// LockableERC20FixedSupplyApprovalDecreaseIterator is returned from FilterApprovalDecrease and is used to iterate over the raw logs and unpacked data for ApprovalDecrease events raised by the LockableERC20FixedSupply contract.
type LockableERC20FixedSupplyApprovalDecreaseIterator struct {
	Event *LockableERC20FixedSupplyApprovalDecrease // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *LockableERC20FixedSupplyApprovalDecreaseIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(LockableERC20FixedSupplyApprovalDecrease)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(LockableERC20FixedSupplyApprovalDecrease)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *LockableERC20FixedSupplyApprovalDecreaseIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *LockableERC20FixedSupplyApprovalDecreaseIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// LockableERC20FixedSupplyApprovalDecrease represents a ApprovalDecrease event raised by the LockableERC20FixedSupply contract.
type LockableERC20FixedSupplyApprovalDecrease struct {
	Owner   common.Address
	Spender common.Address
	Value   *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterApprovalDecrease is a free log retrieval operation binding the contract event 0xca00ac413b8c2013d4efc4a5ea887318bf432aa5d2a4c8ec87ad5660c28ef5d8.
//
// Solidity: event ApprovalDecrease(address indexed owner, address indexed spender, uint256 value)
func (_LockableERC20FixedSupply *LockableERC20FixedSupplyFilterer) FilterApprovalDecrease(opts *bind.FilterOpts, owner []common.Address, spender []common.Address) (*LockableERC20FixedSupplyApprovalDecreaseIterator, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var spenderRule []interface{}
	for _, spenderItem := range spender {
		spenderRule = append(spenderRule, spenderItem)
	}

	logs, sub, err := _LockableERC20FixedSupply.contract.FilterLogs(opts, "ApprovalDecrease", ownerRule, spenderRule)
	if err != nil {
		return nil, err
	}
	return &LockableERC20FixedSupplyApprovalDecreaseIterator{contract: _LockableERC20FixedSupply.contract, event: "ApprovalDecrease", logs: logs, sub: sub}, nil
}

// WatchApprovalDecrease is a free log subscription operation binding the contract event 0xca00ac413b8c2013d4efc4a5ea887318bf432aa5d2a4c8ec87ad5660c28ef5d8.
//
// Solidity: event ApprovalDecrease(address indexed owner, address indexed spender, uint256 value)
func (_LockableERC20FixedSupply *LockableERC20FixedSupplyFilterer) WatchApprovalDecrease(opts *bind.WatchOpts, sink chan<- *LockableERC20FixedSupplyApprovalDecrease, owner []common.Address, spender []common.Address) (event.Subscription, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var spenderRule []interface{}
	for _, spenderItem := range spender {
		spenderRule = append(spenderRule, spenderItem)
	}

	logs, sub, err := _LockableERC20FixedSupply.contract.WatchLogs(opts, "ApprovalDecrease", ownerRule, spenderRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(LockableERC20FixedSupplyApprovalDecrease)
				if err := _LockableERC20FixedSupply.contract.UnpackLog(event, "ApprovalDecrease", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseApprovalDecrease is a log parse operation binding the contract event 0xca00ac413b8c2013d4efc4a5ea887318bf432aa5d2a4c8ec87ad5660c28ef5d8.
//
// Solidity: event ApprovalDecrease(address indexed owner, address indexed spender, uint256 value)
func (_LockableERC20FixedSupply *LockableERC20FixedSupplyFilterer) ParseApprovalDecrease(log types.Log) (*LockableERC20FixedSupplyApprovalDecrease, error) {
	event := new(LockableERC20FixedSupplyApprovalDecrease)
	if err := _LockableERC20FixedSupply.contract.UnpackLog(event, "ApprovalDecrease", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// LockableERC20FixedSupplyApprovalIncreaseIterator is returned from FilterApprovalIncrease and is used to iterate over the raw logs and unpacked data for ApprovalIncrease events raised by the LockableERC20FixedSupply contract.
type LockableERC20FixedSupplyApprovalIncreaseIterator struct {
	Event *LockableERC20FixedSupplyApprovalIncrease // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *LockableERC20FixedSupplyApprovalIncreaseIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(LockableERC20FixedSupplyApprovalIncrease)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(LockableERC20FixedSupplyApprovalIncrease)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *LockableERC20FixedSupplyApprovalIncreaseIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *LockableERC20FixedSupplyApprovalIncreaseIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// LockableERC20FixedSupplyApprovalIncrease represents a ApprovalIncrease event raised by the LockableERC20FixedSupply contract.
type LockableERC20FixedSupplyApprovalIncrease struct {
	Owner   common.Address
	Spender common.Address
	Value   *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterApprovalIncrease is a free log retrieval operation binding the contract event 0xae0962182a7df59bce5a3518382b8a4a909b354b6ba0f4114215654490399b4b.
//
// Solidity: event ApprovalIncrease(address indexed owner, address indexed spender, uint256 value)
func (_LockableERC20FixedSupply *LockableERC20FixedSupplyFilterer) FilterApprovalIncrease(opts *bind.FilterOpts, owner []common.Address, spender []common.Address) (*LockableERC20FixedSupplyApprovalIncreaseIterator, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var spenderRule []interface{}
	for _, spenderItem := range spender {
		spenderRule = append(spenderRule, spenderItem)
	}

	logs, sub, err := _LockableERC20FixedSupply.contract.FilterLogs(opts, "ApprovalIncrease", ownerRule, spenderRule)
	if err != nil {
		return nil, err
	}
	return &LockableERC20FixedSupplyApprovalIncreaseIterator{contract: _LockableERC20FixedSupply.contract, event: "ApprovalIncrease", logs: logs, sub: sub}, nil
}

// WatchApprovalIncrease is a free log subscription operation binding the contract event 0xae0962182a7df59bce5a3518382b8a4a909b354b6ba0f4114215654490399b4b.
//
// Solidity: event ApprovalIncrease(address indexed owner, address indexed spender, uint256 value)
func (_LockableERC20FixedSupply *LockableERC20FixedSupplyFilterer) WatchApprovalIncrease(opts *bind.WatchOpts, sink chan<- *LockableERC20FixedSupplyApprovalIncrease, owner []common.Address, spender []common.Address) (event.Subscription, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var spenderRule []interface{}
	for _, spenderItem := range spender {
		spenderRule = append(spenderRule, spenderItem)
	}

	logs, sub, err := _LockableERC20FixedSupply.contract.WatchLogs(opts, "ApprovalIncrease", ownerRule, spenderRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(LockableERC20FixedSupplyApprovalIncrease)
				if err := _LockableERC20FixedSupply.contract.UnpackLog(event, "ApprovalIncrease", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseApprovalIncrease is a log parse operation binding the contract event 0xae0962182a7df59bce5a3518382b8a4a909b354b6ba0f4114215654490399b4b.
//
// Solidity: event ApprovalIncrease(address indexed owner, address indexed spender, uint256 value)
func (_LockableERC20FixedSupply *LockableERC20FixedSupplyFilterer) ParseApprovalIncrease(log types.Log) (*LockableERC20FixedSupplyApprovalIncrease, error) {
	event := new(LockableERC20FixedSupplyApprovalIncrease)
	if err := _LockableERC20FixedSupply.contract.UnpackLog(event, "ApprovalIncrease", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// LockableERC20FixedSupplyOwnershipTransferredIterator is returned from FilterOwnershipTransferred and is used to iterate over the raw logs and unpacked data for OwnershipTransferred events raised by the LockableERC20FixedSupply contract.
type LockableERC20FixedSupplyOwnershipTransferredIterator struct {
	Event *LockableERC20FixedSupplyOwnershipTransferred // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *LockableERC20FixedSupplyOwnershipTransferredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(LockableERC20FixedSupplyOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(LockableERC20FixedSupplyOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *LockableERC20FixedSupplyOwnershipTransferredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *LockableERC20FixedSupplyOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// LockableERC20FixedSupplyOwnershipTransferred represents a OwnershipTransferred event raised by the LockableERC20FixedSupply contract.
type LockableERC20FixedSupplyOwnershipTransferred struct {
	PreviousOwner common.Address
	NewOwner      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterOwnershipTransferred is a free log retrieval operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_LockableERC20FixedSupply *LockableERC20FixedSupplyFilterer) FilterOwnershipTransferred(opts *bind.FilterOpts, previousOwner []common.Address, newOwner []common.Address) (*LockableERC20FixedSupplyOwnershipTransferredIterator, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _LockableERC20FixedSupply.contract.FilterLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return &LockableERC20FixedSupplyOwnershipTransferredIterator{contract: _LockableERC20FixedSupply.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

// WatchOwnershipTransferred is a free log subscription operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_LockableERC20FixedSupply *LockableERC20FixedSupplyFilterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *LockableERC20FixedSupplyOwnershipTransferred, previousOwner []common.Address, newOwner []common.Address) (event.Subscription, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _LockableERC20FixedSupply.contract.WatchLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(LockableERC20FixedSupplyOwnershipTransferred)
				if err := _LockableERC20FixedSupply.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOwnershipTransferred is a log parse operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_LockableERC20FixedSupply *LockableERC20FixedSupplyFilterer) ParseOwnershipTransferred(log types.Log) (*LockableERC20FixedSupplyOwnershipTransferred, error) {
	event := new(LockableERC20FixedSupplyOwnershipTransferred)
	if err := _LockableERC20FixedSupply.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// LockableERC20FixedSupplyTransferIterator is returned from FilterTransfer and is used to iterate over the raw logs and unpacked data for Transfer events raised by the LockableERC20FixedSupply contract.
type LockableERC20FixedSupplyTransferIterator struct {
	Event *LockableERC20FixedSupplyTransfer // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *LockableERC20FixedSupplyTransferIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(LockableERC20FixedSupplyTransfer)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(LockableERC20FixedSupplyTransfer)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *LockableERC20FixedSupplyTransferIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *LockableERC20FixedSupplyTransferIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// LockableERC20FixedSupplyTransfer represents a Transfer event raised by the LockableERC20FixedSupply contract.
type LockableERC20FixedSupplyTransfer struct {
	From  common.Address
	To    common.Address
	Value *big.Int
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterTransfer is a free log retrieval operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 value)
func (_LockableERC20FixedSupply *LockableERC20FixedSupplyFilterer) FilterTransfer(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*LockableERC20FixedSupplyTransferIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _LockableERC20FixedSupply.contract.FilterLogs(opts, "Transfer", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return &LockableERC20FixedSupplyTransferIterator{contract: _LockableERC20FixedSupply.contract, event: "Transfer", logs: logs, sub: sub}, nil
}

// WatchTransfer is a free log subscription operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 value)
func (_LockableERC20FixedSupply *LockableERC20FixedSupplyFilterer) WatchTransfer(opts *bind.WatchOpts, sink chan<- *LockableERC20FixedSupplyTransfer, from []common.Address, to []common.Address) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _LockableERC20FixedSupply.contract.WatchLogs(opts, "Transfer", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(LockableERC20FixedSupplyTransfer)
				if err := _LockableERC20FixedSupply.contract.UnpackLog(event, "Transfer", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTransfer is a log parse operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 value)
func (_LockableERC20FixedSupply *LockableERC20FixedSupplyFilterer) ParseTransfer(log types.Log) (*LockableERC20FixedSupplyTransfer, error) {
	event := new(LockableERC20FixedSupplyTransfer)
	if err := _LockableERC20FixedSupply.contract.UnpackLog(event, "Transfer", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// LockableERC20FixedSupplyTrustedBridgeIterator is returned from FilterTrustedBridge and is used to iterate over the raw logs and unpacked data for TrustedBridge events raised by the LockableERC20FixedSupply contract.
type LockableERC20FixedSupplyTrustedBridgeIterator struct {
	Event *LockableERC20FixedSupplyTrustedBridge // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *LockableERC20FixedSupplyTrustedBridgeIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(LockableERC20FixedSupplyTrustedBridge)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(LockableERC20FixedSupplyTrustedBridge)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *LockableERC20FixedSupplyTrustedBridgeIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *LockableERC20FixedSupplyTrustedBridgeIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// LockableERC20FixedSupplyTrustedBridge represents a TrustedBridge event raised by the LockableERC20FixedSupply contract.
type LockableERC20FixedSupplyTrustedBridge struct {
	Bridge common.Address
	Added  bool
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterTrustedBridge is a free log retrieval operation binding the contract event 0x10d70f087901adb6fc0aabc376e83a9c7737d75494457c1b7235015c5586111a.
//
// Solidity: event TrustedBridge(address bridge, bool added)
func (_LockableERC20FixedSupply *LockableERC20FixedSupplyFilterer) FilterTrustedBridge(opts *bind.FilterOpts) (*LockableERC20FixedSupplyTrustedBridgeIterator, error) {

	logs, sub, err := _LockableERC20FixedSupply.contract.FilterLogs(opts, "TrustedBridge")
	if err != nil {
		return nil, err
	}
	return &LockableERC20FixedSupplyTrustedBridgeIterator{contract: _LockableERC20FixedSupply.contract, event: "TrustedBridge", logs: logs, sub: sub}, nil
}

// WatchTrustedBridge is a free log subscription operation binding the contract event 0x10d70f087901adb6fc0aabc376e83a9c7737d75494457c1b7235015c5586111a.
//
// Solidity: event TrustedBridge(address bridge, bool added)
func (_LockableERC20FixedSupply *LockableERC20FixedSupplyFilterer) WatchTrustedBridge(opts *bind.WatchOpts, sink chan<- *LockableERC20FixedSupplyTrustedBridge) (event.Subscription, error) {

	logs, sub, err := _LockableERC20FixedSupply.contract.WatchLogs(opts, "TrustedBridge")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(LockableERC20FixedSupplyTrustedBridge)
				if err := _LockableERC20FixedSupply.contract.UnpackLog(event, "TrustedBridge", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTrustedBridge is a log parse operation binding the contract event 0x10d70f087901adb6fc0aabc376e83a9c7737d75494457c1b7235015c5586111a.
//
// Solidity: event TrustedBridge(address bridge, bool added)
func (_LockableERC20FixedSupply *LockableERC20FixedSupplyFilterer) ParseTrustedBridge(log types.Log) (*LockableERC20FixedSupplyTrustedBridge, error) {
	event := new(LockableERC20FixedSupplyTrustedBridge)
	if err := _LockableERC20FixedSupply.contract.UnpackLog(event, "TrustedBridge", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

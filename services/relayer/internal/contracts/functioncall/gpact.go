// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package functioncall

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// GpactMetaData contains all meta data concerning the Gpact contract.
var GpactMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_myBlockchainId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_expectedBlockchainId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_actualBlockchainId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_expectedContract\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_actualContract\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"_expectedFunctionCall\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"_actualFunctionCall\",\"type\":\"bytes\"}],\"name\":\"BadCall\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_revertReason\",\"type\":\"string\"}],\"name\":\"CallFailure\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_blockchainId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_contract\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"_functionCall\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"_result\",\"type\":\"bytes\"}],\"name\":\"CallResult\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_val1\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"_val2\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_val3\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"_val4\",\"type\":\"bytes\"}],\"name\":\"Dump\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_expectedNumberOfCalls\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_actualNumberOfCalls\",\"type\":\"uint256\"}],\"name\":\"NotEnoughCalls\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_crossBlockchainTransactionId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_success\",\"type\":\"bool\"}],\"name\":\"Root\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_crossBlockchainTransactionId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"_hashOfCallGraph\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"_callPath\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"_lockedContracts\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_success\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"_returnValue\",\"type\":\"bytes\"}],\"name\":\"Segment\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_rootBcId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_crossBlockchainTransactionId\",\"type\":\"uint256\"}],\"name\":\"Signalling\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_crossBlockchainTransactionId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_caller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_timeout\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"_callGraph\",\"type\":\"bytes\"}],\"name\":\"Start\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"activeCallCrosschainRootTxId\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_blockchainId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_cbc\",\"type\":\"address\"}],\"name\":\"addRemoteCrosschainControl\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_contractToLock\",\"type\":\"address\"}],\"name\":\"addToListOfLockedContracts\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_blockchainId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_verifier\",\"type\":\"address\"}],\"name\":\"addVerifier\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_blockchainId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_contract\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_functionCallData\",\"type\":\"bytes\"}],\"name\":\"crossBlockchainCall\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_blockchainId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_contract\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_functionCallData\",\"type\":\"bytes\"}],\"name\":\"crossBlockchainCallReturnsUint256\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getActiveCallCrosschainRootTxId\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isSingleBlockchainCall\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"myBlockchainId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_blockchainIds\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"_cbcAddresses\",\"type\":\"address[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"_eventFunctionSignatures\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes[]\",\"name\":\"_eventData\",\"type\":\"bytes[]\"},{\"internalType\":\"bytes[]\",\"name\":\"_signatures\",\"type\":\"bytes[]\"}],\"name\":\"root\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"rootTransactionInformation\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_blockchainIds\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"_cbcAddresses\",\"type\":\"address[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"_eventFunctionSignatures\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes[]\",\"name\":\"_eventData\",\"type\":\"bytes[]\"},{\"internalType\":\"bytes[]\",\"name\":\"_signatures\",\"type\":\"bytes[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_callPath\",\"type\":\"uint256[]\"}],\"name\":\"segment\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"segmentTransactionExecuted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_blockchainIds\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"_cbcAddresses\",\"type\":\"address[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"_eventFunctionSignatures\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes[]\",\"name\":\"_eventData\",\"type\":\"bytes[]\"},{\"internalType\":\"bytes[]\",\"name\":\"_signatures\",\"type\":\"bytes[]\"}],\"name\":\"signalling\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_crossBlockchainTransactionId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_timeout\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_callGraph\",\"type\":\"bytes\"}],\"name\":\"start\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Bin: "0x60806040523480156200001157600080fd5b5060405162003df238038062003df283398101604081905262000034916200007e565b600080546001600160a01b031916339081178255604051909182917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a35060035562000098565b6000602082840312156200009157600080fd5b5051919050565b613d4a80620000a86000396000f3fe608060405234801561001057600080fd5b50600436106101165760003560e01c806392b2c335116100a2578063df1bba0111610071578063df1bba011461021b578063f0f67af21461022e578063f2fde38b14610241578063f830b7b414610254578063fb11639e1461027457600080fd5b806392b2c335146101d95780639efabd34146101ec578063b2832096146101ff578063b4c3b7561461021257600080fd5b8063715018a6116100e9578063715018a6146101685780637bf37a0914610170578063877ba01d146101785780638da5cb5b146101ab5780638e22d534146101c657600080fd5b806319836dc71461011b5780633193c08b1461013057806339ce107e1461014c578063439160df1461015f575b600080fd5b61012e610129366004612eb2565b610287565b005b61013960065481565b6040519081526020015b60405180910390f35b61012e61015a366004612ee2565b6102e8565b61013960035481565b61012e610396565b600654610139565b61019b610186366004612eff565b60056020526000908152604090205460ff1681565b6040519015158152602001610143565b6000546040516001600160a01b039091168152602001610143565b6101396101d4366004612f60565b61040a565b61012e6101e7366004612f60565b610449565b61012e6101fa366004612fff565b610519565b61012e61020d366004612eb2565b61072d565b6006541561019b565b61012e6102293660046130ef565b610820565b61012e61023c366004612fff565b610932565b61012e61024f366004612ee2565b610e24565b610139610262366004612eff565b60046020526000908152604090205481565b61012e610282366004613129565b610f0e565b6000546001600160a01b031633146102ba5760405162461bcd60e51b81526004016102b190613266565b60405180910390fd5b60009182526002602052604090912080546001600160a01b0319166001600160a01b03909216919091179055565b60005b600c5481101561034357816001600160a01b0316600c82815481106103125761031261329b565b6000918252602090912001546001600160a01b03161415610331575050565b8061033b816132c7565b9150506102eb565b50600c80546001810182556000919091527fdf6966c971051c3d54ec59162606531493a51404a002842f56009d7e5cf4a8c70180546001600160a01b0319166001600160a01b0392909216919091179055565b6000546001600160a01b031633146103c05760405162461bcd60e51b81526004016102b190613266565b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319169055565b600080606061041b8787878761128f565b9092509050811561043157600092505050610441565b61043c8160006115c2565b925050505b949350505050565b600060606104598686868661128f565b9092509050816105115761047c816040518060200160405280600081525061162e565b610511577f38e7ccc4b02b2da681f96e62aef89b5c6d4115f501f8d42430bb2f5f2fa981a66040516104fb9060208082526033908201527f43726f737320426c6f636b636861696e2043616c6c207769746820756e65787060408201527265637465642072657475726e2076616c75657360681b606082015260800190565b60405180910390a1600d805460ff191660011790555b505050505050565b61052d8a8a8a8a8a8a8a8a8a8a6000611659565b600080858560008181106105435761054361329b565b905060200281019061055591906132e2565b8101906105629190613346565b909250905060006105b08d8d838161057c5761057c61329b565b9050602002013584604080516020808201949094528082019290925280518083038201815260609092019052805191012090565b905060015b868110156106c257600060608989848181106105d3576105d361329b565b90506020028101906105e591906132e2565b8101906105f291906134c0565b5093955093505050868314905061060857600080fd5b60005b81518110156106ac5760008282815181106106285761062861329b565b602090810291909101015160405163267ad75360e21b81528815156004820152602481018890529091506001600160a01b038216906399eb5d4c90604401600060405180830381600087803b15801561068057600080fd5b505af1158015610694573d6000803e3d6000fd5b505050505080806106a4906132c7565b91505061060b565b50505080806106ba906132c7565b9150506105b5565b507f8426029537c24c21c8056ae94a666a5e448f1080699c70b9bf691cfeb9d5feec8d8d60008181106106f7576106f761329b565b9050602002013584604051610716929190918252602082015260400190565b60405180910390a150505050505050505050505050565b6000546001600160a01b031633146107575760405162461bcd60e51b81526004016102b190613266565b8161079c5760405162461bcd60e51b8152602060048201526015602482015274125b9d985b1a5908189b1bd8dad8da185a5b881a59605a1b60448201526064016102b1565b6001600160a01b0381166107f25760405162461bcd60e51b815260206004820152601860248201527f496e76616c69642076657269666965722061646472657373000000000000000060448201526064016102b1565b60009182526001602052604090912080546001600160a01b0319166001600160a01b03909216919091179055565b32331461086f5760405162461bcd60e51b815260206004820181905260248201527f5374617274206d7573742062652063616c6c65642066726f6d20616e20454f4160448201526064016102b1565b600084815260046020526040902054156108cb5760405162461bcd60e51b815260206004820152601e60248201527f5472616e73616374696f6e20616c72656164792072656769737465726564000060448201526064016102b1565b60006108d742856135c1565b60008681526004602052604090819020829055519091507f77dab611ad9a24b763e2742f57749a0227393e0da76212d74fceb326b0661424906109239087903390859088908890613602565b60405180910390a15050505050565b6109468a8a8a8a8a8a8a8a8a8a6001611659565b60008a8a600081811061095b5761095b61329b565b60200291909101359150503233146109c65760405162461bcd60e51b815260206004820152602860248201527f5472616e73616374696f6e206d75737420626520696e737469676174656420626044820152677920616e20454f4160c01b60648201526084016102b1565b8060035414610a175760405162461bcd60e51b815260206004820152601f60248201527f54686973206973206e6f742074686520726f6f7420626c6f636b636861696e0060448201526064016102b1565b88886000818110610a2a57610a2a61329b565b9050602002016020810190610a3f9190612ee2565b6001600160a01b0316306001600160a01b031614610ab55760405162461bcd60e51b815260206004820152602d60248201527f526f6f7420626c6f636b636861696e2043424320636f6e74726163742077617360448201526c206e6f742074686973206f6e6560981b60648201526084016102b1565b6000806000606088886000818110610acf57610acf61329b565b9050602002810190610ae191906132e2565b810190610aee919061363b565b6000848152600460205260409020549397509195509350915080610b465760405162461bcd60e51b815260206004820152600f60248201526e43616c6c206e6f742061637469766560881b60448201526064016102b1565b6001811415610b8e5760405162461bcd60e51b815260206004820152601460248201527343616c6c20656e6465642028737563636573732960601b60448201526064016102b1565b6002811415610bd65760405162461bcd60e51b815260206004820152601460248201527343616c6c20656e64656420286661696c7572652960601b60448201526064016102b1565b80421115610bfa57610be785611a9d565b610bef611aec565b505050505050610e18565b6001600160a01b0384163214610c525760405162461bcd60e51b815260206004820152601e60248201527f454f4120646f6573206e6f74206d61746368207374617274206576656e74000060448201526064016102b1565b81516020830120604080516001808252818301909252600091816020016020820280368337019050509050610c92610c8a8c8e61369d565b82848a611b4d565b15610ca4575050505050505050610e18565b610cb98482610cb460018f613710565b611f93565b6040805160208082018b90528183018a90528251808303840181526060909201909252805191012060068190556000610cf386848c612154565b50905060005b600c54811015610d9e576000600c8281548110610d1857610d1861329b565b60009182526020909120015460405163267ad75360e21b81528415156004820152602481018690526001600160a01b03909116915081906399eb5d4c90604401600060405180830381600087803b158015610d7257600080fd5b505af1158015610d86573d6000803e3d6000fd5b50505050508080610d96906132c7565b915050610cf9565b5080610dab576002610dae565b60015b60008a8152600460205260409081902091909155517fe6763dd99bf894d72f3499dd572aa42876eae7ae028c32fff21654e1bbc4c80790610dfd908b9084909182521515602082015260400190565b60405180910390a1610e0d611aec565b505050505050505050505b50505050505050505050565b6000546001600160a01b03163314610e4e5760405162461bcd60e51b81526004016102b190613266565b6001600160a01b038116610eb35760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016102b1565b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b610f228c8c8c8c8c8c8c8c8c8c6001611659565b60008c8c6000818110610f3757610f3761329b565b6020029190910135915050323314610f9c5760405162461bcd60e51b815260206004820152602260248201527f5365676d656e74206d7573742062652063616c6c65642066726f6d20616e20456044820152614f4160f01b60648201526084016102b1565b600080606089896000818110610fb457610fb461329b565b9050602002810190610fc691906132e2565b810190610fd3919061363b565b929550909350909150506001600160a01b03821632146110355760405162461bcd60e51b815260206004820152601e60248201527f454f4120646f6573206e6f74206d61746368207374617274206576656e74000060448201526064016102b1565b60008484888860405160200161104e9493929190613727565b60408051601f1981840301815291815281516020928301206000818152600590935291205490915060ff16156110d25760405162461bcd60e51b8152602060048201526024808201527f5365676d656e74207472616e73616374696f6e20616c726561647920657865636044820152631d5d195960e21b60648201526084016102b1565b6000908152600560209081526040909120805460ff19166001908117909155825191830191909120908a11156111a05761114c61110f8b8d61369d565b888880806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250869250899150611b4d9050565b1561115b575050505050611281565b6111a082888880806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250610cb49250600191508f9050613710565b6040805160208082018890528183018790528251808303840181526060909201909252805191012060068190555060006060611211848a8a808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152508c9250612154915050565b60405191935091507fb01557f1f634b7c5072ab5e36d07a2355ef819faca5a3d321430d71987155b8f9061125390889086908d908d90600c90899089906137c1565b60405180910390a160018c11156112715761126c612363565b611279565b6112796123c3565b505050505050505b505050505050505050505050565b600b54600a5460009160609181106112ca575050600d805460ff191660019081179091556040805160208101909152600081529091506115b9565b6000600782815481106112df576112df61329b565b906000526020600020015490506000600883815481106113015761130161329b565b6000918252602082200154600980546001600160a01b039092169350908590811061132e5761132e61329b565b90600052602060002001805461134390613875565b80601f016020809104026020016040519081016040528092919081815260200182805461136f90613875565b80156113bc5780601f10611391576101008083540402835291602001916113bc565b820191906000526020600020905b81548152906001019060200180831161139f57829003601f168201915b50505050509050828a1415806113e45750816001600160a01b0316896001600160a01b031614155b8061142d575061142b88888080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525085925061162e915050565b155b156114b357600d805460ff1916600190811790915561144d9085906135c1565b600b556040517f8b5fc485a070cefca43e0a1d8cc72cf38dc31d5bf14f58cedcc59c73cac84e159061148c9085908d9086908e9087908f908f906138b0565b60405180910390a160016040518060200160405280600081525095509550505050506115b9565b6000600a856114c1816132c7565b9650815481106114d3576114d361329b565b9060005260206000200180546114e890613875565b80601f016020809104026020016040519081016040528092919081815260200182805461151490613875565b80156115615780601f1061153657610100808354040283529160200191611561565b820191906000526020600020905b81548152906001019060200180831161154457829003601f168201915b5050505050905084600b819055507f971a379ee339d51e370a4733845f31c68e234014c8494ecedb867ae2cdc1ef688b8b8b8b856040516115a695949392919061390a565b60405180910390a1600096509450505050505b94509492505050565b60006115cf8260206135c1565b8351101561161f5760405162461bcd60e51b815260206004820152601e60248201527f736c6963696e67206f7574206f662072616e6765202875696e7432353629000060448201526064016102b1565b50818101602001515b92915050565b6000815183511461164157506000611628565b81805190602001208380519060200120149050611628565b89806116a75760405162461bcd60e51b815260206004820152601a60248201527f4d757374206265206174206c65617374206f6e65206576656e7400000000000060448201526064016102b1565b8089146117135760405162461bcd60e51b815260206004820152603460248201527f4e756d626572206f6620626c6f636b636861696e2049647320616e6420636263604482015273082c8c8e4cae6e6cae640daeae6e840dac2e8c6d60631b60648201526084016102b1565b8087146117925760405162461bcd60e51b815260206004820152604160248201527f4e756d626572206f6620626c6f636b636861696e2049647320616e642065766560448201527f6e742066756e6374696f6e207369676e617475726573206d757374206d6174636064820152600d60fb1b608482015260a4016102b1565b8085146117fc5760405162461bcd60e51b815260206004820152603260248201527f4e756d626572206f6620626c6f636b636861696e2049647320616e64206576656044820152710dce840c8c2e8c240daeae6e840dac2e8c6d60731b60648201526084016102b1565b8083146118595760405162461bcd60e51b815260206004820152602560248201527f4e756d626572206f66206576656e747320616e64207369676e617475726573206044820152640dac2e8c6d60db1b60648201526084016102b1565b60005b81811015611a8e578061193957600083611896577fe6763dd99bf894d72f3499dd572aa42876eae7ae028c32fff21654e1bbc4c8076118b8565b7f77dab611ad9a24b763e2742f57749a0227393e0da76212d74fceb326b06614245b90508989838181106118cc576118cc61329b565b9050602002013581146119335760405162461bcd60e51b815260206004820152602960248201527f556e6578706563746564206669727374206576656e742066756e6374696f6e206044820152687369676e617475726560b81b60648201526084016102b1565b506119d3565b88888281811061194b5761194b61329b565b905060200201357fb01557f1f634b7c5072ab5e36d07a2355ef819faca5a3d321430d71987155b8f146119d35760405162461bcd60e51b815260206004820152602a60248201527f4576656e742066756e6374696f6e207369676e6174757265206e6f7420666f726044820152690818481cd959db595b9d60b21b60648201526084016102b1565b611a7c8d8d838181106119e8576119e861329b565b905060200201358c8c84818110611a0157611a0161329b565b9050602002016020810190611a169190612ee2565b8b8b85818110611a2857611a2861329b565b905060200201358a8a86818110611a4157611a4161329b565b9050602002810190611a5391906132e2565b8a8a88818110611a6557611a6561329b565b9050602002810190611a7791906132e2565b6123ec565b80611a86816132c7565b91505061185c565b50505050505050505050505050565b6000818152600460209081526040808320600290558051848152918201929092527fe6763dd99bf894d72f3499dd572aa42876eae7ae028c32fff21654e1bbc4c807910160405180910390a150565b611af860076000612d6e565b611b0460086000612d6e565b611b1060096000612d8f565b611b1c600a6000612d8f565b6000600b55600d5460ff1615611b3757600d805460ff191690555b600660009055600c6000611b4b9190612d6e565b565b60008360018551611b5e9190613710565b81518110611b6e57611b6e61329b565b6020026020010151600014611bb65760405162461bcd60e51b815260206004820152600e60248201526d24b73b30b634b21031b0b63632b960911b60448201526064016102b1565b60015b8551811015611f8757600080606080600060608b8781518110611bde57611bde61329b565b6020026020010151806020019051810190611bf99190613a12565b949a50929850909650945092509050888614611c715760405162461bcd60e51b815260206004820152603160248201527f5472616e73616374696f6e2069642066726f6d207365676d656e7420616e64206044820152700e4dedee840c8de40dcdee840dac2e8c6d607b1b60648201526084016102b1565b848a14611cd65760405162461bcd60e51b815260206004820152602d60248201527f43616c6c2067726170682066726f6d207365676d656e7420616e6420726f6f7460448201526c040c8de40dcdee840dac2e8c6d609b1b60648201526084016102b1565b8a5184511480611cf257508a51611cee9060016135c1565b8451145b611d3e5760405162461bcd60e51b815260206004820181905260248201527f4261642063616c6c2070617468206c656e67746820666f72207365676d656e7460448201526064016102b1565b8a51611d4b9060016135c1565b84511415611dc9578360018551611d629190613710565b81518110611d7257611d7261329b565b6020026020010151600014611dc95760405162461bcd60e51b815260206004820181905260248201527f46696e616c2063616c6c207061746820656c656d656e74206e6f74207a65726f60448201526064016102b1565b60005b60018c51611dda9190613710565b811015611e84578b8181518110611df357611df361329b565b6020026020010151858281518110611e0d57611e0d61329b565b602002602001015114611e725760405162461bcd60e51b815260206004820152602760248201527f5365676d656e742063616c6c207061746820646f6573206e6f74206d617463686044820152661031b0b63632b960c91b60648201526084016102b1565b80611e7c816132c7565b915050611dcc565b50868460018d51611e959190613710565b81518110611ea557611ea561329b565b602002602001015114611f045760405162461bcd60e51b815260206004820152602160248201527f5365676d656e74206576656e7473206172726179206f7574206f66206f7264656044820152603960f91b60648201526084016102b1565b81611f2a57611f1289611a9d565b611f1a612363565b6001975050505050505050610441565b600a80546001810182556000919091528151611f6d917fc65a7bb8d6351c1cf70c95a316cc6a92839c986682d98bc35f958f4883f9d2a801906020840190612dad565b505050505050508080611f7f906132c7565b915050611bb9565b50600095945050505050565b81516000816001600160401b03811115611faf57611faf61336b565b604051908082528060200260200182016040528015611fd8578160200160208202803683370190505b50905060005b611fe9600184613710565b811015612039578481815181106120025761200261329b565b602002602001015182828151811061201c5761201c61329b565b602090810291909101015280612031816132c7565b915050611fde565b5060015b838111610511578082612051600186613710565b815181106120615761206161329b565b602002602001018181525050600080600061207e89866001612561565b6007805460018082019092557fa66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c68801849055600880548083019091557ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee30180546001600160a01b0319166001600160a01b0385161790556009805491820181556000528151939650919450925061213d917f6e1540171b6c0c960b71a7020d9f60077f6af931a8bbf590da0223dacf75c7af909101906020840190612dad565b50505050808061214c906132c7565b91505061203d565b60006060600080600061216988886001612561565b92509250925060035483146121dd5760405162461bcd60e51b815260206004820152603460248201527f54617267657420626c6f636b636861696e20696420646f6573206e6f74206d616044820152731d18da081b5e48189b1bd8dad8da185a5b881a5960621b60648201526084016102b1565b6000808851600114801561220b5750886000815181106121ff576121ff61329b565b60200260200101516000145b61223057600061221a8a612786565b90506122288b826000612561565b509093509150505b600061223e848a8585612969565b905060006060866001600160a01b03168360405161225c9190613b07565b6000604051808303816000865af19150503d8060008114612299576040519150601f19603f3d011682016040523d82523d6000602084013e61229e565b606091505b509092509050816122e9577f38e7ccc4b02b2da681f96e62aef89b5c6d4115f501f8d42430bb2f5f2fa981a66122d3826129cf565b6040516122e09190613b23565b60405180910390a15b600b54600a541461233e57600a54600b546040517fce3bac95f99adf24dc6d7d8a7264b6c40b211c40e0f79a78482298c0867fae9b9261233192908252602082015260400190565b60405180910390a1600091505b600d5460ff1661234e5781612351565b60005b9d909c509a5050505050505050505050565b61236f60076000612d6e565b61237b60086000612d6e565b61238760096000612d8f565b600660009055600c600061239b9190612d6e565b6123a7600a6000612d8f565b6000600b55600d5460ff1615611b4b57600d805460ff19169055565b600d5460ff1615611b3757600d805460ff19169055600660009055600c6000611b4b9190612d6e565b6000878152600160205260409020546001600160a01b03168061245f5760405162461bcd60e51b815260206004820152602560248201527f4e6f207265676973746572656420766572696669657220666f7220626c6f636b60448201526431b430b4b760d91b60648201526084016102b1565b6000888152600260205260409020546001600160a01b038881169116146124d65760405162461bcd60e51b815260206004820152602560248201527f44617461206e6f7420656d697474656420627920617070726f76656420636f6e6044820152641d1c9858dd60da1b60648201526084016102b1565b600088888888886040516020016124f1959493929190613b36565b60408051601f198184030181529082905263260e748160e11b825291506001600160a01b03831690634c1ce90290612535908c908b9086908a908a90600401613b70565b60006040518083038186803b15801561254d57600080fd5b505afa158015611a8e573d6000803e3d6000fd5b60008060606000805b865181101561267b576000806125808a85612a80565b905060ff811661260657600189516125989190613710565b83146126015760405162461bcd60e51b815260206004820152603260248201527f52656163686564206c6561662066756e6374696f6e206275742074686572652060448201527134b99036b7b9329031b0b636103830ba341760711b60648201526084016102b1565b61265a565b600089848151811061261a5761261a61329b565b602002602001015190506126508b60016004846126379190613ba2565b61264190896135c1565b61264b91906135c1565b612ae6565b63ffffffff169250505b61266482856135c1565b935050508080612673906132c7565b91505061256a565b50856001875161268b9190613710565b8151811061269b5761269b61329b565b60200260200101516000146126fc5760006126b68883612a80565b905060ff8116156126ec5760006126d28961264b6001866135c1565b63ffffffff1690506126e481846135c1565b9250506126fa565b6126f76001836135c1565b91505b505b61270687826115c2565b93506127136020826135c1565b90506127228782016014015190565b92508415612769576127356014826135c1565b905060006127438883612b4c565b90506127506002836135c1565b915061276188838361ffff16612bb2565b92505061277c565b6040518060200160405280600081525091505b5093509350939050565b8051606090819083612799600183613710565b815181106127a9576127a961329b565b602002602001015160001461288a57806001600160401b038111156127d0576127d061336b565b6040519080825280602002602001820160405280156127f9578160200160208202803683370190505b50915060005b61280a600183613710565b81101561285a578481815181106128235761282361329b565b602002602001015183828151811061283d5761283d61329b565b602090810291909101015280612852816132c7565b9150506127ff565b50600082612869600184613710565b815181106128795761287961329b565b602002602001018181525050612962565b612895600182613710565b6001600160401b038111156128ac576128ac61336b565b6040519080825280602002602001820160405280156128d5578160200160208202803683370190505b50915060005b6128e6600283613710565b811015612936578481815181106128ff576128ff61329b565b60200260200101518382815181106129195761291961329b565b60209081029190910101528061292e816132c7565b9150506128db565b50600082612945600284613710565b815181106129555761295561329b565b6020026020010181815250505b5092915050565b6040805160208101859052908101839052606082811b6bffffffffffffffffffffffff19168183015290859060740160408051601f19818403018152908290526129b69291602001613bc1565b6040516020818303038152906040529050949350505050565b6060602482511015612a0b576129e58251612c71565b6040516020016129f59190613bf0565b6040516020818303038152906040529050919050565b81516004909201916044118015612a6557600083806020019051810190612a329190613c46565b9050612a3d81612c71565b604051602001612a4d9190613c5f565b60405160208183030381529060405292505050919050565b82806020019051810190612a799190613c8e565b9392505050565b6000612a8d8260016135c1565b83511015612add5760405162461bcd60e51b815260206004820152601c60248201527f736c6963696e67206f7574206f662072616e6765202875696e7438290000000060448201526064016102b1565b50016001015190565b6000612af38260046135c1565b83511015612b435760405162461bcd60e51b815260206004820152601d60248201527f736c6963696e67206f7574206f662072616e6765202875696e7433322900000060448201526064016102b1565b50016004015190565b6000612b598260026135c1565b83511015612ba95760405162461bcd60e51b815260206004820152601d60248201527f736c6963696e67206f7574206f662072616e6765202875696e7431362900000060448201526064016102b1565b50016002015190565b6060612bbe82846135c1565b84511015612c035760405162461bcd60e51b815260206004820152601260248201527152656164206f7574206f6620626f756e647360701b60448201526064016102b1565b606082158015612c1e57604051915060208201604052612c68565b6040519150601f8416801560200281840101858101878315602002848b0101015b81831015612c57578051835260209283019201612c3f565b5050858452601f01601f1916604052505b50949350505050565b606081612c955750506040805180820190915260018152600360fc1b602082015290565b8160005b8115612cbf5780612ca9816132c7565b9150612cb89050600a83613cec565b9150612c99565b6000816001600160401b03811115612cd957612cd961336b565b6040519080825280601f01601f191660200182016040528015612d03576020820181803683370190505b5090505b841561044157612d18600183613710565b9150612d25600a86613d00565b612d309060306135c1565b60f81b818381518110612d4557612d4561329b565b60200101906001600160f81b031916908160001a905350612d67600a86613cec565b9450612d07565b5080546000825590600052602060002090810190612d8c9190612e31565b50565b5080546000825590600052602060002090810190612d8c9190612e46565b828054612db990613875565b90600052602060002090601f016020900481019282612ddb5760008555612e21565b82601f10612df457805160ff1916838001178555612e21565b82800160010185558215612e21579182015b82811115612e21578251825591602001919060010190612e06565b50612e2d929150612e31565b5090565b5b80821115612e2d5760008155600101612e32565b80821115612e2d576000612e5a8282612e63565b50600101612e46565b508054612e6f90613875565b6000825580601f10612e7f575050565b601f016020900490600052602060002090810190612d8c9190612e31565b6001600160a01b0381168114612d8c57600080fd5b60008060408385031215612ec557600080fd5b823591506020830135612ed781612e9d565b809150509250929050565b600060208284031215612ef457600080fd5b8135612a7981612e9d565b600060208284031215612f1157600080fd5b5035919050565b60008083601f840112612f2a57600080fd5b5081356001600160401b03811115612f4157600080fd5b602083019150836020828501011115612f5957600080fd5b9250929050565b60008060008060608587031215612f7657600080fd5b843593506020850135612f8881612e9d565b925060408501356001600160401b03811115612fa357600080fd5b612faf87828801612f18565b95989497509550505050565b60008083601f840112612fcd57600080fd5b5081356001600160401b03811115612fe457600080fd5b6020830191508360208260051b8501011115612f5957600080fd5b60008060008060008060008060008060a08b8d03121561301e57600080fd5b8a356001600160401b038082111561303557600080fd5b6130418e838f01612fbb565b909c509a5060208d013591508082111561305a57600080fd5b6130668e838f01612fbb565b909a50985060408d013591508082111561307f57600080fd5b61308b8e838f01612fbb565b909850965060608d01359150808211156130a457600080fd5b6130b08e838f01612fbb565b909650945060808d01359150808211156130c957600080fd5b506130d68d828e01612fbb565b915080935050809150509295989b9194979a5092959850565b6000806000806060858703121561310557600080fd5b843593506020850135925060408501356001600160401b03811115612fa357600080fd5b60008060008060008060008060008060008060c08d8f03121561314b57600080fd5b6001600160401b038d35111561316057600080fd5b61316d8e8e358f01612fbb565b909c509a506001600160401b0360208e0135111561318a57600080fd5b61319a8e60208f01358f01612fbb565b909a5098506001600160401b0360408e013511156131b757600080fd5b6131c78e60408f01358f01612fbb565b90985096506001600160401b0360608e013511156131e457600080fd5b6131f48e60608f01358f01612fbb565b90965094506001600160401b0360808e0135111561321157600080fd5b6132218e60808f01358f01612fbb565b90945092506001600160401b0360a08e0135111561323e57600080fd5b61324e8e60a08f01358f01612fbb565b81935080925050509295989b509295989b509295989b565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b60006000198214156132db576132db6132b1565b5060010190565b6000808335601e198436030181126132f957600080fd5b8301803591506001600160401b0382111561331357600080fd5b602001915036819003821315612f5957600080fd5b8015158114612d8c57600080fd5b803561334181613328565b919050565b6000806040838503121561335957600080fd5b823591506020830135612ed781613328565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b03811182821017156133a9576133a961336b565b604052919050565b60006001600160401b038211156133ca576133ca61336b565b5060051b60200190565b600082601f8301126133e557600080fd5b813560206133fa6133f5836133b1565b613381565b82815260059290921b8401810191818101908684111561341957600080fd5b8286015b8481101561343d57803561343081612e9d565b835291830191830161341d565b509695505050505050565b60006001600160401b038211156134615761346161336b565b50601f01601f191660200190565b600082601f83011261348057600080fd5b813561348e6133f582613448565b8181528460208386010111156134a357600080fd5b816020850160208301376000918101602001919091529392505050565b60008060008060008060c087890312156134d957600080fd5b86359550602080880135955060408801356001600160401b03808211156134ff57600080fd5b818a0191508a601f83011261351357600080fd5b81356135216133f5826133b1565b81815260059190911b8301840190848101908d83111561354057600080fd5b938501935b8285101561355e57843582529385019390850190613545565b9850505060608a013592508083111561357657600080fd5b6135828b848c016133d4565b955061359060808b01613336565b945060a08a01359250808311156135a657600080fd5b50506135b489828a0161346f565b9150509295509295509295565b600082198211156135d4576135d46132b1565b500190565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b85815260018060a01b03851660208201528360408201526080606082015260006136306080830184866135d9565b979650505050505050565b6000806000806080858703121561365157600080fd5b84359350602085013561366381612e9d565b92506040850135915060608501356001600160401b0381111561368557600080fd5b6136918782880161346f565b91505092959194509250565b60006136ab6133f5846133b1565b80848252602080830192508560051b8501368111156136c957600080fd5b855b818110156137045780356001600160401b038111156136ea5760008081fd5b6136f636828a0161346f565b8652509382019382016136cb565b50919695505050505050565b600082821015613722576137226132b1565b500390565b8481526020810184905260006001600160fb1b0383111561374757600080fd5b8260051b808560408501376000920160400191825250949350505050565b60005b83811015613780578181015183820152602001613768565b8381111561378f576000848401525b50505050565b600081518084526137ad816020860160208601613765565b601f01601f19169290920160200192915050565b87815260006020888184015260c060408401528660c084015260018060fb1b038711156137ed57600080fd5b8660051b808960e086013760e0908401848103820160608601528754918101829052600088815283812092909161010001905b808310156138495783546001600160a01b03168252600193840193929092019190840190613820565b50871515608087015285810360a08701526138648188613795565b9d9c50505050505050505050505050565b600181811c9082168061388957607f821691505b602082108114156138aa57634e487b7160e01b600052602260045260246000fd5b50919050565b878152602081018790526001600160a01b0386811660408301528516606082015260c0608082018190526000906138e990830186613795565b82810360a08401526138fc8185876135d9565b9a9950505050505050505050565b8581526001600160a01b038516602082015260806040820181905260009061393590830185876135d9565b82810360608401526139478185613795565b98975050505050505050565b600082601f83011261396457600080fd5b815160206139746133f5836133b1565b82815260059290921b8401810191818101908684111561399357600080fd5b8286015b8481101561343d5780516139aa81612e9d565b8352918301918301613997565b805161334181613328565b60006139d06133f584613448565b90508281528383830111156139e457600080fd5b612a79836020830184613765565b600082601f830112613a0357600080fd5b612a79838351602085016139c2565b60008060008060008060c08789031215613a2b57600080fd5b86519550602080880151955060408801516001600160401b0380821115613a5157600080fd5b818a0191508a601f830112613a6557600080fd5b8151613a736133f5826133b1565b81815260059190911b8301840190848101908d831115613a9257600080fd5b938501935b82851015613ab057845182529385019390850190613a97565b60608d01519099509450505080831115613ac957600080fd5b613ad58b848c01613953565b9550613ae360808b016139b7565b945060a08a0151925080831115613af957600080fd5b50506135b489828a016139f2565b60008251613b19818460208701613765565b9190910192915050565b602081526000612a796020830184613795565b8581526bffffffffffffffffffffffff198560601b1660208201528360348201528183605483013760009101605401908152949350505050565b858152846020820152608060408201526000613b8f6080830186613795565b82810360608401526139478185876135d9565b6000816000190483118215151615613bbc57613bbc6132b1565b500290565b60008351613bd3818460208801613765565b835190830190613be7818360208801613765565b01949350505050565b7f52657665727420666f7220756e6b6e6f776e206572726f722e204572726f722081526703632b733ba341d160c51b602082015260008251613c39816028850160208701613765565b9190910160280192915050565b600060208284031215613c5857600080fd5b5051919050565b6602830b734b19d160cd1b815260008251613c81816007850160208701613765565b9190910160070192915050565b600060208284031215613ca057600080fd5b81516001600160401b03811115613cb657600080fd5b8201601f81018413613cc757600080fd5b610441848251602084016139c2565b634e487b7160e01b600052601260045260246000fd5b600082613cfb57613cfb613cd6565b500490565b600082613d0f57613d0f613cd6565b50069056fea26469706673582212209acf8c39174b984bd4a31eaf328472734a9c4431e86dcde9c977db164dbf3e1064736f6c63430008090033",
}

// GpactABI is the input ABI used to generate the binding from.
// Deprecated: Use GpactMetaData.ABI instead.
var GpactABI = GpactMetaData.ABI

// GpactBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use GpactMetaData.Bin instead.
var GpactBin = GpactMetaData.Bin

// DeployGpact deploys a new Ethereum contract, binding an instance of Gpact to it.
func DeployGpact(auth *bind.TransactOpts, backend bind.ContractBackend, _myBlockchainId *big.Int) (common.Address, *types.Transaction, *Gpact, error) {
	parsed, err := GpactMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(GpactBin), backend, _myBlockchainId)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Gpact{GpactCaller: GpactCaller{contract: contract}, GpactTransactor: GpactTransactor{contract: contract}, GpactFilterer: GpactFilterer{contract: contract}}, nil
}

// Gpact is an auto generated Go binding around an Ethereum contract.
type Gpact struct {
	GpactCaller     // Read-only binding to the contract
	GpactTransactor // Write-only binding to the contract
	GpactFilterer   // Log filterer for contract events
}

// GpactCaller is an auto generated read-only Go binding around an Ethereum contract.
type GpactCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// GpactTransactor is an auto generated write-only Go binding around an Ethereum contract.
type GpactTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// GpactFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type GpactFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// GpactSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type GpactSession struct {
	Contract     *Gpact            // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// GpactCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type GpactCallerSession struct {
	Contract *GpactCaller  // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts // Call options to use throughout this session
}

// GpactTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type GpactTransactorSession struct {
	Contract     *GpactTransactor  // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// GpactRaw is an auto generated low-level Go binding around an Ethereum contract.
type GpactRaw struct {
	Contract *Gpact // Generic contract binding to access the raw methods on
}

// GpactCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type GpactCallerRaw struct {
	Contract *GpactCaller // Generic read-only contract binding to access the raw methods on
}

// GpactTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type GpactTransactorRaw struct {
	Contract *GpactTransactor // Generic write-only contract binding to access the raw methods on
}

// NewGpact creates a new instance of Gpact, bound to a specific deployed contract.
func NewGpact(address common.Address, backend bind.ContractBackend) (*Gpact, error) {
	contract, err := bindGpact(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Gpact{GpactCaller: GpactCaller{contract: contract}, GpactTransactor: GpactTransactor{contract: contract}, GpactFilterer: GpactFilterer{contract: contract}}, nil
}

// NewGpactCaller creates a new read-only instance of Gpact, bound to a specific deployed contract.
func NewGpactCaller(address common.Address, caller bind.ContractCaller) (*GpactCaller, error) {
	contract, err := bindGpact(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &GpactCaller{contract: contract}, nil
}

// NewGpactTransactor creates a new write-only instance of Gpact, bound to a specific deployed contract.
func NewGpactTransactor(address common.Address, transactor bind.ContractTransactor) (*GpactTransactor, error) {
	contract, err := bindGpact(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &GpactTransactor{contract: contract}, nil
}

// NewGpactFilterer creates a new log filterer instance of Gpact, bound to a specific deployed contract.
func NewGpactFilterer(address common.Address, filterer bind.ContractFilterer) (*GpactFilterer, error) {
	contract, err := bindGpact(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &GpactFilterer{contract: contract}, nil
}

// bindGpact binds a generic wrapper to an already deployed contract.
func bindGpact(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(GpactABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Gpact *GpactRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Gpact.Contract.GpactCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Gpact *GpactRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Gpact.Contract.GpactTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Gpact *GpactRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Gpact.Contract.GpactTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Gpact *GpactCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Gpact.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Gpact *GpactTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Gpact.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Gpact *GpactTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Gpact.Contract.contract.Transact(opts, method, params...)
}

// ActiveCallCrosschainRootTxId is a free data retrieval call binding the contract method 0x3193c08b.
//
// Solidity: function activeCallCrosschainRootTxId() view returns(bytes32)
func (_Gpact *GpactCaller) ActiveCallCrosschainRootTxId(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _Gpact.contract.Call(opts, &out, "activeCallCrosschainRootTxId")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// ActiveCallCrosschainRootTxId is a free data retrieval call binding the contract method 0x3193c08b.
//
// Solidity: function activeCallCrosschainRootTxId() view returns(bytes32)
func (_Gpact *GpactSession) ActiveCallCrosschainRootTxId() ([32]byte, error) {
	return _Gpact.Contract.ActiveCallCrosschainRootTxId(&_Gpact.CallOpts)
}

// ActiveCallCrosschainRootTxId is a free data retrieval call binding the contract method 0x3193c08b.
//
// Solidity: function activeCallCrosschainRootTxId() view returns(bytes32)
func (_Gpact *GpactCallerSession) ActiveCallCrosschainRootTxId() ([32]byte, error) {
	return _Gpact.Contract.ActiveCallCrosschainRootTxId(&_Gpact.CallOpts)
}

// GetActiveCallCrosschainRootTxId is a free data retrieval call binding the contract method 0x7bf37a09.
//
// Solidity: function getActiveCallCrosschainRootTxId() view returns(bytes32)
func (_Gpact *GpactCaller) GetActiveCallCrosschainRootTxId(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _Gpact.contract.Call(opts, &out, "getActiveCallCrosschainRootTxId")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// GetActiveCallCrosschainRootTxId is a free data retrieval call binding the contract method 0x7bf37a09.
//
// Solidity: function getActiveCallCrosschainRootTxId() view returns(bytes32)
func (_Gpact *GpactSession) GetActiveCallCrosschainRootTxId() ([32]byte, error) {
	return _Gpact.Contract.GetActiveCallCrosschainRootTxId(&_Gpact.CallOpts)
}

// GetActiveCallCrosschainRootTxId is a free data retrieval call binding the contract method 0x7bf37a09.
//
// Solidity: function getActiveCallCrosschainRootTxId() view returns(bytes32)
func (_Gpact *GpactCallerSession) GetActiveCallCrosschainRootTxId() ([32]byte, error) {
	return _Gpact.Contract.GetActiveCallCrosschainRootTxId(&_Gpact.CallOpts)
}

// IsSingleBlockchainCall is a free data retrieval call binding the contract method 0xb4c3b756.
//
// Solidity: function isSingleBlockchainCall() view returns(bool)
func (_Gpact *GpactCaller) IsSingleBlockchainCall(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _Gpact.contract.Call(opts, &out, "isSingleBlockchainCall")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsSingleBlockchainCall is a free data retrieval call binding the contract method 0xb4c3b756.
//
// Solidity: function isSingleBlockchainCall() view returns(bool)
func (_Gpact *GpactSession) IsSingleBlockchainCall() (bool, error) {
	return _Gpact.Contract.IsSingleBlockchainCall(&_Gpact.CallOpts)
}

// IsSingleBlockchainCall is a free data retrieval call binding the contract method 0xb4c3b756.
//
// Solidity: function isSingleBlockchainCall() view returns(bool)
func (_Gpact *GpactCallerSession) IsSingleBlockchainCall() (bool, error) {
	return _Gpact.Contract.IsSingleBlockchainCall(&_Gpact.CallOpts)
}

// MyBlockchainId is a free data retrieval call binding the contract method 0x439160df.
//
// Solidity: function myBlockchainId() view returns(uint256)
func (_Gpact *GpactCaller) MyBlockchainId(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Gpact.contract.Call(opts, &out, "myBlockchainId")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// MyBlockchainId is a free data retrieval call binding the contract method 0x439160df.
//
// Solidity: function myBlockchainId() view returns(uint256)
func (_Gpact *GpactSession) MyBlockchainId() (*big.Int, error) {
	return _Gpact.Contract.MyBlockchainId(&_Gpact.CallOpts)
}

// MyBlockchainId is a free data retrieval call binding the contract method 0x439160df.
//
// Solidity: function myBlockchainId() view returns(uint256)
func (_Gpact *GpactCallerSession) MyBlockchainId() (*big.Int, error) {
	return _Gpact.Contract.MyBlockchainId(&_Gpact.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Gpact *GpactCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Gpact.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Gpact *GpactSession) Owner() (common.Address, error) {
	return _Gpact.Contract.Owner(&_Gpact.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Gpact *GpactCallerSession) Owner() (common.Address, error) {
	return _Gpact.Contract.Owner(&_Gpact.CallOpts)
}

// RootTransactionInformation is a free data retrieval call binding the contract method 0xf830b7b4.
//
// Solidity: function rootTransactionInformation(uint256 ) view returns(uint256)
func (_Gpact *GpactCaller) RootTransactionInformation(opts *bind.CallOpts, arg0 *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _Gpact.contract.Call(opts, &out, "rootTransactionInformation", arg0)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// RootTransactionInformation is a free data retrieval call binding the contract method 0xf830b7b4.
//
// Solidity: function rootTransactionInformation(uint256 ) view returns(uint256)
func (_Gpact *GpactSession) RootTransactionInformation(arg0 *big.Int) (*big.Int, error) {
	return _Gpact.Contract.RootTransactionInformation(&_Gpact.CallOpts, arg0)
}

// RootTransactionInformation is a free data retrieval call binding the contract method 0xf830b7b4.
//
// Solidity: function rootTransactionInformation(uint256 ) view returns(uint256)
func (_Gpact *GpactCallerSession) RootTransactionInformation(arg0 *big.Int) (*big.Int, error) {
	return _Gpact.Contract.RootTransactionInformation(&_Gpact.CallOpts, arg0)
}

// SegmentTransactionExecuted is a free data retrieval call binding the contract method 0x877ba01d.
//
// Solidity: function segmentTransactionExecuted(bytes32 ) view returns(bool)
func (_Gpact *GpactCaller) SegmentTransactionExecuted(opts *bind.CallOpts, arg0 [32]byte) (bool, error) {
	var out []interface{}
	err := _Gpact.contract.Call(opts, &out, "segmentTransactionExecuted", arg0)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// SegmentTransactionExecuted is a free data retrieval call binding the contract method 0x877ba01d.
//
// Solidity: function segmentTransactionExecuted(bytes32 ) view returns(bool)
func (_Gpact *GpactSession) SegmentTransactionExecuted(arg0 [32]byte) (bool, error) {
	return _Gpact.Contract.SegmentTransactionExecuted(&_Gpact.CallOpts, arg0)
}

// SegmentTransactionExecuted is a free data retrieval call binding the contract method 0x877ba01d.
//
// Solidity: function segmentTransactionExecuted(bytes32 ) view returns(bool)
func (_Gpact *GpactCallerSession) SegmentTransactionExecuted(arg0 [32]byte) (bool, error) {
	return _Gpact.Contract.SegmentTransactionExecuted(&_Gpact.CallOpts, arg0)
}

// AddRemoteCrosschainControl is a paid mutator transaction binding the contract method 0x19836dc7.
//
// Solidity: function addRemoteCrosschainControl(uint256 _blockchainId, address _cbc) returns()
func (_Gpact *GpactTransactor) AddRemoteCrosschainControl(opts *bind.TransactOpts, _blockchainId *big.Int, _cbc common.Address) (*types.Transaction, error) {
	return _Gpact.contract.Transact(opts, "addRemoteCrosschainControl", _blockchainId, _cbc)
}

// AddRemoteCrosschainControl is a paid mutator transaction binding the contract method 0x19836dc7.
//
// Solidity: function addRemoteCrosschainControl(uint256 _blockchainId, address _cbc) returns()
func (_Gpact *GpactSession) AddRemoteCrosschainControl(_blockchainId *big.Int, _cbc common.Address) (*types.Transaction, error) {
	return _Gpact.Contract.AddRemoteCrosschainControl(&_Gpact.TransactOpts, _blockchainId, _cbc)
}

// AddRemoteCrosschainControl is a paid mutator transaction binding the contract method 0x19836dc7.
//
// Solidity: function addRemoteCrosschainControl(uint256 _blockchainId, address _cbc) returns()
func (_Gpact *GpactTransactorSession) AddRemoteCrosschainControl(_blockchainId *big.Int, _cbc common.Address) (*types.Transaction, error) {
	return _Gpact.Contract.AddRemoteCrosschainControl(&_Gpact.TransactOpts, _blockchainId, _cbc)
}

// AddToListOfLockedContracts is a paid mutator transaction binding the contract method 0x39ce107e.
//
// Solidity: function addToListOfLockedContracts(address _contractToLock) returns()
func (_Gpact *GpactTransactor) AddToListOfLockedContracts(opts *bind.TransactOpts, _contractToLock common.Address) (*types.Transaction, error) {
	return _Gpact.contract.Transact(opts, "addToListOfLockedContracts", _contractToLock)
}

// AddToListOfLockedContracts is a paid mutator transaction binding the contract method 0x39ce107e.
//
// Solidity: function addToListOfLockedContracts(address _contractToLock) returns()
func (_Gpact *GpactSession) AddToListOfLockedContracts(_contractToLock common.Address) (*types.Transaction, error) {
	return _Gpact.Contract.AddToListOfLockedContracts(&_Gpact.TransactOpts, _contractToLock)
}

// AddToListOfLockedContracts is a paid mutator transaction binding the contract method 0x39ce107e.
//
// Solidity: function addToListOfLockedContracts(address _contractToLock) returns()
func (_Gpact *GpactTransactorSession) AddToListOfLockedContracts(_contractToLock common.Address) (*types.Transaction, error) {
	return _Gpact.Contract.AddToListOfLockedContracts(&_Gpact.TransactOpts, _contractToLock)
}

// AddVerifier is a paid mutator transaction binding the contract method 0xb2832096.
//
// Solidity: function addVerifier(uint256 _blockchainId, address _verifier) returns()
func (_Gpact *GpactTransactor) AddVerifier(opts *bind.TransactOpts, _blockchainId *big.Int, _verifier common.Address) (*types.Transaction, error) {
	return _Gpact.contract.Transact(opts, "addVerifier", _blockchainId, _verifier)
}

// AddVerifier is a paid mutator transaction binding the contract method 0xb2832096.
//
// Solidity: function addVerifier(uint256 _blockchainId, address _verifier) returns()
func (_Gpact *GpactSession) AddVerifier(_blockchainId *big.Int, _verifier common.Address) (*types.Transaction, error) {
	return _Gpact.Contract.AddVerifier(&_Gpact.TransactOpts, _blockchainId, _verifier)
}

// AddVerifier is a paid mutator transaction binding the contract method 0xb2832096.
//
// Solidity: function addVerifier(uint256 _blockchainId, address _verifier) returns()
func (_Gpact *GpactTransactorSession) AddVerifier(_blockchainId *big.Int, _verifier common.Address) (*types.Transaction, error) {
	return _Gpact.Contract.AddVerifier(&_Gpact.TransactOpts, _blockchainId, _verifier)
}

// CrossBlockchainCall is a paid mutator transaction binding the contract method 0x92b2c335.
//
// Solidity: function crossBlockchainCall(uint256 _blockchainId, address _contract, bytes _functionCallData) returns()
func (_Gpact *GpactTransactor) CrossBlockchainCall(opts *bind.TransactOpts, _blockchainId *big.Int, _contract common.Address, _functionCallData []byte) (*types.Transaction, error) {
	return _Gpact.contract.Transact(opts, "crossBlockchainCall", _blockchainId, _contract, _functionCallData)
}

// CrossBlockchainCall is a paid mutator transaction binding the contract method 0x92b2c335.
//
// Solidity: function crossBlockchainCall(uint256 _blockchainId, address _contract, bytes _functionCallData) returns()
func (_Gpact *GpactSession) CrossBlockchainCall(_blockchainId *big.Int, _contract common.Address, _functionCallData []byte) (*types.Transaction, error) {
	return _Gpact.Contract.CrossBlockchainCall(&_Gpact.TransactOpts, _blockchainId, _contract, _functionCallData)
}

// CrossBlockchainCall is a paid mutator transaction binding the contract method 0x92b2c335.
//
// Solidity: function crossBlockchainCall(uint256 _blockchainId, address _contract, bytes _functionCallData) returns()
func (_Gpact *GpactTransactorSession) CrossBlockchainCall(_blockchainId *big.Int, _contract common.Address, _functionCallData []byte) (*types.Transaction, error) {
	return _Gpact.Contract.CrossBlockchainCall(&_Gpact.TransactOpts, _blockchainId, _contract, _functionCallData)
}

// CrossBlockchainCallReturnsUint256 is a paid mutator transaction binding the contract method 0x8e22d534.
//
// Solidity: function crossBlockchainCallReturnsUint256(uint256 _blockchainId, address _contract, bytes _functionCallData) returns(uint256)
func (_Gpact *GpactTransactor) CrossBlockchainCallReturnsUint256(opts *bind.TransactOpts, _blockchainId *big.Int, _contract common.Address, _functionCallData []byte) (*types.Transaction, error) {
	return _Gpact.contract.Transact(opts, "crossBlockchainCallReturnsUint256", _blockchainId, _contract, _functionCallData)
}

// CrossBlockchainCallReturnsUint256 is a paid mutator transaction binding the contract method 0x8e22d534.
//
// Solidity: function crossBlockchainCallReturnsUint256(uint256 _blockchainId, address _contract, bytes _functionCallData) returns(uint256)
func (_Gpact *GpactSession) CrossBlockchainCallReturnsUint256(_blockchainId *big.Int, _contract common.Address, _functionCallData []byte) (*types.Transaction, error) {
	return _Gpact.Contract.CrossBlockchainCallReturnsUint256(&_Gpact.TransactOpts, _blockchainId, _contract, _functionCallData)
}

// CrossBlockchainCallReturnsUint256 is a paid mutator transaction binding the contract method 0x8e22d534.
//
// Solidity: function crossBlockchainCallReturnsUint256(uint256 _blockchainId, address _contract, bytes _functionCallData) returns(uint256)
func (_Gpact *GpactTransactorSession) CrossBlockchainCallReturnsUint256(_blockchainId *big.Int, _contract common.Address, _functionCallData []byte) (*types.Transaction, error) {
	return _Gpact.Contract.CrossBlockchainCallReturnsUint256(&_Gpact.TransactOpts, _blockchainId, _contract, _functionCallData)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_Gpact *GpactTransactor) RenounceOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Gpact.contract.Transact(opts, "renounceOwnership")
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_Gpact *GpactSession) RenounceOwnership() (*types.Transaction, error) {
	return _Gpact.Contract.RenounceOwnership(&_Gpact.TransactOpts)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_Gpact *GpactTransactorSession) RenounceOwnership() (*types.Transaction, error) {
	return _Gpact.Contract.RenounceOwnership(&_Gpact.TransactOpts)
}

// Root is a paid mutator transaction binding the contract method 0xf0f67af2.
//
// Solidity: function root(uint256[] _blockchainIds, address[] _cbcAddresses, bytes32[] _eventFunctionSignatures, bytes[] _eventData, bytes[] _signatures) returns()
func (_Gpact *GpactTransactor) Root(opts *bind.TransactOpts, _blockchainIds []*big.Int, _cbcAddresses []common.Address, _eventFunctionSignatures [][32]byte, _eventData [][]byte, _signatures [][]byte) (*types.Transaction, error) {
	return _Gpact.contract.Transact(opts, "root", _blockchainIds, _cbcAddresses, _eventFunctionSignatures, _eventData, _signatures)
}

// Root is a paid mutator transaction binding the contract method 0xf0f67af2.
//
// Solidity: function root(uint256[] _blockchainIds, address[] _cbcAddresses, bytes32[] _eventFunctionSignatures, bytes[] _eventData, bytes[] _signatures) returns()
func (_Gpact *GpactSession) Root(_blockchainIds []*big.Int, _cbcAddresses []common.Address, _eventFunctionSignatures [][32]byte, _eventData [][]byte, _signatures [][]byte) (*types.Transaction, error) {
	return _Gpact.Contract.Root(&_Gpact.TransactOpts, _blockchainIds, _cbcAddresses, _eventFunctionSignatures, _eventData, _signatures)
}

// Root is a paid mutator transaction binding the contract method 0xf0f67af2.
//
// Solidity: function root(uint256[] _blockchainIds, address[] _cbcAddresses, bytes32[] _eventFunctionSignatures, bytes[] _eventData, bytes[] _signatures) returns()
func (_Gpact *GpactTransactorSession) Root(_blockchainIds []*big.Int, _cbcAddresses []common.Address, _eventFunctionSignatures [][32]byte, _eventData [][]byte, _signatures [][]byte) (*types.Transaction, error) {
	return _Gpact.Contract.Root(&_Gpact.TransactOpts, _blockchainIds, _cbcAddresses, _eventFunctionSignatures, _eventData, _signatures)
}

// Segment is a paid mutator transaction binding the contract method 0xfb11639e.
//
// Solidity: function segment(uint256[] _blockchainIds, address[] _cbcAddresses, bytes32[] _eventFunctionSignatures, bytes[] _eventData, bytes[] _signatures, uint256[] _callPath) returns()
func (_Gpact *GpactTransactor) Segment(opts *bind.TransactOpts, _blockchainIds []*big.Int, _cbcAddresses []common.Address, _eventFunctionSignatures [][32]byte, _eventData [][]byte, _signatures [][]byte, _callPath []*big.Int) (*types.Transaction, error) {
	return _Gpact.contract.Transact(opts, "segment", _blockchainIds, _cbcAddresses, _eventFunctionSignatures, _eventData, _signatures, _callPath)
}

// Segment is a paid mutator transaction binding the contract method 0xfb11639e.
//
// Solidity: function segment(uint256[] _blockchainIds, address[] _cbcAddresses, bytes32[] _eventFunctionSignatures, bytes[] _eventData, bytes[] _signatures, uint256[] _callPath) returns()
func (_Gpact *GpactSession) Segment(_blockchainIds []*big.Int, _cbcAddresses []common.Address, _eventFunctionSignatures [][32]byte, _eventData [][]byte, _signatures [][]byte, _callPath []*big.Int) (*types.Transaction, error) {
	return _Gpact.Contract.Segment(&_Gpact.TransactOpts, _blockchainIds, _cbcAddresses, _eventFunctionSignatures, _eventData, _signatures, _callPath)
}

// Segment is a paid mutator transaction binding the contract method 0xfb11639e.
//
// Solidity: function segment(uint256[] _blockchainIds, address[] _cbcAddresses, bytes32[] _eventFunctionSignatures, bytes[] _eventData, bytes[] _signatures, uint256[] _callPath) returns()
func (_Gpact *GpactTransactorSession) Segment(_blockchainIds []*big.Int, _cbcAddresses []common.Address, _eventFunctionSignatures [][32]byte, _eventData [][]byte, _signatures [][]byte, _callPath []*big.Int) (*types.Transaction, error) {
	return _Gpact.Contract.Segment(&_Gpact.TransactOpts, _blockchainIds, _cbcAddresses, _eventFunctionSignatures, _eventData, _signatures, _callPath)
}

// Signalling is a paid mutator transaction binding the contract method 0x9efabd34.
//
// Solidity: function signalling(uint256[] _blockchainIds, address[] _cbcAddresses, bytes32[] _eventFunctionSignatures, bytes[] _eventData, bytes[] _signatures) returns()
func (_Gpact *GpactTransactor) Signalling(opts *bind.TransactOpts, _blockchainIds []*big.Int, _cbcAddresses []common.Address, _eventFunctionSignatures [][32]byte, _eventData [][]byte, _signatures [][]byte) (*types.Transaction, error) {
	return _Gpact.contract.Transact(opts, "signalling", _blockchainIds, _cbcAddresses, _eventFunctionSignatures, _eventData, _signatures)
}

// Signalling is a paid mutator transaction binding the contract method 0x9efabd34.
//
// Solidity: function signalling(uint256[] _blockchainIds, address[] _cbcAddresses, bytes32[] _eventFunctionSignatures, bytes[] _eventData, bytes[] _signatures) returns()
func (_Gpact *GpactSession) Signalling(_blockchainIds []*big.Int, _cbcAddresses []common.Address, _eventFunctionSignatures [][32]byte, _eventData [][]byte, _signatures [][]byte) (*types.Transaction, error) {
	return _Gpact.Contract.Signalling(&_Gpact.TransactOpts, _blockchainIds, _cbcAddresses, _eventFunctionSignatures, _eventData, _signatures)
}

// Signalling is a paid mutator transaction binding the contract method 0x9efabd34.
//
// Solidity: function signalling(uint256[] _blockchainIds, address[] _cbcAddresses, bytes32[] _eventFunctionSignatures, bytes[] _eventData, bytes[] _signatures) returns()
func (_Gpact *GpactTransactorSession) Signalling(_blockchainIds []*big.Int, _cbcAddresses []common.Address, _eventFunctionSignatures [][32]byte, _eventData [][]byte, _signatures [][]byte) (*types.Transaction, error) {
	return _Gpact.Contract.Signalling(&_Gpact.TransactOpts, _blockchainIds, _cbcAddresses, _eventFunctionSignatures, _eventData, _signatures)
}

// Start is a paid mutator transaction binding the contract method 0xdf1bba01.
//
// Solidity: function start(uint256 _crossBlockchainTransactionId, uint256 _timeout, bytes _callGraph) returns()
func (_Gpact *GpactTransactor) Start(opts *bind.TransactOpts, _crossBlockchainTransactionId *big.Int, _timeout *big.Int, _callGraph []byte) (*types.Transaction, error) {
	return _Gpact.contract.Transact(opts, "start", _crossBlockchainTransactionId, _timeout, _callGraph)
}

// Start is a paid mutator transaction binding the contract method 0xdf1bba01.
//
// Solidity: function start(uint256 _crossBlockchainTransactionId, uint256 _timeout, bytes _callGraph) returns()
func (_Gpact *GpactSession) Start(_crossBlockchainTransactionId *big.Int, _timeout *big.Int, _callGraph []byte) (*types.Transaction, error) {
	return _Gpact.Contract.Start(&_Gpact.TransactOpts, _crossBlockchainTransactionId, _timeout, _callGraph)
}

// Start is a paid mutator transaction binding the contract method 0xdf1bba01.
//
// Solidity: function start(uint256 _crossBlockchainTransactionId, uint256 _timeout, bytes _callGraph) returns()
func (_Gpact *GpactTransactorSession) Start(_crossBlockchainTransactionId *big.Int, _timeout *big.Int, _callGraph []byte) (*types.Transaction, error) {
	return _Gpact.Contract.Start(&_Gpact.TransactOpts, _crossBlockchainTransactionId, _timeout, _callGraph)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Gpact *GpactTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _Gpact.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Gpact *GpactSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _Gpact.Contract.TransferOwnership(&_Gpact.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Gpact *GpactTransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _Gpact.Contract.TransferOwnership(&_Gpact.TransactOpts, newOwner)
}

// GpactBadCallIterator is returned from FilterBadCall and is used to iterate over the raw logs and unpacked data for BadCall events raised by the Gpact contract.
type GpactBadCallIterator struct {
	Event *GpactBadCall // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *GpactBadCallIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(GpactBadCall)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(GpactBadCall)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *GpactBadCallIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *GpactBadCallIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// GpactBadCall represents a BadCall event raised by the Gpact contract.
type GpactBadCall struct {
	ExpectedBlockchainId *big.Int
	ActualBlockchainId   *big.Int
	ExpectedContract     common.Address
	ActualContract       common.Address
	ExpectedFunctionCall []byte
	ActualFunctionCall   []byte
	Raw                  types.Log // Blockchain specific contextual infos
}

// FilterBadCall is a free log retrieval operation binding the contract event 0x8b5fc485a070cefca43e0a1d8cc72cf38dc31d5bf14f58cedcc59c73cac84e15.
//
// Solidity: event BadCall(uint256 _expectedBlockchainId, uint256 _actualBlockchainId, address _expectedContract, address _actualContract, bytes _expectedFunctionCall, bytes _actualFunctionCall)
func (_Gpact *GpactFilterer) FilterBadCall(opts *bind.FilterOpts) (*GpactBadCallIterator, error) {

	logs, sub, err := _Gpact.contract.FilterLogs(opts, "BadCall")
	if err != nil {
		return nil, err
	}
	return &GpactBadCallIterator{contract: _Gpact.contract, event: "BadCall", logs: logs, sub: sub}, nil
}

// WatchBadCall is a free log subscription operation binding the contract event 0x8b5fc485a070cefca43e0a1d8cc72cf38dc31d5bf14f58cedcc59c73cac84e15.
//
// Solidity: event BadCall(uint256 _expectedBlockchainId, uint256 _actualBlockchainId, address _expectedContract, address _actualContract, bytes _expectedFunctionCall, bytes _actualFunctionCall)
func (_Gpact *GpactFilterer) WatchBadCall(opts *bind.WatchOpts, sink chan<- *GpactBadCall) (event.Subscription, error) {

	logs, sub, err := _Gpact.contract.WatchLogs(opts, "BadCall")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(GpactBadCall)
				if err := _Gpact.contract.UnpackLog(event, "BadCall", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseBadCall is a log parse operation binding the contract event 0x8b5fc485a070cefca43e0a1d8cc72cf38dc31d5bf14f58cedcc59c73cac84e15.
//
// Solidity: event BadCall(uint256 _expectedBlockchainId, uint256 _actualBlockchainId, address _expectedContract, address _actualContract, bytes _expectedFunctionCall, bytes _actualFunctionCall)
func (_Gpact *GpactFilterer) ParseBadCall(log types.Log) (*GpactBadCall, error) {
	event := new(GpactBadCall)
	if err := _Gpact.contract.UnpackLog(event, "BadCall", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// GpactCallFailureIterator is returned from FilterCallFailure and is used to iterate over the raw logs and unpacked data for CallFailure events raised by the Gpact contract.
type GpactCallFailureIterator struct {
	Event *GpactCallFailure // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *GpactCallFailureIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(GpactCallFailure)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(GpactCallFailure)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *GpactCallFailureIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *GpactCallFailureIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// GpactCallFailure represents a CallFailure event raised by the Gpact contract.
type GpactCallFailure struct {
	RevertReason string
	Raw          types.Log // Blockchain specific contextual infos
}

// FilterCallFailure is a free log retrieval operation binding the contract event 0x38e7ccc4b02b2da681f96e62aef89b5c6d4115f501f8d42430bb2f5f2fa981a6.
//
// Solidity: event CallFailure(string _revertReason)
func (_Gpact *GpactFilterer) FilterCallFailure(opts *bind.FilterOpts) (*GpactCallFailureIterator, error) {

	logs, sub, err := _Gpact.contract.FilterLogs(opts, "CallFailure")
	if err != nil {
		return nil, err
	}
	return &GpactCallFailureIterator{contract: _Gpact.contract, event: "CallFailure", logs: logs, sub: sub}, nil
}

// WatchCallFailure is a free log subscription operation binding the contract event 0x38e7ccc4b02b2da681f96e62aef89b5c6d4115f501f8d42430bb2f5f2fa981a6.
//
// Solidity: event CallFailure(string _revertReason)
func (_Gpact *GpactFilterer) WatchCallFailure(opts *bind.WatchOpts, sink chan<- *GpactCallFailure) (event.Subscription, error) {

	logs, sub, err := _Gpact.contract.WatchLogs(opts, "CallFailure")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(GpactCallFailure)
				if err := _Gpact.contract.UnpackLog(event, "CallFailure", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseCallFailure is a log parse operation binding the contract event 0x38e7ccc4b02b2da681f96e62aef89b5c6d4115f501f8d42430bb2f5f2fa981a6.
//
// Solidity: event CallFailure(string _revertReason)
func (_Gpact *GpactFilterer) ParseCallFailure(log types.Log) (*GpactCallFailure, error) {
	event := new(GpactCallFailure)
	if err := _Gpact.contract.UnpackLog(event, "CallFailure", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// GpactCallResultIterator is returned from FilterCallResult and is used to iterate over the raw logs and unpacked data for CallResult events raised by the Gpact contract.
type GpactCallResultIterator struct {
	Event *GpactCallResult // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *GpactCallResultIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(GpactCallResult)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(GpactCallResult)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *GpactCallResultIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *GpactCallResultIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// GpactCallResult represents a CallResult event raised by the Gpact contract.
type GpactCallResult struct {
	BlockchainId *big.Int
	Contract     common.Address
	FunctionCall []byte
	Result       []byte
	Raw          types.Log // Blockchain specific contextual infos
}

// FilterCallResult is a free log retrieval operation binding the contract event 0x971a379ee339d51e370a4733845f31c68e234014c8494ecedb867ae2cdc1ef68.
//
// Solidity: event CallResult(uint256 _blockchainId, address _contract, bytes _functionCall, bytes _result)
func (_Gpact *GpactFilterer) FilterCallResult(opts *bind.FilterOpts) (*GpactCallResultIterator, error) {

	logs, sub, err := _Gpact.contract.FilterLogs(opts, "CallResult")
	if err != nil {
		return nil, err
	}
	return &GpactCallResultIterator{contract: _Gpact.contract, event: "CallResult", logs: logs, sub: sub}, nil
}

// WatchCallResult is a free log subscription operation binding the contract event 0x971a379ee339d51e370a4733845f31c68e234014c8494ecedb867ae2cdc1ef68.
//
// Solidity: event CallResult(uint256 _blockchainId, address _contract, bytes _functionCall, bytes _result)
func (_Gpact *GpactFilterer) WatchCallResult(opts *bind.WatchOpts, sink chan<- *GpactCallResult) (event.Subscription, error) {

	logs, sub, err := _Gpact.contract.WatchLogs(opts, "CallResult")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(GpactCallResult)
				if err := _Gpact.contract.UnpackLog(event, "CallResult", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseCallResult is a log parse operation binding the contract event 0x971a379ee339d51e370a4733845f31c68e234014c8494ecedb867ae2cdc1ef68.
//
// Solidity: event CallResult(uint256 _blockchainId, address _contract, bytes _functionCall, bytes _result)
func (_Gpact *GpactFilterer) ParseCallResult(log types.Log) (*GpactCallResult, error) {
	event := new(GpactCallResult)
	if err := _Gpact.contract.UnpackLog(event, "CallResult", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// GpactDumpIterator is returned from FilterDump and is used to iterate over the raw logs and unpacked data for Dump events raised by the Gpact contract.
type GpactDumpIterator struct {
	Event *GpactDump // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *GpactDumpIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(GpactDump)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(GpactDump)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *GpactDumpIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *GpactDumpIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// GpactDump represents a Dump event raised by the Gpact contract.
type GpactDump struct {
	Val1 *big.Int
	Val2 [32]byte
	Val3 common.Address
	Val4 []byte
	Raw  types.Log // Blockchain specific contextual infos
}

// FilterDump is a free log retrieval operation binding the contract event 0x3f65ec40a934b9a9e582b4c728ca2798fc40cf7de89354f5ab26a47fe60996c7.
//
// Solidity: event Dump(uint256 _val1, bytes32 _val2, address _val3, bytes _val4)
func (_Gpact *GpactFilterer) FilterDump(opts *bind.FilterOpts) (*GpactDumpIterator, error) {

	logs, sub, err := _Gpact.contract.FilterLogs(opts, "Dump")
	if err != nil {
		return nil, err
	}
	return &GpactDumpIterator{contract: _Gpact.contract, event: "Dump", logs: logs, sub: sub}, nil
}

// WatchDump is a free log subscription operation binding the contract event 0x3f65ec40a934b9a9e582b4c728ca2798fc40cf7de89354f5ab26a47fe60996c7.
//
// Solidity: event Dump(uint256 _val1, bytes32 _val2, address _val3, bytes _val4)
func (_Gpact *GpactFilterer) WatchDump(opts *bind.WatchOpts, sink chan<- *GpactDump) (event.Subscription, error) {

	logs, sub, err := _Gpact.contract.WatchLogs(opts, "Dump")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(GpactDump)
				if err := _Gpact.contract.UnpackLog(event, "Dump", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseDump is a log parse operation binding the contract event 0x3f65ec40a934b9a9e582b4c728ca2798fc40cf7de89354f5ab26a47fe60996c7.
//
// Solidity: event Dump(uint256 _val1, bytes32 _val2, address _val3, bytes _val4)
func (_Gpact *GpactFilterer) ParseDump(log types.Log) (*GpactDump, error) {
	event := new(GpactDump)
	if err := _Gpact.contract.UnpackLog(event, "Dump", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// GpactNotEnoughCallsIterator is returned from FilterNotEnoughCalls and is used to iterate over the raw logs and unpacked data for NotEnoughCalls events raised by the Gpact contract.
type GpactNotEnoughCallsIterator struct {
	Event *GpactNotEnoughCalls // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *GpactNotEnoughCallsIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(GpactNotEnoughCalls)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(GpactNotEnoughCalls)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *GpactNotEnoughCallsIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *GpactNotEnoughCallsIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// GpactNotEnoughCalls represents a NotEnoughCalls event raised by the Gpact contract.
type GpactNotEnoughCalls struct {
	ExpectedNumberOfCalls *big.Int
	ActualNumberOfCalls   *big.Int
	Raw                   types.Log // Blockchain specific contextual infos
}

// FilterNotEnoughCalls is a free log retrieval operation binding the contract event 0xce3bac95f99adf24dc6d7d8a7264b6c40b211c40e0f79a78482298c0867fae9b.
//
// Solidity: event NotEnoughCalls(uint256 _expectedNumberOfCalls, uint256 _actualNumberOfCalls)
func (_Gpact *GpactFilterer) FilterNotEnoughCalls(opts *bind.FilterOpts) (*GpactNotEnoughCallsIterator, error) {

	logs, sub, err := _Gpact.contract.FilterLogs(opts, "NotEnoughCalls")
	if err != nil {
		return nil, err
	}
	return &GpactNotEnoughCallsIterator{contract: _Gpact.contract, event: "NotEnoughCalls", logs: logs, sub: sub}, nil
}

// WatchNotEnoughCalls is a free log subscription operation binding the contract event 0xce3bac95f99adf24dc6d7d8a7264b6c40b211c40e0f79a78482298c0867fae9b.
//
// Solidity: event NotEnoughCalls(uint256 _expectedNumberOfCalls, uint256 _actualNumberOfCalls)
func (_Gpact *GpactFilterer) WatchNotEnoughCalls(opts *bind.WatchOpts, sink chan<- *GpactNotEnoughCalls) (event.Subscription, error) {

	logs, sub, err := _Gpact.contract.WatchLogs(opts, "NotEnoughCalls")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(GpactNotEnoughCalls)
				if err := _Gpact.contract.UnpackLog(event, "NotEnoughCalls", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseNotEnoughCalls is a log parse operation binding the contract event 0xce3bac95f99adf24dc6d7d8a7264b6c40b211c40e0f79a78482298c0867fae9b.
//
// Solidity: event NotEnoughCalls(uint256 _expectedNumberOfCalls, uint256 _actualNumberOfCalls)
func (_Gpact *GpactFilterer) ParseNotEnoughCalls(log types.Log) (*GpactNotEnoughCalls, error) {
	event := new(GpactNotEnoughCalls)
	if err := _Gpact.contract.UnpackLog(event, "NotEnoughCalls", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// GpactOwnershipTransferredIterator is returned from FilterOwnershipTransferred and is used to iterate over the raw logs and unpacked data for OwnershipTransferred events raised by the Gpact contract.
type GpactOwnershipTransferredIterator struct {
	Event *GpactOwnershipTransferred // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *GpactOwnershipTransferredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(GpactOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(GpactOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *GpactOwnershipTransferredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *GpactOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// GpactOwnershipTransferred represents a OwnershipTransferred event raised by the Gpact contract.
type GpactOwnershipTransferred struct {
	PreviousOwner common.Address
	NewOwner      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterOwnershipTransferred is a free log retrieval operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_Gpact *GpactFilterer) FilterOwnershipTransferred(opts *bind.FilterOpts, previousOwner []common.Address, newOwner []common.Address) (*GpactOwnershipTransferredIterator, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _Gpact.contract.FilterLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return &GpactOwnershipTransferredIterator{contract: _Gpact.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

// WatchOwnershipTransferred is a free log subscription operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_Gpact *GpactFilterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *GpactOwnershipTransferred, previousOwner []common.Address, newOwner []common.Address) (event.Subscription, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _Gpact.contract.WatchLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(GpactOwnershipTransferred)
				if err := _Gpact.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOwnershipTransferred is a log parse operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_Gpact *GpactFilterer) ParseOwnershipTransferred(log types.Log) (*GpactOwnershipTransferred, error) {
	event := new(GpactOwnershipTransferred)
	if err := _Gpact.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// GpactRootIterator is returned from FilterRoot and is used to iterate over the raw logs and unpacked data for Root events raised by the Gpact contract.
type GpactRootIterator struct {
	Event *GpactRoot // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *GpactRootIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(GpactRoot)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(GpactRoot)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *GpactRootIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *GpactRootIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// GpactRoot represents a Root event raised by the Gpact contract.
type GpactRoot struct {
	CrossBlockchainTransactionId *big.Int
	Success                      bool
	Raw                          types.Log // Blockchain specific contextual infos
}

// FilterRoot is a free log retrieval operation binding the contract event 0xe6763dd99bf894d72f3499dd572aa42876eae7ae028c32fff21654e1bbc4c807.
//
// Solidity: event Root(uint256 _crossBlockchainTransactionId, bool _success)
func (_Gpact *GpactFilterer) FilterRoot(opts *bind.FilterOpts) (*GpactRootIterator, error) {

	logs, sub, err := _Gpact.contract.FilterLogs(opts, "Root")
	if err != nil {
		return nil, err
	}
	return &GpactRootIterator{contract: _Gpact.contract, event: "Root", logs: logs, sub: sub}, nil
}

// WatchRoot is a free log subscription operation binding the contract event 0xe6763dd99bf894d72f3499dd572aa42876eae7ae028c32fff21654e1bbc4c807.
//
// Solidity: event Root(uint256 _crossBlockchainTransactionId, bool _success)
func (_Gpact *GpactFilterer) WatchRoot(opts *bind.WatchOpts, sink chan<- *GpactRoot) (event.Subscription, error) {

	logs, sub, err := _Gpact.contract.WatchLogs(opts, "Root")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(GpactRoot)
				if err := _Gpact.contract.UnpackLog(event, "Root", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRoot is a log parse operation binding the contract event 0xe6763dd99bf894d72f3499dd572aa42876eae7ae028c32fff21654e1bbc4c807.
//
// Solidity: event Root(uint256 _crossBlockchainTransactionId, bool _success)
func (_Gpact *GpactFilterer) ParseRoot(log types.Log) (*GpactRoot, error) {
	event := new(GpactRoot)
	if err := _Gpact.contract.UnpackLog(event, "Root", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// GpactSegmentIterator is returned from FilterSegment and is used to iterate over the raw logs and unpacked data for Segment events raised by the Gpact contract.
type GpactSegmentIterator struct {
	Event *GpactSegment // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *GpactSegmentIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(GpactSegment)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(GpactSegment)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *GpactSegmentIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *GpactSegmentIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// GpactSegment represents a Segment event raised by the Gpact contract.
type GpactSegment struct {
	CrossBlockchainTransactionId *big.Int
	HashOfCallGraph              [32]byte
	CallPath                     []*big.Int
	LockedContracts              []common.Address
	Success                      bool
	ReturnValue                  []byte
	Raw                          types.Log // Blockchain specific contextual infos
}

// FilterSegment is a free log retrieval operation binding the contract event 0xb01557f1f634b7c5072ab5e36d07a2355ef819faca5a3d321430d71987155b8f.
//
// Solidity: event Segment(uint256 _crossBlockchainTransactionId, bytes32 _hashOfCallGraph, uint256[] _callPath, address[] _lockedContracts, bool _success, bytes _returnValue)
func (_Gpact *GpactFilterer) FilterSegment(opts *bind.FilterOpts) (*GpactSegmentIterator, error) {

	logs, sub, err := _Gpact.contract.FilterLogs(opts, "Segment")
	if err != nil {
		return nil, err
	}
	return &GpactSegmentIterator{contract: _Gpact.contract, event: "Segment", logs: logs, sub: sub}, nil
}

// WatchSegment is a free log subscription operation binding the contract event 0xb01557f1f634b7c5072ab5e36d07a2355ef819faca5a3d321430d71987155b8f.
//
// Solidity: event Segment(uint256 _crossBlockchainTransactionId, bytes32 _hashOfCallGraph, uint256[] _callPath, address[] _lockedContracts, bool _success, bytes _returnValue)
func (_Gpact *GpactFilterer) WatchSegment(opts *bind.WatchOpts, sink chan<- *GpactSegment) (event.Subscription, error) {

	logs, sub, err := _Gpact.contract.WatchLogs(opts, "Segment")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(GpactSegment)
				if err := _Gpact.contract.UnpackLog(event, "Segment", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseSegment is a log parse operation binding the contract event 0xb01557f1f634b7c5072ab5e36d07a2355ef819faca5a3d321430d71987155b8f.
//
// Solidity: event Segment(uint256 _crossBlockchainTransactionId, bytes32 _hashOfCallGraph, uint256[] _callPath, address[] _lockedContracts, bool _success, bytes _returnValue)
func (_Gpact *GpactFilterer) ParseSegment(log types.Log) (*GpactSegment, error) {
	event := new(GpactSegment)
	if err := _Gpact.contract.UnpackLog(event, "Segment", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// GpactSignallingIterator is returned from FilterSignalling and is used to iterate over the raw logs and unpacked data for Signalling events raised by the Gpact contract.
type GpactSignallingIterator struct {
	Event *GpactSignalling // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *GpactSignallingIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(GpactSignalling)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(GpactSignalling)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *GpactSignallingIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *GpactSignallingIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// GpactSignalling represents a Signalling event raised by the Gpact contract.
type GpactSignalling struct {
	RootBcId                     *big.Int
	CrossBlockchainTransactionId *big.Int
	Raw                          types.Log // Blockchain specific contextual infos
}

// FilterSignalling is a free log retrieval operation binding the contract event 0x8426029537c24c21c8056ae94a666a5e448f1080699c70b9bf691cfeb9d5feec.
//
// Solidity: event Signalling(uint256 _rootBcId, uint256 _crossBlockchainTransactionId)
func (_Gpact *GpactFilterer) FilterSignalling(opts *bind.FilterOpts) (*GpactSignallingIterator, error) {

	logs, sub, err := _Gpact.contract.FilterLogs(opts, "Signalling")
	if err != nil {
		return nil, err
	}
	return &GpactSignallingIterator{contract: _Gpact.contract, event: "Signalling", logs: logs, sub: sub}, nil
}

// WatchSignalling is a free log subscription operation binding the contract event 0x8426029537c24c21c8056ae94a666a5e448f1080699c70b9bf691cfeb9d5feec.
//
// Solidity: event Signalling(uint256 _rootBcId, uint256 _crossBlockchainTransactionId)
func (_Gpact *GpactFilterer) WatchSignalling(opts *bind.WatchOpts, sink chan<- *GpactSignalling) (event.Subscription, error) {

	logs, sub, err := _Gpact.contract.WatchLogs(opts, "Signalling")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(GpactSignalling)
				if err := _Gpact.contract.UnpackLog(event, "Signalling", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseSignalling is a log parse operation binding the contract event 0x8426029537c24c21c8056ae94a666a5e448f1080699c70b9bf691cfeb9d5feec.
//
// Solidity: event Signalling(uint256 _rootBcId, uint256 _crossBlockchainTransactionId)
func (_Gpact *GpactFilterer) ParseSignalling(log types.Log) (*GpactSignalling, error) {
	event := new(GpactSignalling)
	if err := _Gpact.contract.UnpackLog(event, "Signalling", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// GpactStartIterator is returned from FilterStart and is used to iterate over the raw logs and unpacked data for Start events raised by the Gpact contract.
type GpactStartIterator struct {
	Event *GpactStart // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *GpactStartIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(GpactStart)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(GpactStart)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *GpactStartIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *GpactStartIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// GpactStart represents a Start event raised by the Gpact contract.
type GpactStart struct {
	CrossBlockchainTransactionId *big.Int
	Caller                       common.Address
	Timeout                      *big.Int
	CallGraph                    []byte
	Raw                          types.Log // Blockchain specific contextual infos
}

// FilterStart is a free log retrieval operation binding the contract event 0x77dab611ad9a24b763e2742f57749a0227393e0da76212d74fceb326b0661424.
//
// Solidity: event Start(uint256 _crossBlockchainTransactionId, address _caller, uint256 _timeout, bytes _callGraph)
func (_Gpact *GpactFilterer) FilterStart(opts *bind.FilterOpts) (*GpactStartIterator, error) {

	logs, sub, err := _Gpact.contract.FilterLogs(opts, "Start")
	if err != nil {
		return nil, err
	}
	return &GpactStartIterator{contract: _Gpact.contract, event: "Start", logs: logs, sub: sub}, nil
}

// WatchStart is a free log subscription operation binding the contract event 0x77dab611ad9a24b763e2742f57749a0227393e0da76212d74fceb326b0661424.
//
// Solidity: event Start(uint256 _crossBlockchainTransactionId, address _caller, uint256 _timeout, bytes _callGraph)
func (_Gpact *GpactFilterer) WatchStart(opts *bind.WatchOpts, sink chan<- *GpactStart) (event.Subscription, error) {

	logs, sub, err := _Gpact.contract.WatchLogs(opts, "Start")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(GpactStart)
				if err := _Gpact.contract.UnpackLog(event, "Start", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseStart is a log parse operation binding the contract event 0x77dab611ad9a24b763e2742f57749a0227393e0da76212d74fceb326b0661424.
//
// Solidity: event Start(uint256 _crossBlockchainTransactionId, address _caller, uint256 _timeout, bytes _callGraph)
func (_Gpact *GpactFilterer) ParseStart(log types.Log) (*GpactStart, error) {
	event := new(GpactStart)
	if err := _Gpact.contract.UnpackLog(event, "Start", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package functioncall

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// GpactMetaData contains all meta data concerning the Gpact contract.
var GpactMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_myBlockchainId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_expectedBlockchainId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_actualBlockchainId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_expectedContract\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_actualContract\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"_expectedFunctionCall\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"_actualFunctionCall\",\"type\":\"bytes\"}],\"name\":\"BadCall\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_revertReason\",\"type\":\"string\"}],\"name\":\"CallFailure\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_blockchainId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_contract\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"_functionCall\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"_result\",\"type\":\"bytes\"}],\"name\":\"CallResult\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_val1\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"_val2\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_val3\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"_val4\",\"type\":\"bytes\"}],\"name\":\"Dump\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_expectedNumberOfCalls\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_actualNumberOfCalls\",\"type\":\"uint256\"}],\"name\":\"NotEnoughCalls\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_crossBlockchainTransactionId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_success\",\"type\":\"bool\"}],\"name\":\"Root\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_rootBlockchainId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_crossBlockchainTransactionId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"_hashOfCallGraph\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"_callPath\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"_lockedContracts\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_success\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"_returnValue\",\"type\":\"bytes\"}],\"name\":\"Segment\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_rootBcId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_crossBlockchainTransactionId\",\"type\":\"uint256\"}],\"name\":\"Signalling\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_crossBlockchainTransactionId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_caller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_timeout\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"_callGraph\",\"type\":\"bytes\"}],\"name\":\"Start\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"activeCallCrosschainRootTxId\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_blockchainId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_cbc\",\"type\":\"address\"}],\"name\":\"addRemoteCrosschainControl\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_contractToLock\",\"type\":\"address\"}],\"name\":\"addToListOfLockedContracts\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_blockchainId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_verifier\",\"type\":\"address\"}],\"name\":\"addVerifier\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_blockchainId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_contract\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_functionCallData\",\"type\":\"bytes\"}],\"name\":\"crossBlockchainCall\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_blockchainId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_contract\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_functionCallData\",\"type\":\"bytes\"}],\"name\":\"crossBlockchainCallReturnsUint256\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_blockchainId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_contract\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_functionCallData\",\"type\":\"bytes\"}],\"name\":\"crossBlockchainCallWithReturn\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"failed\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"returnValue\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getActiveCallCrosschainRootTxId\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isSingleBlockchainCall\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"myBlockchainId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_blockchainIds\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"_cbcAddresses\",\"type\":\"address[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"_eventFunctionSignatures\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes[]\",\"name\":\"_eventData\",\"type\":\"bytes[]\"},{\"internalType\":\"bytes[]\",\"name\":\"_signatures\",\"type\":\"bytes[]\"}],\"name\":\"root\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"rootTransactionInformation\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_blockchainIds\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"_cbcAddresses\",\"type\":\"address[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"_eventFunctionSignatures\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes[]\",\"name\":\"_eventData\",\"type\":\"bytes[]\"},{\"internalType\":\"bytes[]\",\"name\":\"_signatures\",\"type\":\"bytes[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_callPath\",\"type\":\"uint256[]\"}],\"name\":\"segment\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"segmentTransactionExecuted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_blockchainIds\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"_cbcAddresses\",\"type\":\"address[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"_eventFunctionSignatures\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes[]\",\"name\":\"_eventData\",\"type\":\"bytes[]\"},{\"internalType\":\"bytes[]\",\"name\":\"_signatures\",\"type\":\"bytes[]\"}],\"name\":\"signalling\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_crossBlockchainTransactionId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_timeout\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_callGraph\",\"type\":\"bytes\"}],\"name\":\"start\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Bin: "0x60806040523480156200001157600080fd5b50604051620041203803806200412083398101604081905262000034916200007e565b600080546001600160a01b031916339081178255604051909182917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a35060035562000098565b6000602082840312156200009157600080fd5b5051919050565b61407880620000a86000396000f3fe608060405234801561001057600080fd5b50600436106101215760003560e01c80638e22d534116100ad578063df1bba0111610071578063df1bba0114610247578063f0f67af21461025a578063f2fde38b1461026d578063f830b7b414610280578063fb11639e146102a057600080fd5b80638e22d534146101f257806392b2c335146102055780639efabd3414610218578063b28320961461022b578063b4c3b7561461023e57600080fd5b806363ce0dfa116100f457806363ce0dfa14610173578063715018a6146101945780637bf37a091461019c578063877ba01d146101a45780638da5cb5b146101d757600080fd5b806319836dc7146101265780633193c08b1461013b57806339ce107e14610157578063439160df1461016a575b600080fd5b6101396101343660046130c5565b6102b3565b005b61014460065481565b6040519081526020015b60405180910390f35b6101396101653660046130f5565b610314565b61014460035481565b61018661018136600461315a565b6103c2565b60405161014e929190613211565b6101396103df565b600654610144565b6101c76101b236600461322c565b60056020526000908152604090205460ff1681565b604051901515815260200161014e565b6000546040516001600160a01b03909116815260200161014e565b61014461020036600461315a565b610453565b61013961021336600461315a565b61049b565b610139610226366004613289565b61056b565b6101396102393660046130c5565b61082c565b600654156101c7565b610139610255366004613379565b61091f565b610139610268366004613289565b610a31565b61013961027b3660046130f5565b610f26565b61014461028e36600461322c565b60046020526000908152604090205481565b6101396102ae3660046133b3565b611010565b6000546001600160a01b031633146102e65760405162461bcd60e51b81526004016102dd906134f0565b60405180910390fd5b60009182526002602052604090912080546001600160a01b0319166001600160a01b03909216919091179055565b60005b600c5481101561036f57816001600160a01b0316600c828154811061033e5761033e613525565b6000918252602090912001546001600160a01b0316141561035d575050565b8061036781613551565b915050610317565b50600c80546001810182556000919091527fdf6966c971051c3d54ec59162606531493a51404a002842f56009d7e5cf4a8c70180546001600160a01b0319166001600160a01b0392909216919091179055565b600060606103d286868686611393565b9097909650945050505050565b6000546001600160a01b031633146104095760405162461bcd60e51b81526004016102dd906134f0565b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319169055565b6000806060610464878787876103c2565b9092509050811561047a57600092505050610493565b8080602001905181019061048e919061356c565b925050505b949350505050565b600060606104ab86868686611393565b909250905081610563576104ce81604051806020016040528060008152506116c6565b610563577f38e7ccc4b02b2da681f96e62aef89b5c6d4115f501f8d42430bb2f5f2fa981a660405161054d9060208082526033908201527f43726f737320426c6f636b636861696e2043616c6c207769746820756e65787060408201527265637465642072657475726e2076616c75657360681b606082015260800190565b60405180910390a1600d805460ff191660011790555b505050505050565b61057f8a8a8a8a8a8a8a8a8a8a60006116f3565b6000808585600081811061059557610595613525565b90506020028101906105a79190613585565b8101906105b491906135e9565b909250905060008c8c82816105cb576105cb613525565b90506020020135905060006106208e8e60008181106105ec576105ec613525565b9050602002013585604080516020808201949094528082019290925280518083038201815260609092019052805191012090565b905060015b878110156107c05760008060608b8b8581811061064457610644613525565b90506020028101906106569190613585565b8101906106639190613763565b50949750929550919350505088831490506106c05760405162461bcd60e51b815260206004820152601860248201527f496e636f72726563742043726f7373636861696e54784964000000000000000060448201526064016102dd565b8286146107055760405162461bcd60e51b8152602060048201526013602482015272125b98dbdc9c9958dd08149bdbdd081098d259606a1b60448201526064016102dd565b60005b81518110156107a957600082828151811061072557610725613525565b602090810291909101015160405163267ad75360e21b81528a15156004820152602481018990529091506001600160a01b038216906399eb5d4c90604401600060405180830381600087803b15801561077d57600080fd5b505af1158015610791573d6000803e3d6000fd5b505050505080806107a190613551565b915050610708565b5050505080806107b890613551565b915050610625565b507f8426029537c24c21c8056ae94a666a5e448f1080699c70b9bf691cfeb9d5feec8e8e60008181106107f5576107f5613525565b9050602002013585604051610814929190918252602082015260400190565b60405180910390a15050505050505050505050505050565b6000546001600160a01b031633146108565760405162461bcd60e51b81526004016102dd906134f0565b8161089b5760405162461bcd60e51b8152602060048201526015602482015274125b9d985b1a5908189b1bd8dad8da185a5b881a59605a1b60448201526064016102dd565b6001600160a01b0381166108f15760405162461bcd60e51b815260206004820152601860248201527f496e76616c69642076657269666965722061646472657373000000000000000060448201526064016102dd565b60009182526001602052604090912080546001600160a01b0319166001600160a01b03909216919091179055565b32331461096e5760405162461bcd60e51b815260206004820181905260248201527f5374617274206d7573742062652063616c6c65642066726f6d20616e20454f4160448201526064016102dd565b600084815260046020526040902054156109ca5760405162461bcd60e51b815260206004820152601e60248201527f5472616e73616374696f6e20616c72656164792072656769737465726564000060448201526064016102dd565b60006109d6428561386f565b60008681526004602052604090819020829055519091507f77dab611ad9a24b763e2742f57749a0227393e0da76212d74fceb326b066142490610a2290879033908590889088906138b0565b60405180910390a15050505050565b610a458a8a8a8a8a8a8a8a8a8a60016116f3565b60008a8a6000818110610a5a57610a5a613525565b6020029190910135915050323314610ac55760405162461bcd60e51b815260206004820152602860248201527f5472616e73616374696f6e206d75737420626520696e737469676174656420626044820152677920616e20454f4160c01b60648201526084016102dd565b8060035414610b165760405162461bcd60e51b815260206004820152601f60248201527f54686973206973206e6f742074686520726f6f7420626c6f636b636861696e0060448201526064016102dd565b88886000818110610b2957610b29613525565b9050602002016020810190610b3e91906130f5565b6001600160a01b0316306001600160a01b031614610bb45760405162461bcd60e51b815260206004820152602d60248201527f526f6f7420626c6f636b636861696e2043424320636f6e74726163742077617360448201526c206e6f742074686973206f6e6560981b60648201526084016102dd565b6000806000606088886000818110610bce57610bce613525565b9050602002810190610be09190613585565b810190610bed91906138e9565b6000848152600460205260409020549397509195509350915080610c455760405162461bcd60e51b815260206004820152600f60248201526e43616c6c206e6f742061637469766560881b60448201526064016102dd565b6001811415610c8d5760405162461bcd60e51b815260206004820152601460248201527343616c6c20656e6465642028737563636573732960601b60448201526064016102dd565b6002811415610cd55760405162461bcd60e51b815260206004820152601460248201527343616c6c20656e64656420286661696c7572652960601b60448201526064016102dd565b80421115610cf957610ce685611b37565b610cee611b86565b505050505050610f1a565b6001600160a01b0384163214610d515760405162461bcd60e51b815260206004820152601e60248201527f454f4120646f6573206e6f74206d61746368207374617274206576656e74000060448201526064016102dd565b81516020830120604080516001808252818301909252600091816020016020820280368337019050509050610d9488610d8a8d8f61394b565b83858b6001611be7565b15610da6575050505050505050610f1a565b610dbb8482610db660018f6139be565b6120ba565b6040805160208082018b90528183018a90528251808303840181526060909201909252805191012060068190556000610df586848c61227b565b50905060005b600c54811015610ea0576000600c8281548110610e1a57610e1a613525565b60009182526020909120015460405163267ad75360e21b81528415156004820152602481018690526001600160a01b03909116915081906399eb5d4c90604401600060405180830381600087803b158015610e7457600080fd5b505af1158015610e88573d6000803e3d6000fd5b50505050508080610e9890613551565b915050610dfb565b5080610ead576002610eb0565b60015b60008a8152600460205260409081902091909155517fe6763dd99bf894d72f3499dd572aa42876eae7ae028c32fff21654e1bbc4c80790610eff908b9084909182521515602082015260400190565b60405180910390a1610f0f611b86565b505050505050505050505b50505050505050505050565b6000546001600160a01b03163314610f505760405162461bcd60e51b81526004016102dd906134f0565b6001600160a01b038116610fb55760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016102dd565b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b6110248c8c8c8c8c8c8c8c8c8c60016116f3565b60008c8c600081811061103957611039613525565b602002919091013591505032331461109e5760405162461bcd60e51b815260206004820152602260248201527f5365676d656e74206d7573742062652063616c6c65642066726f6d20616e20456044820152614f4160f01b60648201526084016102dd565b6000806060898960008181106110b6576110b6613525565b90506020028101906110c89190613585565b8101906110d591906138e9565b929550909350909150506001600160a01b03821632146111375760405162461bcd60e51b815260206004820152601e60248201527f454f4120646f6573206e6f74206d61746368207374617274206576656e74000060448201526064016102dd565b60008484888860405160200161115094939291906139d5565b60408051601f1981840301815291815281516020928301206000818152600590935291205490915060ff16156111d45760405162461bcd60e51b8152602060048201526024808201527f5365676d656e74207472616e73616374696f6e20616c726561647920657865636044820152631d5d195960e21b60648201526084016102dd565b6000908152600560209081526040909120805460ff19166001908117909155825191830191909120908a11156112a25761124e856112128c8e61394b565b89898080602002602001604051908101604052809392919081815260200183836020028082843760009201829052508893508b92509050611be7565b1561125d575050505050611385565b6112a282888880806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250610db69250600191508f90506139be565b6040805160208082018890528183018790528251808303840181526060909201909252805191012060068190555060006060611313848a8a808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152508c925061227b915050565b60405191935091507f86df4889cc0714742f804eb411c54569f17daedfcf415d5c81a12999948267a790611357908990899087908e908e90600c908a908a90613a13565b60405180910390a160018c11156113755761137061248a565b61137d565b61137d6124ea565b505050505050505b505050505050505050505050565b600b54600a5460009160609181106113ce575050600d805460ff191660019081179091556040805160208101909152600081529091506116bd565b6000600782815481106113e3576113e3613525565b9060005260206000200154905060006008838154811061140557611405613525565b6000918252602082200154600980546001600160a01b039092169350908590811061143257611432613525565b90600052602060002001805461144790613acc565b80601f016020809104026020016040519081016040528092919081815260200182805461147390613acc565b80156114c05780601f10611495576101008083540402835291602001916114c0565b820191906000526020600020905b8154815290600101906020018083116114a357829003601f168201915b50505050509050828a1415806114e85750816001600160a01b0316896001600160a01b031614155b80611531575061152f88888080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152508592506116c6915050565b155b156115b757600d805460ff1916600190811790915561155190859061386f565b600b556040517f8b5fc485a070cefca43e0a1d8cc72cf38dc31d5bf14f58cedcc59c73cac84e15906115909085908d9086908e9087908f908f90613b07565b60405180910390a160016040518060200160405280600081525095509550505050506116bd565b6000600a856115c581613551565b9650815481106115d7576115d7613525565b9060005260206000200180546115ec90613acc565b80601f016020809104026020016040519081016040528092919081815260200182805461161890613acc565b80156116655780601f1061163a57610100808354040283529160200191611665565b820191906000526020600020905b81548152906001019060200180831161164857829003601f168201915b5050505050905084600b819055507f971a379ee339d51e370a4733845f31c68e234014c8494ecedb867ae2cdc1ef688b8b8b8b856040516116aa959493929190613b61565b60405180910390a1600096509450505050505b94509492505050565b600081518351146116d9575060006116ed565b818051906020012083805190602001201490505b92915050565b89806117415760405162461bcd60e51b815260206004820152601a60248201527f4d757374206265206174206c65617374206f6e65206576656e7400000000000060448201526064016102dd565b8089146117ad5760405162461bcd60e51b815260206004820152603460248201527f4e756d626572206f6620626c6f636b636861696e2049647320616e6420636263604482015273082c8c8e4cae6e6cae640daeae6e840dac2e8c6d60631b60648201526084016102dd565b80871461182c5760405162461bcd60e51b815260206004820152604160248201527f4e756d626572206f6620626c6f636b636861696e2049647320616e642065766560448201527f6e742066756e6374696f6e207369676e617475726573206d757374206d6174636064820152600d60fb1b608482015260a4016102dd565b8085146118965760405162461bcd60e51b815260206004820152603260248201527f4e756d626572206f6620626c6f636b636861696e2049647320616e64206576656044820152710dce840c8c2e8c240daeae6e840dac2e8c6d60731b60648201526084016102dd565b8083146118f35760405162461bcd60e51b815260206004820152602560248201527f4e756d626572206f66206576656e747320616e64207369676e617475726573206044820152640dac2e8c6d60db1b60648201526084016102dd565b60005b81811015611b2857806119d357600083611930577fe6763dd99bf894d72f3499dd572aa42876eae7ae028c32fff21654e1bbc4c807611952565b7f77dab611ad9a24b763e2742f57749a0227393e0da76212d74fceb326b06614245b905089898381811061196657611966613525565b9050602002013581146119cd5760405162461bcd60e51b815260206004820152602960248201527f556e6578706563746564206669727374206576656e742066756e6374696f6e206044820152687369676e617475726560b81b60648201526084016102dd565b50611a6d565b8888828181106119e5576119e5613525565b905060200201357f86df4889cc0714742f804eb411c54569f17daedfcf415d5c81a12999948267a714611a6d5760405162461bcd60e51b815260206004820152602a60248201527f4576656e742066756e6374696f6e207369676e6174757265206e6f7420666f726044820152690818481cd959db595b9d60b21b60648201526084016102dd565b611b168d8d83818110611a8257611a82613525565b905060200201358c8c84818110611a9b57611a9b613525565b9050602002016020810190611ab091906130f5565b8b8b85818110611ac257611ac2613525565b905060200201358a8a86818110611adb57611adb613525565b9050602002810190611aed9190613585565b8a8a88818110611aff57611aff613525565b9050602002810190611b119190613585565b612513565b80611b2081613551565b9150506118f6565b50505050505050505050505050565b6000818152600460209081526040808320600290558051848152918201929092527fe6763dd99bf894d72f3499dd572aa42876eae7ae028c32fff21654e1bbc4c807910160405180910390a150565b611b9260076000612f81565b611b9e60086000612f81565b611baa60096000612fa2565b611bb6600a6000612fa2565b6000600b55600d5460ff1615611bd157600d805460ff191690555b600660009055600c6000611be59190612f81565b565b60008460018651611bf891906139be565b81518110611c0857611c08613525565b6020026020010151600014611c505760405162461bcd60e51b815260206004820152600e60248201526d24b73b30b634b21031b0b63632b960911b60448201526064016102dd565b60015b86518110156120aa57600080606080600060608c8781518110611c7857611c78613525565b6020026020010151806020019051810190611c939190613c69565b949b5092995090975095509350915050898614611d0c5760405162461bcd60e51b815260206004820152603160248201527f5472616e73616374696f6e2069642066726f6d207365676d656e7420616e64206044820152700e4dedee840c8de40dcdee840dac2e8c6d607b1b60648201526084016102dd565b848b14611d715760405162461bcd60e51b815260206004820152602d60248201527f43616c6c2067726170682066726f6d207365676d656e7420616e6420726f6f7460448201526c040c8de40dcdee840dac2e8c6d609b1b60648201526084016102dd565b8b5184511480611d8d57508b51611d8990600161386f565b8451145b611dd95760405162461bcd60e51b815260206004820181905260248201527f4261642063616c6c2070617468206c656e67746820666f72207365676d656e7460448201526064016102dd565b8b51611de690600161386f565b84511415611e64578360018551611dfd91906139be565b81518110611e0d57611e0d613525565b6020026020010151600014611e645760405162461bcd60e51b815260206004820181905260248201527f46696e616c2063616c6c207061746820656c656d656e74206e6f74207a65726f60448201526064016102dd565b60005b60018d51611e7591906139be565b811015611f1f578c8181518110611e8e57611e8e613525565b6020026020010151858281518110611ea857611ea8613525565b602002602001015114611f0d5760405162461bcd60e51b815260206004820152602760248201527f5365676d656e742063616c6c207061746820646f6573206e6f74206d617463686044820152661031b0b63632b960c91b60648201526084016102dd565b80611f1781613551565b915050611e67565b50868460018e51611f3091906139be565b81518110611f4057611f40613525565b602002602001015114611f9f5760405162461bcd60e51b815260206004820152602160248201527f5365676d656e74206576656e7473206172726179206f7574206f66206f7264656044820152603960f91b60648201526084016102dd565b8161204d578815611fb857611fb38a611b37565b612035565b7f86df4889cc0714742f804eb411c54569f17daedfcf415d5c81a12999948267a78e8b8d8f6000604051908082528060200260200182016040528015612008578160200160208202803683370190505b506040805160008082526020820190925260405161202c9796959493929190613dab565b60405180910390a15b61203d61248a565b60019750505050505050506120b0565b600a80546001810182556000919091528151612090917fc65a7bb8d6351c1cf70c95a316cc6a92839c986682d98bc35f958f4883f9d2a801906020840190612fc0565b5050505050505080806120a290613551565b915050611c53565b50600090505b9695505050505050565b81516000816001600160401b038111156120d6576120d661360e565b6040519080825280602002602001820160405280156120ff578160200160208202803683370190505b50905060005b6121106001846139be565b8110156121605784818151811061212957612129613525565b602002602001015182828151811061214357612143613525565b60209081029190910101528061215881613551565b915050612105565b5060015b8381116105635780826121786001866139be565b8151811061218857612188613525565b60200260200101818152505060008060006121a5898660016126ac565b6007805460018082019092557fa66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c68801849055600880548083019091557ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee30180546001600160a01b0319166001600160a01b03851617905560098054918201815560005281519396509194509250612264917f6e1540171b6c0c960b71a7020d9f60077f6af931a8bbf590da0223dacf75c7af909101906020840190612fc0565b50505050808061227390613551565b915050612164565b600060606000806000612290888860016126ac565b92509250925060035483146123045760405162461bcd60e51b815260206004820152603460248201527f54617267657420626c6f636b636861696e20696420646f6573206e6f74206d616044820152731d18da081b5e48189b1bd8dad8da185a5b881a5960621b60648201526084016102dd565b6000808851600114801561233257508860008151811061232657612326613525565b60200260200101516000145b6123575760006123418a612933565b905061234f8b8260006126ac565b509093509150505b6000612365848a8585612b16565b905060006060866001600160a01b0316836040516123839190613e31565b6000604051808303816000865af19150503d80600081146123c0576040519150601f19603f3d011682016040523d82523d6000602084013e6123c5565b606091505b50909250905081612410577f38e7ccc4b02b2da681f96e62aef89b5c6d4115f501f8d42430bb2f5f2fa981a66123fa82612b7c565b6040516124079190613e4d565b60405180910390a15b600b54600a541461246557600a54600b546040517fce3bac95f99adf24dc6d7d8a7264b6c40b211c40e0f79a78482298c0867fae9b9261245892908252602082015260400190565b60405180910390a1600091505b600d5460ff166124755781612478565b60005b9d909c509a5050505050505050505050565b61249660076000612f81565b6124a260086000612f81565b6124ae60096000612fa2565b600660009055600c60006124c29190612f81565b6124ce600a6000612fa2565b6000600b55600d5460ff1615611be557600d805460ff19169055565b600d5460ff1615611bd157600d805460ff19169055600660009055600c6000611be59190612f81565b6000878152600160205260409020546001600160a01b0316806125865760405162461bcd60e51b815260206004820152602560248201527f4e6f207265676973746572656420766572696669657220666f7220626c6f636b60448201526431b430b4b760d91b60648201526084016102dd565b6000888152600260205260409020546001600160a01b038881169116146125fd5760405162461bcd60e51b815260206004820152602560248201527f44617461206e6f7420656d697474656420627920617070726f76656420636f6e6044820152641d1c9858dd60da1b60648201526084016102dd565b60008888888888604051602001612618959493929190613e60565b60408051601f198184030181529082905263260e748160e11b825291506001600160a01b03831690634c1ce9029061265c908c908b9086908a908a90600401613e9a565b60206040518083038186803b15801561267457600080fd5b505afa158015612688573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f1a9190613ecc565b600080606060006126be876000612c2d565b905060ff8116156127115760405162461bcd60e51b815260206004820152601a60248201527f496e636f727265637420656e636f64696e672076657273696f6e00000000000060448201526064016102dd565b600160005b87518110156128275760008061272c8b85612c2d565b905060ff81166127b25760018a5161274491906139be565b83146127ad5760405162461bcd60e51b815260206004820152603260248201527f52656163686564206c6561662066756e6374696f6e206275742074686572652060448201527134b99036b7b9329031b0b636103830ba341760711b60648201526084016102dd565b612806565b60008a84815181106127c6576127c6613525565b602002602001015190506127fc8c60016004846127e39190613ee9565b6127ed908961386f565b6127f7919061386f565b612c93565b63ffffffff169250505b612810828561386f565b93505050808061281f90613551565b915050612716565b50866001885161283791906139be565b8151811061284757612847613525565b60200260200101516000146128a85760006128628983612c2d565b905060ff81161561289857600061287e8a6127f760018661386f565b63ffffffff169050612890818461386f565b9250506128a6565b6128a360018361386f565b91505b505b6128b28882612cf9565b94506128bf60208261386f565b90506128ce8882016014015190565b93508515612915576128e160148261386f565b905060006128ef8983612d5f565b90506128fc60028361386f565b915061290d89838361ffff16612dc5565b935050612928565b6040518060200160405280600081525092505b505093509350939050565b80516060908190836129466001836139be565b8151811061295657612956613525565b6020026020010151600014612a3757806001600160401b0381111561297d5761297d61360e565b6040519080825280602002602001820160405280156129a6578160200160208202803683370190505b50915060005b6129b76001836139be565b811015612a07578481815181106129d0576129d0613525565b60200260200101518382815181106129ea576129ea613525565b6020908102919091010152806129ff81613551565b9150506129ac565b50600082612a166001846139be565b81518110612a2657612a26613525565b602002602001018181525050612b0f565b612a426001826139be565b6001600160401b03811115612a5957612a5961360e565b604051908082528060200260200182016040528015612a82578160200160208202803683370190505b50915060005b612a936002836139be565b811015612ae357848181518110612aac57612aac613525565b6020026020010151838281518110612ac657612ac6613525565b602090810291909101015280612adb81613551565b915050612a88565b50600082612af26002846139be565b81518110612b0257612b02613525565b6020026020010181815250505b5092915050565b6040805160208101859052908101839052606082811b6bffffffffffffffffffffffff19168183015290859060740160408051601f1981840301815290829052612b639291602001613f08565b6040516020818303038152906040529050949350505050565b6060602482511015612bb857612b928251612e84565b604051602001612ba29190613f37565b6040516020818303038152906040529050919050565b81516004909201916044118015612c1257600083806020019051810190612bdf919061356c565b9050612bea81612e84565b604051602001612bfa9190613f8d565b60405160208183030381529060405292505050919050565b82806020019051810190612c269190613fbc565b9392505050565b6000612c3a82600161386f565b83511015612c8a5760405162461bcd60e51b815260206004820152601c60248201527f736c6963696e67206f7574206f662072616e6765202875696e7438290000000060448201526064016102dd565b50016001015190565b6000612ca082600461386f565b83511015612cf05760405162461bcd60e51b815260206004820152601d60248201527f736c6963696e67206f7574206f662072616e6765202875696e7433322900000060448201526064016102dd565b50016004015190565b6000612d0682602061386f565b83511015612d565760405162461bcd60e51b815260206004820152601e60248201527f736c6963696e67206f7574206f662072616e6765202875696e7432353629000060448201526064016102dd565b50016020015190565b6000612d6c82600261386f565b83511015612dbc5760405162461bcd60e51b815260206004820152601d60248201527f736c6963696e67206f7574206f662072616e6765202875696e7431362900000060448201526064016102dd565b50016002015190565b6060612dd1828461386f565b84511015612e165760405162461bcd60e51b815260206004820152601260248201527152656164206f7574206f6620626f756e647360701b60448201526064016102dd565b606082158015612e3157604051915060208201604052612e7b565b6040519150601f8416801560200281840101858101878315602002848b0101015b81831015612e6a578051835260209283019201612e52565b5050858452601f01601f1916604052505b50949350505050565b606081612ea85750506040805180820190915260018152600360fc1b602082015290565b8160005b8115612ed25780612ebc81613551565b9150612ecb9050600a8361401a565b9150612eac565b6000816001600160401b03811115612eec57612eec61360e565b6040519080825280601f01601f191660200182016040528015612f16576020820181803683370190505b5090505b841561049357612f2b6001836139be565b9150612f38600a8661402e565b612f4390603061386f565b60f81b818381518110612f5857612f58613525565b60200101906001600160f81b031916908160001a905350612f7a600a8661401a565b9450612f1a565b5080546000825590600052602060002090810190612f9f9190613044565b50565b5080546000825590600052602060002090810190612f9f9190613059565b828054612fcc90613acc565b90600052602060002090601f016020900481019282612fee5760008555613034565b82601f1061300757805160ff1916838001178555613034565b82800160010185558215613034579182015b82811115613034578251825591602001919060010190613019565b50613040929150613044565b5090565b5b808211156130405760008155600101613045565b8082111561304057600061306d8282613076565b50600101613059565b50805461308290613acc565b6000825580601f10613092575050565b601f016020900490600052602060002090810190612f9f9190613044565b6001600160a01b0381168114612f9f57600080fd5b600080604083850312156130d857600080fd5b8235915060208301356130ea816130b0565b809150509250929050565b60006020828403121561310757600080fd5b8135612c26816130b0565b60008083601f84011261312457600080fd5b5081356001600160401b0381111561313b57600080fd5b60208301915083602082850101111561315357600080fd5b9250929050565b6000806000806060858703121561317057600080fd5b843593506020850135613182816130b0565b925060408501356001600160401b0381111561319d57600080fd5b6131a987828801613112565b95989497509550505050565b60005b838110156131d05781810151838201526020016131b8565b838111156131df576000848401525b50505050565b600081518084526131fd8160208601602086016131b5565b601f01601f19169290920160200192915050565b821515815260406020820152600061049360408301846131e5565b60006020828403121561323e57600080fd5b5035919050565b60008083601f84011261325757600080fd5b5081356001600160401b0381111561326e57600080fd5b6020830191508360208260051b850101111561315357600080fd5b60008060008060008060008060008060a08b8d0312156132a857600080fd5b8a356001600160401b03808211156132bf57600080fd5b6132cb8e838f01613245565b909c509a5060208d01359150808211156132e457600080fd5b6132f08e838f01613245565b909a50985060408d013591508082111561330957600080fd5b6133158e838f01613245565b909850965060608d013591508082111561332e57600080fd5b61333a8e838f01613245565b909650945060808d013591508082111561335357600080fd5b506133608d828e01613245565b915080935050809150509295989b9194979a5092959850565b6000806000806060858703121561338f57600080fd5b843593506020850135925060408501356001600160401b0381111561319d57600080fd5b60008060008060008060008060008060008060c08d8f0312156133d557600080fd5b6001600160401b038d3511156133ea57600080fd5b6133f78e8e358f01613245565b909c509a506001600160401b0360208e0135111561341457600080fd5b6134248e60208f01358f01613245565b909a5098506001600160401b0360408e0135111561344157600080fd5b6134518e60408f01358f01613245565b90985096506001600160401b0360608e0135111561346e57600080fd5b61347e8e60608f01358f01613245565b90965094506001600160401b0360808e0135111561349b57600080fd5b6134ab8e60808f01358f01613245565b90945092506001600160401b0360a08e013511156134c857600080fd5b6134d88e60a08f01358f01613245565b81935080925050509295989b509295989b509295989b565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b60006000198214156135655761356561353b565b5060010190565b60006020828403121561357e57600080fd5b5051919050565b6000808335601e1984360301811261359c57600080fd5b8301803591506001600160401b038211156135b657600080fd5b60200191503681900382131561315357600080fd5b8015158114612f9f57600080fd5b80356135e4816135cb565b919050565b600080604083850312156135fc57600080fd5b8235915060208301356130ea816135cb565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b038111828210171561364c5761364c61360e565b604052919050565b60006001600160401b0382111561366d5761366d61360e565b5060051b60200190565b600082601f83011261368857600080fd5b8135602061369d61369883613654565b613624565b82815260059290921b840181019181810190868411156136bc57600080fd5b8286015b848110156136e05780356136d3816130b0565b83529183019183016136c0565b509695505050505050565b60006001600160401b038211156137045761370461360e565b50601f01601f191660200190565b600082601f83011261372357600080fd5b8135613731613698826136eb565b81815284602083860101111561374657600080fd5b816020850160208301376000918101602001919091529392505050565b600080600080600080600060e0888a03121561377e57600080fd5b8735965060208089013596506040890135955060608901356001600160401b03808211156137ab57600080fd5b818b0191508b601f8301126137bf57600080fd5b81356137cd61369882613654565b81815260059190911b8301840190848101908e8311156137ec57600080fd5b938501935b8285101561380a578435825293850193908501906137f1565b9850505060808b013592508083111561382257600080fd5b61382e8c848d01613677565b955061383c60a08c016135d9565b945060c08b013592508083111561385257600080fd5b50506138608a828b01613712565b91505092959891949750929550565b600082198211156138825761388261353b565b500190565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b85815260018060a01b03851660208201528360408201526080606082015260006138de608083018486613887565b979650505050505050565b600080600080608085870312156138ff57600080fd5b843593506020850135613911816130b0565b92506040850135915060608501356001600160401b0381111561393357600080fd5b61393f87828801613712565b91505092959194509250565b600061395961369884613654565b80848252602080830192508560051b85013681111561397757600080fd5b855b818110156139b25780356001600160401b038111156139985760008081fd5b6139a436828a01613712565b865250938201938201613979565b50919695505050505050565b6000828210156139d0576139d061353b565b500390565b8481526020810184905260006001600160fb1b038311156139f557600080fd5b8260051b808560408501376000920160400191825250949350505050565b88815260006020898184015288604084015260e060608401528660e084015261010060018060fb1b03881115613a4857600080fd5b8760051b808a8387013784018481038201608086015287549181018290526000888152838120610120909201925b80821015613a9f5782546001600160a01b03168452928401926001928301929190910190613a76565b50505085151560a085015283810360c0850152613abc81866131e5565b9c9b505050505050505050505050565b600181811c90821680613ae057607f821691505b60208210811415613b0157634e487b7160e01b600052602260045260246000fd5b50919050565b878152602081018790526001600160a01b0386811660408301528516606082015260c060808201819052600090613b40908301866131e5565b82810360a0840152613b53818587613887565b9a9950505050505050505050565b8581526001600160a01b0385166020820152608060408201819052600090613b8c9083018587613887565b8281036060840152613b9e81856131e5565b98975050505050505050565b600082601f830112613bbb57600080fd5b81516020613bcb61369883613654565b82815260059290921b84018101918181019086841115613bea57600080fd5b8286015b848110156136e0578051613c01816130b0565b8352918301918301613bee565b80516135e4816135cb565b6000613c27613698846136eb565b9050828152838383011115613c3b57600080fd5b612c268360208301846131b5565b600082601f830112613c5a57600080fd5b612c2683835160208501613c19565b600080600080600080600060e0888a031215613c8457600080fd5b8751965060208089015196506040890151955060608901516001600160401b0380821115613cb157600080fd5b818b0191508b601f830112613cc557600080fd5b8151613cd361369882613654565b81815260059190911b8301840190848101908e831115613cf257600080fd5b938501935b82851015613d1057845182529385019390850190613cf7565b60808e01519099509450505080831115613d2957600080fd5b613d358c848d01613baa565b9550613d4360a08c01613c0e565b945060c08b0151925080831115613d5957600080fd5b50506138608a828b01613c49565b600081518084526020808501945080840160005b83811015613da05781516001600160a01b031687529582019590820190600101613d7b565b509495945050505050565b600060e082018983526020898185015288604085015260e0606085015281885180845261010086019150828a01935060005b81811015613df957845183529383019391830191600101613ddd565b50508481036080860152613e0d8189613d67565b92505050613e1f60a084018615159052565b82810360c0840152613b5381856131e5565b60008251613e438184602087016131b5565b9190910192915050565b602081526000612c2660208301846131e5565b8581526bffffffffffffffffffffffff198560601b1660208201528360348201528183605483013760009101605401908152949350505050565b858152846020820152608060408201526000613eb960808301866131e5565b8281036060840152613b9e818587613887565b600060208284031215613ede57600080fd5b8151612c26816135cb565b6000816000190483118215151615613f0357613f0361353b565b500290565b60008351613f1a8184602088016131b5565b835190830190613f2e8183602088016131b5565b01949350505050565b7f52657665727420666f7220756e6b6e6f776e206572726f722e204572726f722081526703632b733ba341d160c51b602082015260008251613f808160288501602087016131b5565b9190910160280192915050565b6602830b734b19d160cd1b815260008251613faf8160078501602087016131b5565b9190910160070192915050565b600060208284031215613fce57600080fd5b81516001600160401b03811115613fe457600080fd5b8201601f81018413613ff557600080fd5b61049384825160208401613c19565b634e487b7160e01b600052601260045260246000fd5b60008261402957614029614004565b500490565b60008261403d5761403d614004565b50069056fea2646970667358221220c0d6afea0715e8554983ff3b53d8b372bd5be9e56e0eb4a826d0ae4bcd9d5b5564736f6c63430008090033",
}

// GpactABI is the input ABI used to generate the binding from.
// Deprecated: Use GpactMetaData.ABI instead.
var GpactABI = GpactMetaData.ABI

// GpactBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use GpactMetaData.Bin instead.
var GpactBin = GpactMetaData.Bin

// DeployGpact deploys a new Ethereum contract, binding an instance of Gpact to it.
func DeployGpact(auth *bind.TransactOpts, backend bind.ContractBackend, _myBlockchainId *big.Int) (common.Address, *types.Transaction, *Gpact, error) {
	parsed, err := GpactMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(GpactBin), backend, _myBlockchainId)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Gpact{GpactCaller: GpactCaller{contract: contract}, GpactTransactor: GpactTransactor{contract: contract}, GpactFilterer: GpactFilterer{contract: contract}}, nil
}

// Gpact is an auto generated Go binding around an Ethereum contract.
type Gpact struct {
	GpactCaller     // Read-only binding to the contract
	GpactTransactor // Write-only binding to the contract
	GpactFilterer   // Log filterer for contract events
}

// GpactCaller is an auto generated read-only Go binding around an Ethereum contract.
type GpactCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// GpactTransactor is an auto generated write-only Go binding around an Ethereum contract.
type GpactTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// GpactFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type GpactFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// GpactSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type GpactSession struct {
	Contract     *Gpact            // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// GpactCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type GpactCallerSession struct {
	Contract *GpactCaller  // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts // Call options to use throughout this session
}

// GpactTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type GpactTransactorSession struct {
	Contract     *GpactTransactor  // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// GpactRaw is an auto generated low-level Go binding around an Ethereum contract.
type GpactRaw struct {
	Contract *Gpact // Generic contract binding to access the raw methods on
}

// GpactCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type GpactCallerRaw struct {
	Contract *GpactCaller // Generic read-only contract binding to access the raw methods on
}

// GpactTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type GpactTransactorRaw struct {
	Contract *GpactTransactor // Generic write-only contract binding to access the raw methods on
}

// NewGpact creates a new instance of Gpact, bound to a specific deployed contract.
func NewGpact(address common.Address, backend bind.ContractBackend) (*Gpact, error) {
	contract, err := bindGpact(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Gpact{GpactCaller: GpactCaller{contract: contract}, GpactTransactor: GpactTransactor{contract: contract}, GpactFilterer: GpactFilterer{contract: contract}}, nil
}

// NewGpactCaller creates a new read-only instance of Gpact, bound to a specific deployed contract.
func NewGpactCaller(address common.Address, caller bind.ContractCaller) (*GpactCaller, error) {
	contract, err := bindGpact(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &GpactCaller{contract: contract}, nil
}

// NewGpactTransactor creates a new write-only instance of Gpact, bound to a specific deployed contract.
func NewGpactTransactor(address common.Address, transactor bind.ContractTransactor) (*GpactTransactor, error) {
	contract, err := bindGpact(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &GpactTransactor{contract: contract}, nil
}

// NewGpactFilterer creates a new log filterer instance of Gpact, bound to a specific deployed contract.
func NewGpactFilterer(address common.Address, filterer bind.ContractFilterer) (*GpactFilterer, error) {
	contract, err := bindGpact(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &GpactFilterer{contract: contract}, nil
}

// bindGpact binds a generic wrapper to an already deployed contract.
func bindGpact(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(GpactABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Gpact *GpactRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Gpact.Contract.GpactCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Gpact *GpactRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Gpact.Contract.GpactTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Gpact *GpactRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Gpact.Contract.GpactTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Gpact *GpactCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Gpact.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Gpact *GpactTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Gpact.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Gpact *GpactTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Gpact.Contract.contract.Transact(opts, method, params...)
}

// ActiveCallCrosschainRootTxId is a free data retrieval call binding the contract method 0x3193c08b.
//
// Solidity: function activeCallCrosschainRootTxId() view returns(bytes32)
func (_Gpact *GpactCaller) ActiveCallCrosschainRootTxId(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _Gpact.contract.Call(opts, &out, "activeCallCrosschainRootTxId")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// ActiveCallCrosschainRootTxId is a free data retrieval call binding the contract method 0x3193c08b.
//
// Solidity: function activeCallCrosschainRootTxId() view returns(bytes32)
func (_Gpact *GpactSession) ActiveCallCrosschainRootTxId() ([32]byte, error) {
	return _Gpact.Contract.ActiveCallCrosschainRootTxId(&_Gpact.CallOpts)
}

// ActiveCallCrosschainRootTxId is a free data retrieval call binding the contract method 0x3193c08b.
//
// Solidity: function activeCallCrosschainRootTxId() view returns(bytes32)
func (_Gpact *GpactCallerSession) ActiveCallCrosschainRootTxId() ([32]byte, error) {
	return _Gpact.Contract.ActiveCallCrosschainRootTxId(&_Gpact.CallOpts)
}

// GetActiveCallCrosschainRootTxId is a free data retrieval call binding the contract method 0x7bf37a09.
//
// Solidity: function getActiveCallCrosschainRootTxId() view returns(bytes32)
func (_Gpact *GpactCaller) GetActiveCallCrosschainRootTxId(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _Gpact.contract.Call(opts, &out, "getActiveCallCrosschainRootTxId")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// GetActiveCallCrosschainRootTxId is a free data retrieval call binding the contract method 0x7bf37a09.
//
// Solidity: function getActiveCallCrosschainRootTxId() view returns(bytes32)
func (_Gpact *GpactSession) GetActiveCallCrosschainRootTxId() ([32]byte, error) {
	return _Gpact.Contract.GetActiveCallCrosschainRootTxId(&_Gpact.CallOpts)
}

// GetActiveCallCrosschainRootTxId is a free data retrieval call binding the contract method 0x7bf37a09.
//
// Solidity: function getActiveCallCrosschainRootTxId() view returns(bytes32)
func (_Gpact *GpactCallerSession) GetActiveCallCrosschainRootTxId() ([32]byte, error) {
	return _Gpact.Contract.GetActiveCallCrosschainRootTxId(&_Gpact.CallOpts)
}

// IsSingleBlockchainCall is a free data retrieval call binding the contract method 0xb4c3b756.
//
// Solidity: function isSingleBlockchainCall() view returns(bool)
func (_Gpact *GpactCaller) IsSingleBlockchainCall(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _Gpact.contract.Call(opts, &out, "isSingleBlockchainCall")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsSingleBlockchainCall is a free data retrieval call binding the contract method 0xb4c3b756.
//
// Solidity: function isSingleBlockchainCall() view returns(bool)
func (_Gpact *GpactSession) IsSingleBlockchainCall() (bool, error) {
	return _Gpact.Contract.IsSingleBlockchainCall(&_Gpact.CallOpts)
}

// IsSingleBlockchainCall is a free data retrieval call binding the contract method 0xb4c3b756.
//
// Solidity: function isSingleBlockchainCall() view returns(bool)
func (_Gpact *GpactCallerSession) IsSingleBlockchainCall() (bool, error) {
	return _Gpact.Contract.IsSingleBlockchainCall(&_Gpact.CallOpts)
}

// MyBlockchainId is a free data retrieval call binding the contract method 0x439160df.
//
// Solidity: function myBlockchainId() view returns(uint256)
func (_Gpact *GpactCaller) MyBlockchainId(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Gpact.contract.Call(opts, &out, "myBlockchainId")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// MyBlockchainId is a free data retrieval call binding the contract method 0x439160df.
//
// Solidity: function myBlockchainId() view returns(uint256)
func (_Gpact *GpactSession) MyBlockchainId() (*big.Int, error) {
	return _Gpact.Contract.MyBlockchainId(&_Gpact.CallOpts)
}

// MyBlockchainId is a free data retrieval call binding the contract method 0x439160df.
//
// Solidity: function myBlockchainId() view returns(uint256)
func (_Gpact *GpactCallerSession) MyBlockchainId() (*big.Int, error) {
	return _Gpact.Contract.MyBlockchainId(&_Gpact.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Gpact *GpactCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Gpact.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Gpact *GpactSession) Owner() (common.Address, error) {
	return _Gpact.Contract.Owner(&_Gpact.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Gpact *GpactCallerSession) Owner() (common.Address, error) {
	return _Gpact.Contract.Owner(&_Gpact.CallOpts)
}

// RootTransactionInformation is a free data retrieval call binding the contract method 0xf830b7b4.
//
// Solidity: function rootTransactionInformation(uint256 ) view returns(uint256)
func (_Gpact *GpactCaller) RootTransactionInformation(opts *bind.CallOpts, arg0 *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _Gpact.contract.Call(opts, &out, "rootTransactionInformation", arg0)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// RootTransactionInformation is a free data retrieval call binding the contract method 0xf830b7b4.
//
// Solidity: function rootTransactionInformation(uint256 ) view returns(uint256)
func (_Gpact *GpactSession) RootTransactionInformation(arg0 *big.Int) (*big.Int, error) {
	return _Gpact.Contract.RootTransactionInformation(&_Gpact.CallOpts, arg0)
}

// RootTransactionInformation is a free data retrieval call binding the contract method 0xf830b7b4.
//
// Solidity: function rootTransactionInformation(uint256 ) view returns(uint256)
func (_Gpact *GpactCallerSession) RootTransactionInformation(arg0 *big.Int) (*big.Int, error) {
	return _Gpact.Contract.RootTransactionInformation(&_Gpact.CallOpts, arg0)
}

// SegmentTransactionExecuted is a free data retrieval call binding the contract method 0x877ba01d.
//
// Solidity: function segmentTransactionExecuted(bytes32 ) view returns(bool)
func (_Gpact *GpactCaller) SegmentTransactionExecuted(opts *bind.CallOpts, arg0 [32]byte) (bool, error) {
	var out []interface{}
	err := _Gpact.contract.Call(opts, &out, "segmentTransactionExecuted", arg0)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// SegmentTransactionExecuted is a free data retrieval call binding the contract method 0x877ba01d.
//
// Solidity: function segmentTransactionExecuted(bytes32 ) view returns(bool)
func (_Gpact *GpactSession) SegmentTransactionExecuted(arg0 [32]byte) (bool, error) {
	return _Gpact.Contract.SegmentTransactionExecuted(&_Gpact.CallOpts, arg0)
}

// SegmentTransactionExecuted is a free data retrieval call binding the contract method 0x877ba01d.
//
// Solidity: function segmentTransactionExecuted(bytes32 ) view returns(bool)
func (_Gpact *GpactCallerSession) SegmentTransactionExecuted(arg0 [32]byte) (bool, error) {
	return _Gpact.Contract.SegmentTransactionExecuted(&_Gpact.CallOpts, arg0)
}

// AddRemoteCrosschainControl is a paid mutator transaction binding the contract method 0x19836dc7.
//
// Solidity: function addRemoteCrosschainControl(uint256 _blockchainId, address _cbc) returns()
func (_Gpact *GpactTransactor) AddRemoteCrosschainControl(opts *bind.TransactOpts, _blockchainId *big.Int, _cbc common.Address) (*types.Transaction, error) {
	return _Gpact.contract.Transact(opts, "addRemoteCrosschainControl", _blockchainId, _cbc)
}

// AddRemoteCrosschainControl is a paid mutator transaction binding the contract method 0x19836dc7.
//
// Solidity: function addRemoteCrosschainControl(uint256 _blockchainId, address _cbc) returns()
func (_Gpact *GpactSession) AddRemoteCrosschainControl(_blockchainId *big.Int, _cbc common.Address) (*types.Transaction, error) {
	return _Gpact.Contract.AddRemoteCrosschainControl(&_Gpact.TransactOpts, _blockchainId, _cbc)
}

// AddRemoteCrosschainControl is a paid mutator transaction binding the contract method 0x19836dc7.
//
// Solidity: function addRemoteCrosschainControl(uint256 _blockchainId, address _cbc) returns()
func (_Gpact *GpactTransactorSession) AddRemoteCrosschainControl(_blockchainId *big.Int, _cbc common.Address) (*types.Transaction, error) {
	return _Gpact.Contract.AddRemoteCrosschainControl(&_Gpact.TransactOpts, _blockchainId, _cbc)
}

// AddToListOfLockedContracts is a paid mutator transaction binding the contract method 0x39ce107e.
//
// Solidity: function addToListOfLockedContracts(address _contractToLock) returns()
func (_Gpact *GpactTransactor) AddToListOfLockedContracts(opts *bind.TransactOpts, _contractToLock common.Address) (*types.Transaction, error) {
	return _Gpact.contract.Transact(opts, "addToListOfLockedContracts", _contractToLock)
}

// AddToListOfLockedContracts is a paid mutator transaction binding the contract method 0x39ce107e.
//
// Solidity: function addToListOfLockedContracts(address _contractToLock) returns()
func (_Gpact *GpactSession) AddToListOfLockedContracts(_contractToLock common.Address) (*types.Transaction, error) {
	return _Gpact.Contract.AddToListOfLockedContracts(&_Gpact.TransactOpts, _contractToLock)
}

// AddToListOfLockedContracts is a paid mutator transaction binding the contract method 0x39ce107e.
//
// Solidity: function addToListOfLockedContracts(address _contractToLock) returns()
func (_Gpact *GpactTransactorSession) AddToListOfLockedContracts(_contractToLock common.Address) (*types.Transaction, error) {
	return _Gpact.Contract.AddToListOfLockedContracts(&_Gpact.TransactOpts, _contractToLock)
}

// AddVerifier is a paid mutator transaction binding the contract method 0xb2832096.
//
// Solidity: function addVerifier(uint256 _blockchainId, address _verifier) returns()
func (_Gpact *GpactTransactor) AddVerifier(opts *bind.TransactOpts, _blockchainId *big.Int, _verifier common.Address) (*types.Transaction, error) {
	return _Gpact.contract.Transact(opts, "addVerifier", _blockchainId, _verifier)
}

// AddVerifier is a paid mutator transaction binding the contract method 0xb2832096.
//
// Solidity: function addVerifier(uint256 _blockchainId, address _verifier) returns()
func (_Gpact *GpactSession) AddVerifier(_blockchainId *big.Int, _verifier common.Address) (*types.Transaction, error) {
	return _Gpact.Contract.AddVerifier(&_Gpact.TransactOpts, _blockchainId, _verifier)
}

// AddVerifier is a paid mutator transaction binding the contract method 0xb2832096.
//
// Solidity: function addVerifier(uint256 _blockchainId, address _verifier) returns()
func (_Gpact *GpactTransactorSession) AddVerifier(_blockchainId *big.Int, _verifier common.Address) (*types.Transaction, error) {
	return _Gpact.Contract.AddVerifier(&_Gpact.TransactOpts, _blockchainId, _verifier)
}

// CrossBlockchainCall is a paid mutator transaction binding the contract method 0x92b2c335.
//
// Solidity: function crossBlockchainCall(uint256 _blockchainId, address _contract, bytes _functionCallData) returns()
func (_Gpact *GpactTransactor) CrossBlockchainCall(opts *bind.TransactOpts, _blockchainId *big.Int, _contract common.Address, _functionCallData []byte) (*types.Transaction, error) {
	return _Gpact.contract.Transact(opts, "crossBlockchainCall", _blockchainId, _contract, _functionCallData)
}

// CrossBlockchainCall is a paid mutator transaction binding the contract method 0x92b2c335.
//
// Solidity: function crossBlockchainCall(uint256 _blockchainId, address _contract, bytes _functionCallData) returns()
func (_Gpact *GpactSession) CrossBlockchainCall(_blockchainId *big.Int, _contract common.Address, _functionCallData []byte) (*types.Transaction, error) {
	return _Gpact.Contract.CrossBlockchainCall(&_Gpact.TransactOpts, _blockchainId, _contract, _functionCallData)
}

// CrossBlockchainCall is a paid mutator transaction binding the contract method 0x92b2c335.
//
// Solidity: function crossBlockchainCall(uint256 _blockchainId, address _contract, bytes _functionCallData) returns()
func (_Gpact *GpactTransactorSession) CrossBlockchainCall(_blockchainId *big.Int, _contract common.Address, _functionCallData []byte) (*types.Transaction, error) {
	return _Gpact.Contract.CrossBlockchainCall(&_Gpact.TransactOpts, _blockchainId, _contract, _functionCallData)
}

// CrossBlockchainCallReturnsUint256 is a paid mutator transaction binding the contract method 0x8e22d534.
//
// Solidity: function crossBlockchainCallReturnsUint256(uint256 _blockchainId, address _contract, bytes _functionCallData) returns(uint256)
func (_Gpact *GpactTransactor) CrossBlockchainCallReturnsUint256(opts *bind.TransactOpts, _blockchainId *big.Int, _contract common.Address, _functionCallData []byte) (*types.Transaction, error) {
	return _Gpact.contract.Transact(opts, "crossBlockchainCallReturnsUint256", _blockchainId, _contract, _functionCallData)
}

// CrossBlockchainCallReturnsUint256 is a paid mutator transaction binding the contract method 0x8e22d534.
//
// Solidity: function crossBlockchainCallReturnsUint256(uint256 _blockchainId, address _contract, bytes _functionCallData) returns(uint256)
func (_Gpact *GpactSession) CrossBlockchainCallReturnsUint256(_blockchainId *big.Int, _contract common.Address, _functionCallData []byte) (*types.Transaction, error) {
	return _Gpact.Contract.CrossBlockchainCallReturnsUint256(&_Gpact.TransactOpts, _blockchainId, _contract, _functionCallData)
}

// CrossBlockchainCallReturnsUint256 is a paid mutator transaction binding the contract method 0x8e22d534.
//
// Solidity: function crossBlockchainCallReturnsUint256(uint256 _blockchainId, address _contract, bytes _functionCallData) returns(uint256)
func (_Gpact *GpactTransactorSession) CrossBlockchainCallReturnsUint256(_blockchainId *big.Int, _contract common.Address, _functionCallData []byte) (*types.Transaction, error) {
	return _Gpact.Contract.CrossBlockchainCallReturnsUint256(&_Gpact.TransactOpts, _blockchainId, _contract, _functionCallData)
}

// CrossBlockchainCallWithReturn is a paid mutator transaction binding the contract method 0x63ce0dfa.
//
// Solidity: function crossBlockchainCallWithReturn(uint256 _blockchainId, address _contract, bytes _functionCallData) returns(bool failed, bytes returnValue)
func (_Gpact *GpactTransactor) CrossBlockchainCallWithReturn(opts *bind.TransactOpts, _blockchainId *big.Int, _contract common.Address, _functionCallData []byte) (*types.Transaction, error) {
	return _Gpact.contract.Transact(opts, "crossBlockchainCallWithReturn", _blockchainId, _contract, _functionCallData)
}

// CrossBlockchainCallWithReturn is a paid mutator transaction binding the contract method 0x63ce0dfa.
//
// Solidity: function crossBlockchainCallWithReturn(uint256 _blockchainId, address _contract, bytes _functionCallData) returns(bool failed, bytes returnValue)
func (_Gpact *GpactSession) CrossBlockchainCallWithReturn(_blockchainId *big.Int, _contract common.Address, _functionCallData []byte) (*types.Transaction, error) {
	return _Gpact.Contract.CrossBlockchainCallWithReturn(&_Gpact.TransactOpts, _blockchainId, _contract, _functionCallData)
}

// CrossBlockchainCallWithReturn is a paid mutator transaction binding the contract method 0x63ce0dfa.
//
// Solidity: function crossBlockchainCallWithReturn(uint256 _blockchainId, address _contract, bytes _functionCallData) returns(bool failed, bytes returnValue)
func (_Gpact *GpactTransactorSession) CrossBlockchainCallWithReturn(_blockchainId *big.Int, _contract common.Address, _functionCallData []byte) (*types.Transaction, error) {
	return _Gpact.Contract.CrossBlockchainCallWithReturn(&_Gpact.TransactOpts, _blockchainId, _contract, _functionCallData)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_Gpact *GpactTransactor) RenounceOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Gpact.contract.Transact(opts, "renounceOwnership")
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_Gpact *GpactSession) RenounceOwnership() (*types.Transaction, error) {
	return _Gpact.Contract.RenounceOwnership(&_Gpact.TransactOpts)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_Gpact *GpactTransactorSession) RenounceOwnership() (*types.Transaction, error) {
	return _Gpact.Contract.RenounceOwnership(&_Gpact.TransactOpts)
}

// Root is a paid mutator transaction binding the contract method 0xf0f67af2.
//
// Solidity: function root(uint256[] _blockchainIds, address[] _cbcAddresses, bytes32[] _eventFunctionSignatures, bytes[] _eventData, bytes[] _signatures) returns()
func (_Gpact *GpactTransactor) Root(opts *bind.TransactOpts, _blockchainIds []*big.Int, _cbcAddresses []common.Address, _eventFunctionSignatures [][32]byte, _eventData [][]byte, _signatures [][]byte) (*types.Transaction, error) {
	return _Gpact.contract.Transact(opts, "root", _blockchainIds, _cbcAddresses, _eventFunctionSignatures, _eventData, _signatures)
}

// Root is a paid mutator transaction binding the contract method 0xf0f67af2.
//
// Solidity: function root(uint256[] _blockchainIds, address[] _cbcAddresses, bytes32[] _eventFunctionSignatures, bytes[] _eventData, bytes[] _signatures) returns()
func (_Gpact *GpactSession) Root(_blockchainIds []*big.Int, _cbcAddresses []common.Address, _eventFunctionSignatures [][32]byte, _eventData [][]byte, _signatures [][]byte) (*types.Transaction, error) {
	return _Gpact.Contract.Root(&_Gpact.TransactOpts, _blockchainIds, _cbcAddresses, _eventFunctionSignatures, _eventData, _signatures)
}

// Root is a paid mutator transaction binding the contract method 0xf0f67af2.
//
// Solidity: function root(uint256[] _blockchainIds, address[] _cbcAddresses, bytes32[] _eventFunctionSignatures, bytes[] _eventData, bytes[] _signatures) returns()
func (_Gpact *GpactTransactorSession) Root(_blockchainIds []*big.Int, _cbcAddresses []common.Address, _eventFunctionSignatures [][32]byte, _eventData [][]byte, _signatures [][]byte) (*types.Transaction, error) {
	return _Gpact.Contract.Root(&_Gpact.TransactOpts, _blockchainIds, _cbcAddresses, _eventFunctionSignatures, _eventData, _signatures)
}

// Segment is a paid mutator transaction binding the contract method 0xfb11639e.
//
// Solidity: function segment(uint256[] _blockchainIds, address[] _cbcAddresses, bytes32[] _eventFunctionSignatures, bytes[] _eventData, bytes[] _signatures, uint256[] _callPath) returns()
func (_Gpact *GpactTransactor) Segment(opts *bind.TransactOpts, _blockchainIds []*big.Int, _cbcAddresses []common.Address, _eventFunctionSignatures [][32]byte, _eventData [][]byte, _signatures [][]byte, _callPath []*big.Int) (*types.Transaction, error) {
	return _Gpact.contract.Transact(opts, "segment", _blockchainIds, _cbcAddresses, _eventFunctionSignatures, _eventData, _signatures, _callPath)
}

// Segment is a paid mutator transaction binding the contract method 0xfb11639e.
//
// Solidity: function segment(uint256[] _blockchainIds, address[] _cbcAddresses, bytes32[] _eventFunctionSignatures, bytes[] _eventData, bytes[] _signatures, uint256[] _callPath) returns()
func (_Gpact *GpactSession) Segment(_blockchainIds []*big.Int, _cbcAddresses []common.Address, _eventFunctionSignatures [][32]byte, _eventData [][]byte, _signatures [][]byte, _callPath []*big.Int) (*types.Transaction, error) {
	return _Gpact.Contract.Segment(&_Gpact.TransactOpts, _blockchainIds, _cbcAddresses, _eventFunctionSignatures, _eventData, _signatures, _callPath)
}

// Segment is a paid mutator transaction binding the contract method 0xfb11639e.
//
// Solidity: function segment(uint256[] _blockchainIds, address[] _cbcAddresses, bytes32[] _eventFunctionSignatures, bytes[] _eventData, bytes[] _signatures, uint256[] _callPath) returns()
func (_Gpact *GpactTransactorSession) Segment(_blockchainIds []*big.Int, _cbcAddresses []common.Address, _eventFunctionSignatures [][32]byte, _eventData [][]byte, _signatures [][]byte, _callPath []*big.Int) (*types.Transaction, error) {
	return _Gpact.Contract.Segment(&_Gpact.TransactOpts, _blockchainIds, _cbcAddresses, _eventFunctionSignatures, _eventData, _signatures, _callPath)
}

// Signalling is a paid mutator transaction binding the contract method 0x9efabd34.
//
// Solidity: function signalling(uint256[] _blockchainIds, address[] _cbcAddresses, bytes32[] _eventFunctionSignatures, bytes[] _eventData, bytes[] _signatures) returns()
func (_Gpact *GpactTransactor) Signalling(opts *bind.TransactOpts, _blockchainIds []*big.Int, _cbcAddresses []common.Address, _eventFunctionSignatures [][32]byte, _eventData [][]byte, _signatures [][]byte) (*types.Transaction, error) {
	return _Gpact.contract.Transact(opts, "signalling", _blockchainIds, _cbcAddresses, _eventFunctionSignatures, _eventData, _signatures)
}

// Signalling is a paid mutator transaction binding the contract method 0x9efabd34.
//
// Solidity: function signalling(uint256[] _blockchainIds, address[] _cbcAddresses, bytes32[] _eventFunctionSignatures, bytes[] _eventData, bytes[] _signatures) returns()
func (_Gpact *GpactSession) Signalling(_blockchainIds []*big.Int, _cbcAddresses []common.Address, _eventFunctionSignatures [][32]byte, _eventData [][]byte, _signatures [][]byte) (*types.Transaction, error) {
	return _Gpact.Contract.Signalling(&_Gpact.TransactOpts, _blockchainIds, _cbcAddresses, _eventFunctionSignatures, _eventData, _signatures)
}

// Signalling is a paid mutator transaction binding the contract method 0x9efabd34.
//
// Solidity: function signalling(uint256[] _blockchainIds, address[] _cbcAddresses, bytes32[] _eventFunctionSignatures, bytes[] _eventData, bytes[] _signatures) returns()
func (_Gpact *GpactTransactorSession) Signalling(_blockchainIds []*big.Int, _cbcAddresses []common.Address, _eventFunctionSignatures [][32]byte, _eventData [][]byte, _signatures [][]byte) (*types.Transaction, error) {
	return _Gpact.Contract.Signalling(&_Gpact.TransactOpts, _blockchainIds, _cbcAddresses, _eventFunctionSignatures, _eventData, _signatures)
}

// Start is a paid mutator transaction binding the contract method 0xdf1bba01.
//
// Solidity: function start(uint256 _crossBlockchainTransactionId, uint256 _timeout, bytes _callGraph) returns()
func (_Gpact *GpactTransactor) Start(opts *bind.TransactOpts, _crossBlockchainTransactionId *big.Int, _timeout *big.Int, _callGraph []byte) (*types.Transaction, error) {
	return _Gpact.contract.Transact(opts, "start", _crossBlockchainTransactionId, _timeout, _callGraph)
}

// Start is a paid mutator transaction binding the contract method 0xdf1bba01.
//
// Solidity: function start(uint256 _crossBlockchainTransactionId, uint256 _timeout, bytes _callGraph) returns()
func (_Gpact *GpactSession) Start(_crossBlockchainTransactionId *big.Int, _timeout *big.Int, _callGraph []byte) (*types.Transaction, error) {
	return _Gpact.Contract.Start(&_Gpact.TransactOpts, _crossBlockchainTransactionId, _timeout, _callGraph)
}

// Start is a paid mutator transaction binding the contract method 0xdf1bba01.
//
// Solidity: function start(uint256 _crossBlockchainTransactionId, uint256 _timeout, bytes _callGraph) returns()
func (_Gpact *GpactTransactorSession) Start(_crossBlockchainTransactionId *big.Int, _timeout *big.Int, _callGraph []byte) (*types.Transaction, error) {
	return _Gpact.Contract.Start(&_Gpact.TransactOpts, _crossBlockchainTransactionId, _timeout, _callGraph)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Gpact *GpactTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _Gpact.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Gpact *GpactSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _Gpact.Contract.TransferOwnership(&_Gpact.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Gpact *GpactTransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _Gpact.Contract.TransferOwnership(&_Gpact.TransactOpts, newOwner)
}

// GpactBadCallIterator is returned from FilterBadCall and is used to iterate over the raw logs and unpacked data for BadCall events raised by the Gpact contract.
type GpactBadCallIterator struct {
	Event *GpactBadCall // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *GpactBadCallIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(GpactBadCall)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(GpactBadCall)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *GpactBadCallIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *GpactBadCallIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// GpactBadCall represents a BadCall event raised by the Gpact contract.
type GpactBadCall struct {
	ExpectedBlockchainId *big.Int
	ActualBlockchainId   *big.Int
	ExpectedContract     common.Address
	ActualContract       common.Address
	ExpectedFunctionCall []byte
	ActualFunctionCall   []byte
	Raw                  types.Log // Blockchain specific contextual infos
}

// FilterBadCall is a free log retrieval operation binding the contract event 0x8b5fc485a070cefca43e0a1d8cc72cf38dc31d5bf14f58cedcc59c73cac84e15.
//
// Solidity: event BadCall(uint256 _expectedBlockchainId, uint256 _actualBlockchainId, address _expectedContract, address _actualContract, bytes _expectedFunctionCall, bytes _actualFunctionCall)
func (_Gpact *GpactFilterer) FilterBadCall(opts *bind.FilterOpts) (*GpactBadCallIterator, error) {

	logs, sub, err := _Gpact.contract.FilterLogs(opts, "BadCall")
	if err != nil {
		return nil, err
	}
	return &GpactBadCallIterator{contract: _Gpact.contract, event: "BadCall", logs: logs, sub: sub}, nil
}

// WatchBadCall is a free log subscription operation binding the contract event 0x8b5fc485a070cefca43e0a1d8cc72cf38dc31d5bf14f58cedcc59c73cac84e15.
//
// Solidity: event BadCall(uint256 _expectedBlockchainId, uint256 _actualBlockchainId, address _expectedContract, address _actualContract, bytes _expectedFunctionCall, bytes _actualFunctionCall)
func (_Gpact *GpactFilterer) WatchBadCall(opts *bind.WatchOpts, sink chan<- *GpactBadCall) (event.Subscription, error) {

	logs, sub, err := _Gpact.contract.WatchLogs(opts, "BadCall")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(GpactBadCall)
				if err := _Gpact.contract.UnpackLog(event, "BadCall", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseBadCall is a log parse operation binding the contract event 0x8b5fc485a070cefca43e0a1d8cc72cf38dc31d5bf14f58cedcc59c73cac84e15.
//
// Solidity: event BadCall(uint256 _expectedBlockchainId, uint256 _actualBlockchainId, address _expectedContract, address _actualContract, bytes _expectedFunctionCall, bytes _actualFunctionCall)
func (_Gpact *GpactFilterer) ParseBadCall(log types.Log) (*GpactBadCall, error) {
	event := new(GpactBadCall)
	if err := _Gpact.contract.UnpackLog(event, "BadCall", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// GpactCallFailureIterator is returned from FilterCallFailure and is used to iterate over the raw logs and unpacked data for CallFailure events raised by the Gpact contract.
type GpactCallFailureIterator struct {
	Event *GpactCallFailure // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *GpactCallFailureIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(GpactCallFailure)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(GpactCallFailure)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *GpactCallFailureIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *GpactCallFailureIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// GpactCallFailure represents a CallFailure event raised by the Gpact contract.
type GpactCallFailure struct {
	RevertReason string
	Raw          types.Log // Blockchain specific contextual infos
}

// FilterCallFailure is a free log retrieval operation binding the contract event 0x38e7ccc4b02b2da681f96e62aef89b5c6d4115f501f8d42430bb2f5f2fa981a6.
//
// Solidity: event CallFailure(string _revertReason)
func (_Gpact *GpactFilterer) FilterCallFailure(opts *bind.FilterOpts) (*GpactCallFailureIterator, error) {

	logs, sub, err := _Gpact.contract.FilterLogs(opts, "CallFailure")
	if err != nil {
		return nil, err
	}
	return &GpactCallFailureIterator{contract: _Gpact.contract, event: "CallFailure", logs: logs, sub: sub}, nil
}

// WatchCallFailure is a free log subscription operation binding the contract event 0x38e7ccc4b02b2da681f96e62aef89b5c6d4115f501f8d42430bb2f5f2fa981a6.
//
// Solidity: event CallFailure(string _revertReason)
func (_Gpact *GpactFilterer) WatchCallFailure(opts *bind.WatchOpts, sink chan<- *GpactCallFailure) (event.Subscription, error) {

	logs, sub, err := _Gpact.contract.WatchLogs(opts, "CallFailure")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(GpactCallFailure)
				if err := _Gpact.contract.UnpackLog(event, "CallFailure", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseCallFailure is a log parse operation binding the contract event 0x38e7ccc4b02b2da681f96e62aef89b5c6d4115f501f8d42430bb2f5f2fa981a6.
//
// Solidity: event CallFailure(string _revertReason)
func (_Gpact *GpactFilterer) ParseCallFailure(log types.Log) (*GpactCallFailure, error) {
	event := new(GpactCallFailure)
	if err := _Gpact.contract.UnpackLog(event, "CallFailure", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// GpactCallResultIterator is returned from FilterCallResult and is used to iterate over the raw logs and unpacked data for CallResult events raised by the Gpact contract.
type GpactCallResultIterator struct {
	Event *GpactCallResult // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *GpactCallResultIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(GpactCallResult)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(GpactCallResult)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *GpactCallResultIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *GpactCallResultIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// GpactCallResult represents a CallResult event raised by the Gpact contract.
type GpactCallResult struct {
	BlockchainId *big.Int
	Contract     common.Address
	FunctionCall []byte
	Result       []byte
	Raw          types.Log // Blockchain specific contextual infos
}

// FilterCallResult is a free log retrieval operation binding the contract event 0x971a379ee339d51e370a4733845f31c68e234014c8494ecedb867ae2cdc1ef68.
//
// Solidity: event CallResult(uint256 _blockchainId, address _contract, bytes _functionCall, bytes _result)
func (_Gpact *GpactFilterer) FilterCallResult(opts *bind.FilterOpts) (*GpactCallResultIterator, error) {

	logs, sub, err := _Gpact.contract.FilterLogs(opts, "CallResult")
	if err != nil {
		return nil, err
	}
	return &GpactCallResultIterator{contract: _Gpact.contract, event: "CallResult", logs: logs, sub: sub}, nil
}

// WatchCallResult is a free log subscription operation binding the contract event 0x971a379ee339d51e370a4733845f31c68e234014c8494ecedb867ae2cdc1ef68.
//
// Solidity: event CallResult(uint256 _blockchainId, address _contract, bytes _functionCall, bytes _result)
func (_Gpact *GpactFilterer) WatchCallResult(opts *bind.WatchOpts, sink chan<- *GpactCallResult) (event.Subscription, error) {

	logs, sub, err := _Gpact.contract.WatchLogs(opts, "CallResult")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(GpactCallResult)
				if err := _Gpact.contract.UnpackLog(event, "CallResult", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseCallResult is a log parse operation binding the contract event 0x971a379ee339d51e370a4733845f31c68e234014c8494ecedb867ae2cdc1ef68.
//
// Solidity: event CallResult(uint256 _blockchainId, address _contract, bytes _functionCall, bytes _result)
func (_Gpact *GpactFilterer) ParseCallResult(log types.Log) (*GpactCallResult, error) {
	event := new(GpactCallResult)
	if err := _Gpact.contract.UnpackLog(event, "CallResult", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// GpactDumpIterator is returned from FilterDump and is used to iterate over the raw logs and unpacked data for Dump events raised by the Gpact contract.
type GpactDumpIterator struct {
	Event *GpactDump // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *GpactDumpIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(GpactDump)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(GpactDump)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *GpactDumpIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *GpactDumpIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// GpactDump represents a Dump event raised by the Gpact contract.
type GpactDump struct {
	Val1 *big.Int
	Val2 [32]byte
	Val3 common.Address
	Val4 []byte
	Raw  types.Log // Blockchain specific contextual infos
}

// FilterDump is a free log retrieval operation binding the contract event 0x3f65ec40a934b9a9e582b4c728ca2798fc40cf7de89354f5ab26a47fe60996c7.
//
// Solidity: event Dump(uint256 _val1, bytes32 _val2, address _val3, bytes _val4)
func (_Gpact *GpactFilterer) FilterDump(opts *bind.FilterOpts) (*GpactDumpIterator, error) {

	logs, sub, err := _Gpact.contract.FilterLogs(opts, "Dump")
	if err != nil {
		return nil, err
	}
	return &GpactDumpIterator{contract: _Gpact.contract, event: "Dump", logs: logs, sub: sub}, nil
}

// WatchDump is a free log subscription operation binding the contract event 0x3f65ec40a934b9a9e582b4c728ca2798fc40cf7de89354f5ab26a47fe60996c7.
//
// Solidity: event Dump(uint256 _val1, bytes32 _val2, address _val3, bytes _val4)
func (_Gpact *GpactFilterer) WatchDump(opts *bind.WatchOpts, sink chan<- *GpactDump) (event.Subscription, error) {

	logs, sub, err := _Gpact.contract.WatchLogs(opts, "Dump")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(GpactDump)
				if err := _Gpact.contract.UnpackLog(event, "Dump", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseDump is a log parse operation binding the contract event 0x3f65ec40a934b9a9e582b4c728ca2798fc40cf7de89354f5ab26a47fe60996c7.
//
// Solidity: event Dump(uint256 _val1, bytes32 _val2, address _val3, bytes _val4)
func (_Gpact *GpactFilterer) ParseDump(log types.Log) (*GpactDump, error) {
	event := new(GpactDump)
	if err := _Gpact.contract.UnpackLog(event, "Dump", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// GpactNotEnoughCallsIterator is returned from FilterNotEnoughCalls and is used to iterate over the raw logs and unpacked data for NotEnoughCalls events raised by the Gpact contract.
type GpactNotEnoughCallsIterator struct {
	Event *GpactNotEnoughCalls // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *GpactNotEnoughCallsIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(GpactNotEnoughCalls)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(GpactNotEnoughCalls)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *GpactNotEnoughCallsIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *GpactNotEnoughCallsIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// GpactNotEnoughCalls represents a NotEnoughCalls event raised by the Gpact contract.
type GpactNotEnoughCalls struct {
	ExpectedNumberOfCalls *big.Int
	ActualNumberOfCalls   *big.Int
	Raw                   types.Log // Blockchain specific contextual infos
}

// FilterNotEnoughCalls is a free log retrieval operation binding the contract event 0xce3bac95f99adf24dc6d7d8a7264b6c40b211c40e0f79a78482298c0867fae9b.
//
// Solidity: event NotEnoughCalls(uint256 _expectedNumberOfCalls, uint256 _actualNumberOfCalls)
func (_Gpact *GpactFilterer) FilterNotEnoughCalls(opts *bind.FilterOpts) (*GpactNotEnoughCallsIterator, error) {

	logs, sub, err := _Gpact.contract.FilterLogs(opts, "NotEnoughCalls")
	if err != nil {
		return nil, err
	}
	return &GpactNotEnoughCallsIterator{contract: _Gpact.contract, event: "NotEnoughCalls", logs: logs, sub: sub}, nil
}

// WatchNotEnoughCalls is a free log subscription operation binding the contract event 0xce3bac95f99adf24dc6d7d8a7264b6c40b211c40e0f79a78482298c0867fae9b.
//
// Solidity: event NotEnoughCalls(uint256 _expectedNumberOfCalls, uint256 _actualNumberOfCalls)
func (_Gpact *GpactFilterer) WatchNotEnoughCalls(opts *bind.WatchOpts, sink chan<- *GpactNotEnoughCalls) (event.Subscription, error) {

	logs, sub, err := _Gpact.contract.WatchLogs(opts, "NotEnoughCalls")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(GpactNotEnoughCalls)
				if err := _Gpact.contract.UnpackLog(event, "NotEnoughCalls", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseNotEnoughCalls is a log parse operation binding the contract event 0xce3bac95f99adf24dc6d7d8a7264b6c40b211c40e0f79a78482298c0867fae9b.
//
// Solidity: event NotEnoughCalls(uint256 _expectedNumberOfCalls, uint256 _actualNumberOfCalls)
func (_Gpact *GpactFilterer) ParseNotEnoughCalls(log types.Log) (*GpactNotEnoughCalls, error) {
	event := new(GpactNotEnoughCalls)
	if err := _Gpact.contract.UnpackLog(event, "NotEnoughCalls", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// GpactOwnershipTransferredIterator is returned from FilterOwnershipTransferred and is used to iterate over the raw logs and unpacked data for OwnershipTransferred events raised by the Gpact contract.
type GpactOwnershipTransferredIterator struct {
	Event *GpactOwnershipTransferred // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *GpactOwnershipTransferredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(GpactOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(GpactOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *GpactOwnershipTransferredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *GpactOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// GpactOwnershipTransferred represents a OwnershipTransferred event raised by the Gpact contract.
type GpactOwnershipTransferred struct {
	PreviousOwner common.Address
	NewOwner      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterOwnershipTransferred is a free log retrieval operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_Gpact *GpactFilterer) FilterOwnershipTransferred(opts *bind.FilterOpts, previousOwner []common.Address, newOwner []common.Address) (*GpactOwnershipTransferredIterator, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _Gpact.contract.FilterLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return &GpactOwnershipTransferredIterator{contract: _Gpact.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

// WatchOwnershipTransferred is a free log subscription operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_Gpact *GpactFilterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *GpactOwnershipTransferred, previousOwner []common.Address, newOwner []common.Address) (event.Subscription, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _Gpact.contract.WatchLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(GpactOwnershipTransferred)
				if err := _Gpact.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOwnershipTransferred is a log parse operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_Gpact *GpactFilterer) ParseOwnershipTransferred(log types.Log) (*GpactOwnershipTransferred, error) {
	event := new(GpactOwnershipTransferred)
	if err := _Gpact.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// GpactRootIterator is returned from FilterRoot and is used to iterate over the raw logs and unpacked data for Root events raised by the Gpact contract.
type GpactRootIterator struct {
	Event *GpactRoot // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *GpactRootIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(GpactRoot)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(GpactRoot)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *GpactRootIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *GpactRootIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// GpactRoot represents a Root event raised by the Gpact contract.
type GpactRoot struct {
	CrossBlockchainTransactionId *big.Int
	Success                      bool
	Raw                          types.Log // Blockchain specific contextual infos
}

// FilterRoot is a free log retrieval operation binding the contract event 0xe6763dd99bf894d72f3499dd572aa42876eae7ae028c32fff21654e1bbc4c807.
//
// Solidity: event Root(uint256 _crossBlockchainTransactionId, bool _success)
func (_Gpact *GpactFilterer) FilterRoot(opts *bind.FilterOpts) (*GpactRootIterator, error) {

	logs, sub, err := _Gpact.contract.FilterLogs(opts, "Root")
	if err != nil {
		return nil, err
	}
	return &GpactRootIterator{contract: _Gpact.contract, event: "Root", logs: logs, sub: sub}, nil
}

// WatchRoot is a free log subscription operation binding the contract event 0xe6763dd99bf894d72f3499dd572aa42876eae7ae028c32fff21654e1bbc4c807.
//
// Solidity: event Root(uint256 _crossBlockchainTransactionId, bool _success)
func (_Gpact *GpactFilterer) WatchRoot(opts *bind.WatchOpts, sink chan<- *GpactRoot) (event.Subscription, error) {

	logs, sub, err := _Gpact.contract.WatchLogs(opts, "Root")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(GpactRoot)
				if err := _Gpact.contract.UnpackLog(event, "Root", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRoot is a log parse operation binding the contract event 0xe6763dd99bf894d72f3499dd572aa42876eae7ae028c32fff21654e1bbc4c807.
//
// Solidity: event Root(uint256 _crossBlockchainTransactionId, bool _success)
func (_Gpact *GpactFilterer) ParseRoot(log types.Log) (*GpactRoot, error) {
	event := new(GpactRoot)
	if err := _Gpact.contract.UnpackLog(event, "Root", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// GpactSegmentIterator is returned from FilterSegment and is used to iterate over the raw logs and unpacked data for Segment events raised by the Gpact contract.
type GpactSegmentIterator struct {
	Event *GpactSegment // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *GpactSegmentIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(GpactSegment)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(GpactSegment)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *GpactSegmentIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *GpactSegmentIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// GpactSegment represents a Segment event raised by the Gpact contract.
type GpactSegment struct {
	RootBlockchainId             *big.Int
	CrossBlockchainTransactionId *big.Int
	HashOfCallGraph              [32]byte
	CallPath                     []*big.Int
	LockedContracts              []common.Address
	Success                      bool
	ReturnValue                  []byte
	Raw                          types.Log // Blockchain specific contextual infos
}

// FilterSegment is a free log retrieval operation binding the contract event 0x86df4889cc0714742f804eb411c54569f17daedfcf415d5c81a12999948267a7.
//
// Solidity: event Segment(uint256 _rootBlockchainId, uint256 _crossBlockchainTransactionId, bytes32 _hashOfCallGraph, uint256[] _callPath, address[] _lockedContracts, bool _success, bytes _returnValue)
func (_Gpact *GpactFilterer) FilterSegment(opts *bind.FilterOpts) (*GpactSegmentIterator, error) {

	logs, sub, err := _Gpact.contract.FilterLogs(opts, "Segment")
	if err != nil {
		return nil, err
	}
	return &GpactSegmentIterator{contract: _Gpact.contract, event: "Segment", logs: logs, sub: sub}, nil
}

// WatchSegment is a free log subscription operation binding the contract event 0x86df4889cc0714742f804eb411c54569f17daedfcf415d5c81a12999948267a7.
//
// Solidity: event Segment(uint256 _rootBlockchainId, uint256 _crossBlockchainTransactionId, bytes32 _hashOfCallGraph, uint256[] _callPath, address[] _lockedContracts, bool _success, bytes _returnValue)
func (_Gpact *GpactFilterer) WatchSegment(opts *bind.WatchOpts, sink chan<- *GpactSegment) (event.Subscription, error) {

	logs, sub, err := _Gpact.contract.WatchLogs(opts, "Segment")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(GpactSegment)
				if err := _Gpact.contract.UnpackLog(event, "Segment", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseSegment is a log parse operation binding the contract event 0x86df4889cc0714742f804eb411c54569f17daedfcf415d5c81a12999948267a7.
//
// Solidity: event Segment(uint256 _rootBlockchainId, uint256 _crossBlockchainTransactionId, bytes32 _hashOfCallGraph, uint256[] _callPath, address[] _lockedContracts, bool _success, bytes _returnValue)
func (_Gpact *GpactFilterer) ParseSegment(log types.Log) (*GpactSegment, error) {
	event := new(GpactSegment)
	if err := _Gpact.contract.UnpackLog(event, "Segment", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// GpactSignallingIterator is returned from FilterSignalling and is used to iterate over the raw logs and unpacked data for Signalling events raised by the Gpact contract.
type GpactSignallingIterator struct {
	Event *GpactSignalling // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *GpactSignallingIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(GpactSignalling)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(GpactSignalling)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *GpactSignallingIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *GpactSignallingIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// GpactSignalling represents a Signalling event raised by the Gpact contract.
type GpactSignalling struct {
	RootBcId                     *big.Int
	CrossBlockchainTransactionId *big.Int
	Raw                          types.Log // Blockchain specific contextual infos
}

// FilterSignalling is a free log retrieval operation binding the contract event 0x8426029537c24c21c8056ae94a666a5e448f1080699c70b9bf691cfeb9d5feec.
//
// Solidity: event Signalling(uint256 _rootBcId, uint256 _crossBlockchainTransactionId)
func (_Gpact *GpactFilterer) FilterSignalling(opts *bind.FilterOpts) (*GpactSignallingIterator, error) {

	logs, sub, err := _Gpact.contract.FilterLogs(opts, "Signalling")
	if err != nil {
		return nil, err
	}
	return &GpactSignallingIterator{contract: _Gpact.contract, event: "Signalling", logs: logs, sub: sub}, nil
}

// WatchSignalling is a free log subscription operation binding the contract event 0x8426029537c24c21c8056ae94a666a5e448f1080699c70b9bf691cfeb9d5feec.
//
// Solidity: event Signalling(uint256 _rootBcId, uint256 _crossBlockchainTransactionId)
func (_Gpact *GpactFilterer) WatchSignalling(opts *bind.WatchOpts, sink chan<- *GpactSignalling) (event.Subscription, error) {

	logs, sub, err := _Gpact.contract.WatchLogs(opts, "Signalling")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(GpactSignalling)
				if err := _Gpact.contract.UnpackLog(event, "Signalling", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseSignalling is a log parse operation binding the contract event 0x8426029537c24c21c8056ae94a666a5e448f1080699c70b9bf691cfeb9d5feec.
//
// Solidity: event Signalling(uint256 _rootBcId, uint256 _crossBlockchainTransactionId)
func (_Gpact *GpactFilterer) ParseSignalling(log types.Log) (*GpactSignalling, error) {
	event := new(GpactSignalling)
	if err := _Gpact.contract.UnpackLog(event, "Signalling", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// GpactStartIterator is returned from FilterStart and is used to iterate over the raw logs and unpacked data for Start events raised by the Gpact contract.
type GpactStartIterator struct {
	Event *GpactStart // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *GpactStartIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(GpactStart)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(GpactStart)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *GpactStartIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *GpactStartIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// GpactStart represents a Start event raised by the Gpact contract.
type GpactStart struct {
	CrossBlockchainTransactionId *big.Int
	Caller                       common.Address
	Timeout                      *big.Int
	CallGraph                    []byte
	Raw                          types.Log // Blockchain specific contextual infos
}

// FilterStart is a free log retrieval operation binding the contract event 0x77dab611ad9a24b763e2742f57749a0227393e0da76212d74fceb326b0661424.
//
// Solidity: event Start(uint256 _crossBlockchainTransactionId, address _caller, uint256 _timeout, bytes _callGraph)
func (_Gpact *GpactFilterer) FilterStart(opts *bind.FilterOpts) (*GpactStartIterator, error) {

	logs, sub, err := _Gpact.contract.FilterLogs(opts, "Start")
	if err != nil {
		return nil, err
	}
	return &GpactStartIterator{contract: _Gpact.contract, event: "Start", logs: logs, sub: sub}, nil
}

// WatchStart is a free log subscription operation binding the contract event 0x77dab611ad9a24b763e2742f57749a0227393e0da76212d74fceb326b0661424.
//
// Solidity: event Start(uint256 _crossBlockchainTransactionId, address _caller, uint256 _timeout, bytes _callGraph)
func (_Gpact *GpactFilterer) WatchStart(opts *bind.WatchOpts, sink chan<- *GpactStart) (event.Subscription, error) {

	logs, sub, err := _Gpact.contract.WatchLogs(opts, "Start")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(GpactStart)
				if err := _Gpact.contract.UnpackLog(event, "Start", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseStart is a log parse operation binding the contract event 0x77dab611ad9a24b763e2742f57749a0227393e0da76212d74fceb326b0661424.
//
// Solidity: event Start(uint256 _crossBlockchainTransactionId, address _caller, uint256 _timeout, bytes _callGraph)
func (_Gpact *GpactFilterer) ParseStart(log types.Log) (*GpactStart, error) {
	event := new(GpactStart)
	if err := _Gpact.contract.UnpackLog(event, "Start", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
